Python3os.fchdir()方法	os.fchdir() 方法通过文件描述符改变当前工作目录。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fchdir() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fchdir() 方法通过文件描述符改变当前工作目录。</p><p> Unix, Windows 上可用。</p><h3>语法</h3><p><b>fchdir()</b>方法语法格式如下：</p><pre><br/>os.fchdir(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fchdir() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 首先到目录 "/var/www/html" <br/>os.chdir("/var/www/html" )<br/><br/># 输出当前目录<br/>print ("当前工作目录为 : %s" % os.getcwd())<br/><br/># 打开新目录 "/tmp"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 使用 os.fchdir() 方法修改到新目录<br/>os.fchdir(fd)<br/><br/># 输出当前目录<br/>print ("当前工作目录为 : %s" % os.getcwd())<br/><br/># 关闭打开的目录<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录为 : /var/www/html<br/>当前工作目录为 : /tmp<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3zfill()方法	Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 zfill()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。</p><h2>语法</h2><p>zfill()方法语法：</p><pre><br/>str.zfill(width)<br/></pre><h2>参数</h2><ul><li>width -- 指定字符串的长度。原字符串右对齐，前面填充0。</li></ul><h2>返回值</h2><p>返回指定长度的字符串。</p><h2>实例</h2><p>以下实例展示了 zfill()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example from runoob....wow!!!"<br/>print ("str.zfill : ",str.zfill(40))<br/>print ("str.zfill : ",str.zfill(50))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>str.zfill :  this is string example from runoob....wow!!!<br/>str.zfill :  000000this is string example from runoob....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
PythonFileseek()方法	seek() 方法用于移动文件读取指针到指定位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File seek() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>seek()</b> 方法用于移动文件读取指针到指定位置。</p></div></div>
Pythonsplit()方法	Python split()通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串	<div class="article-body"><div class="article-intro" id="content"><h1>Python split()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python split()通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串</p><h2>语法</h2><p>split()方法语法：</p><pre><br/>str.split(str="", num=string.count(str)).<br/></pre><h2>参数</h2><ul><li>str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num -- 分割次数。</li></ul><h2>返回值</h2><p>返回分割后的字符串列表。</p><h2>实例</h2><p>以下实例展示了split()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "Line1-abcdef \nLine2-abc \nLine4-abcd";<br/>print str.split( );<br/>print str.split(' ', 1 );<br/></pre><p>以上实例输出结果如下：</p><pre><br/>['Line1-abcdef', 'Line2-abc', 'Line4-abcd']<br/>['Line1-abcdef', '\nLine2-abc \nLine4-abcd']<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3os.chmod()方法	os.chmod() 方法用于更改文件或目录的权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.chmod() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chmod() 方法用于更改文件或目录的权限。</p><p>Unix 系统可用。</p><h3>语法</h3><p><b>chmod()</b>方法语法格式如下：</p><pre><br/>os.chmod(path, mode)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 文件名路径或目录路径。 </p></li><li><p><b>flags</b> -- 可用以下选项按位或操作生成，目录的读权限表示可以获取目录里文件名列表，，执行权限表示可以把工作目录切换到此目录，删除添加目录里的文件必须同时有写和执行权限，文件权限以用户id-&gt;组id-&gt;其它顺序检验,最先匹配的允许或禁止权限被应用。 </p><ul><li><b>stat.S_IXOTH:</b>     其他用户有执行权0o001</li></ul></li><li><b>stat.S_IWOTH:</b>     其他用户有写权限0o002</li><li><b>stat.S_IROTH:</b>     其他用户有读权限0o004</li><li><b>stat.S_IRWXO:</b>     其他用户有全部权限(权限掩码)0o007</li><li><b>stat.S_IXGRP:</b>    组用户有执行权限0o010</li><li><b>stat.S_IWGRP:</b>     组用户有写权限0o020</li><li><b>stat.S_IRGRP:</b>     组用户有读权限0o040</li><li><b>stat.S_IRWXG:</b>     组用户有全部权限(权限掩码)0o070</li><li><b>stat.S_IXUSR:</b>     拥有者具有执行权限0o100</li><li><b>stat.S_IWUSR:</b>     拥有者具有写权限0o200</li><li><b>stat.S_IRUSR:</b>     拥有者具有读权限0o400</li><li><b>stat.S_IRWXU:</b>     拥有者有全部权限(权限掩码)0o700</li><li><b>stat.S_ISVTX:</b>     目录里文件目录只有拥有者才可删除更改0o1000</li><li><b>stat.S_ISGID:</b>     执行此文件其进程有效组为文件所在组0o2000</li><li><b>stat.S_ISUID:</b>     执行此文件其进程有效用户为文件所有者0o4000</li><li><b>stat.S_IREAD:</b>     windows下设为只读</li><li><b>stat.S_IWRITE:</b>    windows下取消只读</li></ul></div></div>
Pythonos.chroot()方法	os.chroot() 方法用于更改当前进程的根目录为指定的目录，使用该函数需要管理员权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.chroot() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chroot() 方法用于更改当前进程的根目录为指定的目录，使用该函数需要管理员权限。</p><h3>语法</h3><p><b>chroot()</b>方法语法格式如下：</p><pre><br/>os.chroot(path);<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要设置为根目录的目录。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 chroot() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 设置根目录为 /tmp<br/><br/>os.chroot("/tmp")<br/><br/>print "修改根目录成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre>修改根目录成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonsplitlines()方法	Python splitlines() 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python splitlines()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python splitlines() 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</p><h2>语法</h2><p>splitlines()方法语法：</p><pre><br/>str.splitlines([keepends])<br/></pre><h2>参数</h2><ul><li>keepends -- 在输出结果里是否去掉换行符('\r', '\r\n', \n')，默认为 False，不包含换行符，如果为 True，则保留换行符。</li></ul><h2>返回值</h2><p>返回一个包含各行作为元素的列表。</p><h2>实例</h2><p>以下实例展示了splitlines()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str1 = 'ab c\n\nde fg\rkl\r\n'<br/>print str1.splitlines();<br/><br/>str2 = 'ab c\n\nde fg\rkl\r\n'<br/>print str2.splitlines(True)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>['ab c', '', 'de fg', 'kl']<br/>['ab c\n', '\n', 'de fg\r', 'kl\r\n']<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3Filereadline()方法	readline() 方法用于从文件读取整行，包括 "\n" 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 "\n" 字符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File readline() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>readline()</b> 方法用于从文件读取整行，包括 "\n" 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 "\n" 字符。</p></div></div>
Pythonstrip()方法	Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。	<div class="article-body"><div class="article-intro" id="content"><h1>Python strip()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。</p><h2>语法</h2><p>strip()方法语法：</p><pre><br/>str.strip([chars]);<br/></pre><h2>参数</h2><ul><li>chars -- 移除字符串头尾指定的字符。</li></ul><h2>返回值</h2><p>返回移除字符串头尾指定的字符生成的新字符串。</p><h2>实例</h2><p>以下实例展示了strip()函数的使用方法：</p><div class="example"><h2 class="example">实例(Python 2.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-identifier">str</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">0000000     Runoob  0000000</span><span class="hl-quotes">"</span><span class="hl-code">; </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-identifier">str</span><span class="hl-code">.</span><span class="hl-identifier">strip</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">0</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code">;  </span><span class="hl-comment"># 去除首尾字符 0</span><span class="hl-code"></span><span class="hl-identifier">str2</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">   Runoob      </span><span class="hl-quotes">"</span><span class="hl-code">;   </span><span class="hl-comment"># 去除首尾空格</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-identifier">str2</span><span class="hl-code">.</span><span class="hl-identifier">strip</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;</span></div></div></div><p>以上实例输出结果如下：</p><pre><br/>     Runoob  <br/>Runoob<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythontimealtzone()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time altzone()方法</h1><hr/><h2>描述</h2><p>Python time  altzone() 函数返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。对夏令时启用地区才能使用。</p><h2>语法</h2><p>altzone()方法语法：</p><pre><br/>time.altzone<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回格林威治西部的夏令时地区的偏移秒数。如果该地区在格林威治东部会返回负值（如西欧，包括英国）。</p><h2>实例</h2><p>以下实例展示了 altzone()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>print "time.altzone %d " % time.altzone<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.altzone() 25200<br/></pre></div></div>
PythonListcmp()方法	cmp() 方法用于比较两个列表的元素。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List cmp()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>cmp() 方法用于比较两个列表的元素。</p><h2>语法</h2><p>cmp()方法语法：</p><pre><br/>cmp(list1, list2)<br/></pre><h2>参数</h2><ul><li>list1 -- 比较的列表。</li><li>list2 -- 比较的列表。</li></ul><h2>返回值</h2><p>如果比较的元素是同类型的,则比较其值,返回结果。</p><p>如果两个元素不是同一种类型,则检查它们是否是数字。</p><ul><li>如果是数字,执行必要的数字强制类型转换,然后比较。 </li><li>如果有一方的元素是数字,则另一方的元素"大"(数字是"最小的")  </li><li>否则,通过类型名字的字母顺序进行比较。</li></ul><p>如果有一个列表首先到达末尾,则另一个长一点的列表"大"。</p><p>如果我们用尽了两个列表的元素而且所 有元素都是相等的,那么结果就是个平局,就是说返回一个 0。</p><h2>实例</h2><p>以下实例展示了 cmp()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>list1, list2 = [123, 'xyz'], [456, 'abc']<br/><br/>print cmp(list1, list2);<br/>print cmp(list2, list1);<br/>list3 = list2 + [786];<br/>print cmp(list2, list3)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>-1<br/>1<br/>-1<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Pythonbytearray()函数	bytearray() 方法返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 <= x < 256。	<div class="article-body"><div class="article-intro" id="content"><h1>Python bytearray() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><strong>bytearray()</strong> 方法返回一个新字节数组。这个数组里的元素是可变的，并且每个元素的值范围: 0 &lt;= x &lt; 256。</p><h2>语法</h2><p>bytearray()方法语法：</p><pre><br/>class bytearray([source[, encoding[, errors]]])<br/></pre><h2>参数</h2><ul><li>如果 source 为整数，则返回一个长度为 source 的初始化数组；</li><li>如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</li><li>如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；</li><li>如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。</li></ul></div></div>
Python3uniform()函数	 uniform() 方法将随机生成下一个实数，它在[x,y]范围内。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> uniform() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>uniform()</b> 方法将随机生成下一个实数，它在[x,y]范围内。</p><hr/><h2>语法</h2><p>以下是 uniform() 方法的语法:</p><pre><br/>import random<br/><br/>random.uniform(x, y)<br/></pre><p><strong>注意：</strong>uniform()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 随机数的最小值。</li><li>y -- 随机数的最大值。</li></ul><hr/><h2>返回值</h2><p>返回一个浮点数。</p><hr/><h2>实例</h2><p>以下展示了使用 uniform() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import random<br/><br/>print ("uniform(5, 10) 的随机浮点数 : ",  random.uniform(5, 10))<br/><br/>print ("uniform(7, 14) 的随机浮点数 : ",  random.uniform(7, 14))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>uniform(5, 10) 的随机浮点数 :  7.054602800254241<br/>uniform(7, 14) 的随机浮点数 :  12.552229882744296<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3ljust()方法	ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 ljust()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><h2>语法</h2><p>ljust()方法语法：</p><pre><br/>str.ljust(width[, fillchar])<br/></pre><h2>参数</h2><ul><li>width -- 指定字符串长度。</li><li>fillchar -- 填充字符，默认为空格。</li></ul><h2>返回值</h2><p>返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><h2>实例</h2><p>以下实例展示了ljust()的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "Runoob example....wow!!!"<br/><br/>print (str.ljust(50, '*'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Runoob example....wow!!!**************************<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python字典pop()方法	Python 字典 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典 pop() 方法</h1><p><a href="http://www.runoob.com/python/python-dictionary.html"><img alt="Python 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字典</a></p><hr/><h2>描述</h2><p>Python 字典 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</p><h2>语法</h2><p>pop()方法语法：</p><pre><br/>pop(key[,default])<br/></pre><h2>参数</h2><ul><li>key: 要删除的键值</li><li>default: 如果没有 key，返回 default 值</li></ul><h2>返回值</h2><p>返回被删除的值。</p><h2>实例</h2><p>以下实例展示了 pop() 方法的使用方法：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>site= {'name': '菜鸟教程', 'alexa': 10000, 'url': 'www.runoob.com'}<br/>pop_obj=site.pop('name')<br/>print pop_obj   // 输出 ：菜鸟教程<br/><br/></pre><hr/><p><a href="http://www.runoob.com/python/python-dictionary.html"><img alt="Python 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字典</a></p></div></div>
Pythoncos()函数	 cos() 返回x的弧度的余弦值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> cos() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>cos()</b> 返回x的弧度的余弦值。</p><hr/><h2>语法</h2><p>以下是 cos() 方法的语法:</p><pre><br/>import math<br/><br/>math.cos(x)<br/></pre><p><strong>注意：</strong>cos()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回x的弧度的余弦值,-1 到 1 之间。</p><hr/><h2>实例</h2><p>以下展示了使用 cos() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "cos(3) : ",  math.cos(3)<br/>print "cos(-3) : ",  math.cos(-3)<br/>print "cos(0) : ",  math.cos(0)<br/>print "cos(math.pi) : ",  math.cos(math.pi)<br/>print "cos(2*math.pi) : ",  math.cos(2*math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>cos(3) :  -0.9899924966<br/>cos(-3) :  -0.9899924966<br/>cos(0) :  1.0<br/>cos(math.pi) :  -1.0<br/>cos(2*math.pi) :  1.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonencode()方法	Python encode() 方法以 encoding 指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。	<div class="article-body"><div class="article-intro" id="content"><h1>Python encode()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python encode() 方法以 <em>encoding</em> 指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。</p><h2>语法</h2><p>encode()方法语法：</p><pre><br/>str.encode(encoding='UTF-8',errors='strict')<br/></pre><h2>参数</h2><ul><li>encoding -- 要使用的编码，如"UTF-8"。</li><li>errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。</li></ul><h2>返回值</h2><p>该方法返回编码后的字符串。</p><h2>实例</h2><p>以下实例展示了encode()方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/><br/>print "Encoded String: " + str.encode('base64','strict')<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Encoded String: dGhpcyBpcyBzdHJpbmcgZXhhbXBsZS4uLi53b3chISE=<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonrange()函数用法	range(start, stop[, step])	<div class="article-body"><div class="article-intro" id="content"><h1>Python range() 函数用法</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python range() 函数可创建一个整数列表，一般用在 for 循环中。</p><h3>函数语法</h3><pre><br/>range(start, stop[, step])<br/></pre><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>end: 计数到 end 结束，但不包括 end。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h3>实例</h3><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 从 0 开始到 10</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">11</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 从 1 开始到 11</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">30</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 步长为 5</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-code">, </span><span class="hl-number">15</span><span class="hl-code">, </span><span class="hl-number">20</span><span class="hl-code">, </span><span class="hl-number">25</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 步长为 3</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, -</span><span class="hl-number">10</span><span class="hl-code">, -</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 负数</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, -</span><span class="hl-number">1</span><span class="hl-code">, -</span><span class="hl-number">2</span><span class="hl-code">, -</span><span class="hl-number">3</span><span class="hl-code">, -</span><span class="hl-number">4</span><span class="hl-code">, -</span><span class="hl-number">5</span><span class="hl-code">, -</span><span class="hl-number">6</span><span class="hl-code">, -</span><span class="hl-number">7</span><span class="hl-code">, -</span><span class="hl-number">8</span><span class="hl-code">, -</span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">]</span></div></div></div><p>以下是 range 在 for 中的使用，循环出runoob 的每个字母:</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-builtin">len</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> :...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">... </span><span class="hl-identifier">r</span><span class="hl-code"></span><span class="hl-identifier">u</span><span class="hl-code"></span><span class="hl-identifier">n</span><span class="hl-code"></span><span class="hl-identifier">o</span><span class="hl-code"></span><span class="hl-identifier">o</span><span class="hl-code"></span><span class="hl-identifier">b</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.walk()方法	os.walk() 方法用于通过在目录树种游走输出在目录中的文件名，向上或者向下。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.walk() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.walk() 方法用于通过在目录树种游走输出在目录中的文件名，向上或者向下。</p><p>在Unix，Windows中有效。</p><h3>语法</h3><p><b>walk()</b>方法语法格式如下：</p><pre><br/>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])<br/></pre><h3>参数</h3><ul><li><p><b>top</b> -- 根目录下的每一个文件夹(包含它自己), 产生3-元组 (dirpath, dirnames, filenames)【文件夹路径, 文件夹名字, 文件名】。</p></li></ul></div></div>
Pythonos.tempnam()方法	os.tempnam() 方法用于返回唯一的路径名用于创建临时文件。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.tempnam() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tempnam() 方法用于返回唯一的路径名用于创建临时文件。</p><h3>语法</h3><p><b>tempnam()</b>方法语法格式如下：</p><pre><br/>os.tempnam(dir, prefix)<br/></pre><h3>参数</h3><ul><li><p><b>dir</b> -- 要创建的临时文件路径。</p></li><li><p><b>prefix</b> -- 临时文件前缀</p></li></ul><h3>返回值</h3><p>该方法返回唯一路径。</p><h3>实例</h3><p>以下实例演示了 tempnam() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 前缀为 runoob 的文件<br/>tmpfn = os.tempnam('/tmp/runoob,'runoob')<br/><br/>print "这是一个唯一路径:"<br/>print tmpfn<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>这是一个唯一路径:<br/>/tmp/runoob/runoobIbAco8<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonpartition()方法	partition() 方法用来根据指定的分隔符将字符串进行分割。
	<div class="article-body"><div class="article-intro" id="content"><h1>Python partition() 方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>partition() 方法用来根据指定的分隔符将字符串进行分割。</p><p>如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。</p><p>partition() 方法是在2.5版中新增的。</p><h2>语法</h2><p>partition()方法语法：</p><pre><br/>str.partition(str)<br/></pre><h3>参数</h3><p>str : 指定的分隔符。</p></div></div>
Pythonos.makedev()方法	os.makedev() 方法用于以major和minor设备号组成一个原始设备号。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.makedev() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.makedev() 方法用于以major和minor设备号组成一个原始设备号。</p><h3>语法</h3><p><b>makedev()</b>方法语法格式如下：</p><pre><br/>os.makedev(major, minor)<br/></pre><h3>参数</h3><ul><li><p><b>major</b> --  Major 设备号。</p></li><li><p><b>minor</b> --  inor 设备号。</p></li></ul><h3>返回值</h3><p>返回设备号。</p><h3>实例</h3><p>以下实例演示了 makedev() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/>path = "/var/www/html/foo.txt"<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/># 获取 major 和 minor 设备号<br/>major_dnum = os.major(info.st_dev)<br/>minor_dnum = os.minor(info.st_dev)<br/><br/>print "Major 设备号 :", major_dnum<br/>print "Minor 设备号 :", minor_dnum<br/><br/># 生成设备号<br/>dev_num = os.makedev(major_dnum, minor_dnum)<br/>print "设备号 :", dev_num<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Major 设备号 : 0<br/>Minor 设备号 : 103<br/>设备号 : 103<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonlstrip()方法	Python lstrip() 方法用于截掉字符串左边的空格或指定字符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python lstrip()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python lstrip() 方法用于截掉字符串左边的空格或指定字符。</p><h2>语法</h2><p>lstrip()方法语法：</p><pre><br/>str.lstrip([chars])<br/></pre><h2>参数</h2><ul><li>chars --指定截取的字符。</li></ul><h2>返回值</h2><p>返回截掉字符串左边的空格或指定字符后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了lstrip()的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "     this is string example....wow!!!     ";<br/>print str.lstrip();<br/>str = "88888888this is string example....wow!!!8888888";<br/>print str.lstrip('8');<br/></pre><p>以上实例输出结果如下：</p><pre><br/>this is string example....wow!!!<br/>this is string example....wow!!!8888888<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonos.fsync()方法	os.fsync() 方法强制将文件描述符为fd的文件写入硬盘。在Unix, 将调用fsync()函数;在Windows, 调用 _commit()函数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fsync() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fsync() 方法强制将文件描述符为fd的文件写入硬盘。在Unix, 将调用fsync()函数;在Windows, 调用 _commit()函数。</p><p>如果你准备操作一个Python文件对象f, 首先f.flush(),然后os.fsync(f.fileno()), 确保与f相关的所有内存都写入了硬盘.在unix，Windows中有效。</p><p>Unix、Windows上可用。</p><h3>语法</h3><p><b>fsync()</b>方法语法格式如下：</p><pre><br/>os.fsync(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fsync() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 使用 fsync() 方法.<br/>os.fsync(fd)<br/><br/># 读取内容<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print "读取的字符串为 : ", str<br/><br/># 关闭文件<br/>os.close( fd)<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符串为 :  This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonord()函数	ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> ord() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</p><h3>语法</h3><p>以下是 ord() 方法的语法:</p><pre><br/>ord(c)<br/></pre><h3>参数</h3><ul><li>c -- 字符。</li></ul><h3>返回值</h3><p>返回值是对应的十进制整数。</p><hr/><h2>实例</h2><p>以下展示了使用 ord() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">ord</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">97</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">ord</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">98</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">ord</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">99</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythontimesleep()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time sleep()方法</h1><hr/><h2>描述</h2><p>Python time sleep() 函数推迟调用线程的运行，可通过参数secs指秒数，表示进程挂起的时间。</p><h2>语法</h2><p>sleep()方法语法：</p><pre><br/>time.sleep(t)<br/></pre><h2>参数</h2><ul><li>t -- 推迟执行的秒数。</li></ul><h2>返回值</h2><p>该函数没有返回值。</p><h2>实例</h2><p>以下实例展示了 sleep() 函数的使用方法：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">time</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Start : %s</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">ctime</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">sleep</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-number">5</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">End : %s</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">ctime</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>Start : Tue Feb 17 10:19:18 2013<br/>End : Tue Feb 17 10:19:23 2013<br/></pre></div></div>
Python3count()方法	count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 count()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。</p><h2>语法</h2><p>count()方法语法：</p><pre><br/>str.count(sub, start= 0,end=len(string))<br/></pre><h2>参数</h2><ul><li>sub -- 搜索的子字符串</li><li>start -- 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li><li>end -- 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li></ul><h2>返回值</h2><p>该方法返回子字符串在字符串中出现的次数。</p><h2>实例</h2><p>以下实例展示了count()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>str="www.runoob.com"<br/>sub='o'<br/>print ("str.count('o') : ", str.count(sub))<br/><br/>sub='run'<br/>print ("str.count('run', 0, 10) : ", str.count(sub,0,10))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>str.count('o') :  3<br/>str.count('run', 0, 10) :  1<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonisnumeric()方法	Python isnumeric() 方法检测字符串是否只由数字组成。这种方法是只针对unicode对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isnumeric()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isnumeric() 方法检测字符串是否只由数字组成。这种方法是只针对unicode对象。</p><p><strong>注：</strong>定义一个字符串为Unicode，只需要在字符串前添加 'u' 前缀即可，具体可以查看本章节例子。</p><h2>语法</h2><p>isnumeric()方法语法：</p><pre><br/>str.isnumeric()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Pythonhasattr()函数	hasattr() 函数用于判断对象是否包含对应的属性。	<div class="article-body"><div class="article-intro" id="content"><h1>Python hasattr() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>hasattr()</b> 函数用于判断对象是否包含对应的属性。</p><h2>语法</h2><p>hasattr 语法：</p><pre><br/>hasattr(object, name)<br/></pre><h2>参数</h2><ul><li>object -- 对象。</li><li>name -- 字符串，属性名。</li></ul><h2>返回值</h2><p>如果对象有该属性返回 True，否则返回 False。</p><h2>实例</h2><p>以下实例展示了 hasattr 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Coordinate</span><span class="hl-code">:    </span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code"></span><span class="hl-identifier">y</span><span class="hl-code"> = -</span><span class="hl-number">5</span><span class="hl-code"></span><span class="hl-identifier">z</span><span class="hl-code"> = </span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-identifier">point1</span><span class="hl-code"> = </span><span class="hl-identifier">Coordinate</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">hasattr</span><span class="hl-brackets">(</span><span class="hl-identifier">point1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">x</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">hasattr</span><span class="hl-brackets">(</span><span class="hl-identifier">point1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">y</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">hasattr</span><span class="hl-brackets">(</span><span class="hl-identifier">point1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">z</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">hasattr</span><span class="hl-brackets">(</span><span class="hl-identifier">point1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">no</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 没有该属性</span></div></div></div><p>输出结果：</p><pre><br/>True<br/>True<br/>True<br/>False<br/></pre><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3Listcount()方法	count() 方法用于统计某个元素在列表中出现的次数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List count()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>count() 方法用于统计某个元素在列表中出现的次数。</p><h2>语法</h2><p>count()方法语法：</p><pre><br/>list.count(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 列表中统计的对象。</li></ul><h2>返回值</h2><p>返回元素在列表中出现的次数。</p><h2>实例</h2><p>以下实例展示了 count()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>aList = [123, 'Google', 'Runoob', 'Taobao', 123];<br/><br/>print ("123 元素个数 : ", aList.count(123))<br/>print ("Runoob 元素个数 : ", aList.count('Runoob'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>123 元素个数 :  2<br/>Runoob 元素个数 :  1<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3ascii()函数	ascii() 函数类似 repr() 函数, 返回一个表示对象的字符串, 但是对于字符串中的非 ASCII 字符则返回通过 repr()  函数使用 \x, \u 或 \U 编码的字符。 生成字符串类似 Python2 版本中 repr() 函数的返回值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> ascii() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p>ascii() 函数类似 repr() 函数, 返回一个表示对象的字符串, 但是对于字符串中的非 ASCII 字符则返回通过 repr()  函数使用 \x, \u 或 \U 编码的字符。 生成字符串类似 Python2 版本中 repr() 函数的返回值。</p><hr/><h2>语法</h2><p>以下是 ascii() 方法的语法:</p><pre><br/>ascii(object)<br/></pre><hr/><h2>参数</h2><ul><li>object -- 对象。</li></ul><hr/><h2>返回值</h2><p>返回字符串。</p><hr/><h2>实例</h2><p>以下展示了使用 ascii() 方法的实例：</p><pre><br/>&gt;&gt;&gt; ascii('runoob')<br/>"'runoob'"<br/></pre><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p></div></div>
Python字典(Dictionary)has_key()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) has_key()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) has_key() 函数用于判断键是否存在于字典中，如果键在字典dict里返回true，否则返回false。</p><h2>语法</h2><p>has_key()方法语法：</p><pre><br/>dict.has_key(key)<br/></pre><h2>参数</h2><ul><li>key -- 要在字典中查找的键。</li></ul><h2>返回值</h2><p>如果键在字典里返回true，否则返回false。</p><h2>实例</h2><p>以下实例展示了 has_key()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7}<br/><br/>print "Value : %s" %  dict.has_key('Age')<br/>print "Value : %s" %  dict.has_key('Sex')<br/></pre><p>以上实例输出结果为：</p><pre><br/>Value : True<br/>Value : False<br/></pre></div></div>
Pythonos.access()方法	os.access() 方法使用当前的uid/gid尝试访问路径。大部分操作使用有效的 uid/gid, 因此运行环境可以在 suid/sgid 环境尝试。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.access() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.access() 方法使用当前的uid/gid尝试访问路径。大部分操作使用有效的 uid/gid, 因此运行环境可以在 suid/sgid 环境尝试。</p><h3>语法</h3><p><b>access()</b>方法语法格式如下：</p><pre><br/>os.access(path, mode);<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要用来检测是否有访问权限的路径。 </p></li><li><p><b>mode</b> -- mode为F_OK，测试存在的路径，或者它可以是包含R_OK, W_OK和X_OK或者R_OK, W_OK和X_OK其中之一或者更多。</p><ul class="list"><li><b>os.F_OK:</b> 作为access()的mode参数，测试path是否存在。</li><li><b>os.R_OK:</b> 包含在access()的mode参数中 ， 测试path是否可读。 </li><li><b>os.W_OK</b> 包含在access()的mode参数中 ， 测试path是否可写。</li><li><b>os.X_OK</b> 包含在access()的mode参数中 ，测试path是否可执行。</li></ul></li></ul><h3>返回值</h3><p>如果允许访问返回 True , 否则返回False。</p><h3>实例</h3><p>以下实例演示了 access() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 假定 /tmp/foo.txt 文件存在，并有读写权限<br/><br/>ret = os.access("/tmp/foo.txt", os.F_OK)<br/>print "F_OK - 返回值 %s"% ret<br/><br/>ret = os.access("/tmp/foo.txt", os.R_OK)<br/>print "R_OK - 返回值 %s"% ret<br/><br/>ret = os.access("/tmp/foo.txt", os.W_OK)<br/>print "W_OK - 返回值 %s"% ret<br/><br/>ret = os.access("/tmp/foo.txt", os.X_OK)<br/>print "X_OK - 返回值 %s"% ret<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>F_OK - 返回值 True<br/>R_OK - 返回值 True<br/>W_OK - 返回值 True<br/>X_OK - 返回值 False<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonmin()方法	Python min() 方法返回字符串中最小的字母。	<div class="article-body"><div class="article-intro" id="content"><h1>Python min()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python min() 方法返回字符串中最小的字母。</p><h2>语法</h2><p>min()方法语法：</p><pre><br/>min(str)<br/></pre><h2>参数</h2><ul><li>str -- 字符串。</li></ul><h2>返回值</h2><p>返回字符串中最小的字母。</p><h2>实例</h2><p>以下实例展示了min()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this-is-real-string-example....wow!!!";<br/>print "Min character: " + min(str);<br/><br/>str = "this-is-a-string-example....wow!!!";<br/>print "Min character: " + min(str);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Min character: !<br/>Min character: !<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3Filewrite()方法	write() 方法用于向文件中写入指定字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File write() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>write()</b> 方法用于向文件中写入指定字符串。</p><p>在文件关闭前或缓冲区刷新前，字符串内容存储在缓冲区中，这时你在文件中是看不到写入的内容的。</p><h3>语法</h3><p>write() 方法语法如下：</p><pre><br/>fileObject.write( [ str ])<br/></pre><h3>参数</h3><ul><li><p><b>str</b> -- 要写入文件的字符串。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>文件 runoob.txt 的内容如下：</p><pre><br/>1:www.runoob.com<br/>2:www.runoob.com<br/>3:www.runoob.com<br/>4:www.runoob.com<br/>5:www.runoob.com<br/></pre><p>以下实例演示了 write() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/># 打开文件<br/>fo = open("runoob.txt", "r+")<br/>print ("文件名: ", fo.name)<br/><br/>str = "6:www.runoob.com"<br/># 在文件末尾写入一行<br/>fo.seek(0, 2)<br/>line = fo.write( str )<br/><br/># 读取文件所有内容<br/>fo.seek(0,0)<br/>for index in range(6):<br/>    line = next(fo)<br/>    print ("文件行号 %d - %s" % (index, line))<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件行号 0 - 1:www.runoob.com<br/><br/>文件行号 1 - 2:www.runoob.com<br/><br/>文件行号 2 - 3:www.runoob.com<br/><br/>文件行号 3 - 4:www.runoob.com<br/><br/>文件行号 4 - 5:www.runoob.com<br/><br/>文件行号 5 - 6:www.runoob.com<br/></pre><p>查看文件内容：</p><pre><br/>$ cat runoob.txt <br/>1:www.runoob.com<br/>2:www.runoob.com<br/>3:www.runoob.com<br/>4:www.runoob.com<br/>5:www.runoob.com<br/>6:www.runoob.com<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p></div></div>
Python3字典clear()方法	Python 字典 clear() 函数用于删除字典内所有元素。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 clear()方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 clear() 函数用于删除字典内所有元素。</p><h2>语法</h2><p>clear()方法语法：</p><pre><br/>dict.clear()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 clear()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>dict = {'Name': 'Zara', 'Age': 7}<br/><br/>print ("字典长度 : %d" %  len(dict))<br/>dict.clear()<br/>print ("字典删除后长度 : %d" %  len(dict))<br/></pre><p>以上实例输出结果为：</p><pre><br/>字典长度 : 2<br/>字典删除后长度 : 0<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
PythonWhile循环语句	当判断条件假false时，循环结束。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1">While 循环语句</span></h1><p>Python 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：</p><pre><br/>while 判断条件：<br/>    执行语句……<br/></pre><p>执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true。</p><p>当判断条件假false时，循环结束。</p><p>执行流程图如下：</p><img alt="python_while_loop" class="alignnone size-full wp-image-4020" height="404" sizes="(max-width: 263px) 100vw, 263px" src="_python_while_loop.jpg" srcset="http://www.runoob.com/wp-content/uploads/2013/11/python_while_loop.jpg 263w, http://www.runoob.com/wp-content/uploads/2013/11/python_while_loop-195x300.jpg 195w" width="263"/><h3>Gif 演示 Python while 语句执行过程</h3><img src="http://www.runoob.com/wp-content/uploads/2013/11/loop-over-python-list-animation.gif"/></div></div>
Pythonacos()函数	 acos() 返回x的反余弦弧度值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> acos() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>acos()</b> 返回x的反余弦弧度值。</p><hr/><h2>语法</h2><p>以下是 acos() 方法的语法:</p><pre><br/>import math<br/><br/>math.acos(x)<br/></pre><p><strong>注意：</strong>acos()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- -1到1之间的数值。如果x是大于1，会产生一个错误。</li></ul><hr/><h2>返回值</h2><p>返回x的反余弦弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 acos() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "acos(0.64) : ",  math.acos(0.64)<br/>print "acos(0) : ",  math.acos(0)<br/>print "acos(-1) : ",  math.acos(-1)<br/>print "acos(1) : ",  math.acos(1)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>acos(0.64) :  0.876298061168<br/>acos(0) :  1.57079632679<br/>acos(-1) :  3.14159265359<br/>acos(1) :  0.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3os.fchown()方法	os.fchown() 方法用于修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fchown() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fchown() 方法用于修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</p><p> Unix上可用。</p><h3>语法</h3><p><b>fchown()</b>方法语法格式如下：</p><pre><br/>os.fchown(fd, uid, gid)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li><li><p><b>uid</b> -- 文件所有者的用户id</p><li><p><b>gid</b> -- 文件所有者的用户组id</p></li></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fchown() 方法的使用：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">os</span><span class="hl-code">, </span><span class="hl-identifier">sys</span><span class="hl-code">, </span><span class="hl-identifier">stat</span><span class="hl-code"></span><span class="hl-comment"># 打开文件 "/tmp/foo.txt"</span><span class="hl-code"></span><span class="hl-identifier">fd</span><span class="hl-code"> = </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-builtin">open</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">/tmp</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">O_RDONLY</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 设置文件的用户 id 为 100</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">fchown</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">fd</span><span class="hl-code">, </span><span class="hl-number">100</span><span class="hl-code">, -</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 设置文件的用户组 id 为 50</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">fchown</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">fd</span><span class="hl-code">, -</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">50</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">修改权限成功!!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 关闭文件</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">close</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">fd</span><span class="hl-code"> </span><span class="hl-brackets">)</span></div></div></div><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3Fileread()方法	read() 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File read() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>read()</b> 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。</p></div></div>
Pythonos.remove()方法	os.remove() 方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.remove() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.remove() 方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。</p><p>在Unix, Windows中有效</p><h3>语法</h3><p><b>remove()</b>方法语法格式如下：</p><pre><br/>os.remove(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要移除的文件路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 remove() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 列出目录<br/>print "目录为: %s" %os.listdir(os.getcwd())<br/><br/># 移除<br/>os.remove("aa.txt")<br/><br/># 移除后列出目录<br/>print "移除后 : %s" %os.listdir(os.getcwd())<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[ 'a1.txt','aa.txt','resume.doc' ]<br/>移除后 : <br/>[ 'a1.txt','resume.doc' ]<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonfabs()函数	fabs() 方法返回数字的绝对值，如math.fabs(-10) 返回10.0。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> fabs() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>fabs() 方法返回数字的绝对值，如math.fabs(-10) 返回10.0。</p><hr/><h2>语法</h2><p>以下是 fabs() 方法的语法:</p><pre><br/>import math<br/><br/>math.fabs( x )<br/></pre><p><strong>注意：</strong>fabs()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回数字的绝对值。<hr/><h2>实例</h2><p>以下展示了使用 fabs() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import math   # 导入数学模块<br/><br/>print "math.fabs(-45.17) : ", math.fabs(-45.17)<br/>print "math.fabs(100.12) : ", math.fabs(100.12)<br/>print "math.fabs(100.72) : ", math.fabs(100.72)<br/>print "math.fabs(119L) : ", math.fabs(119L)<br/>print "math.fabs(math.pi) : ", math.fabs(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.fabs(-45.17) :  45.17<br/>math.fabs(100.12) :  100.12<br/>math.fabs(100.72) :  100.72<br/>math.fabs(119L) :  119.0<br/>math.fabs(math.pi) :  3.14159265359<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonos.dup2()方法	os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.dup2() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2。</p><p> Unix, Windows 上可用。</p><h3>语法</h3><p><b>dup2()</b>方法语法格式如下：</p><pre><br/>os.dup2(fd, fd2);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 要被复制的文件描述符</p></li><li><p><b>fd2</b> -- 复制的文件描述符</p></li></ul><h3>返回值</h3><p>没有返回值。</p><h3>实例</h3><p>以下实例演示了 dup2() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 文件描述符为 1000<br/>fd2 = 1000<br/>os.dup2(fd, fd2);<br/><br/># 在新的文件描述符上插入数据<br/>os.lseek(fd2, 0, 0)<br/>str = os.read(fd2, 100)<br/>print "读取的字符串是 : ", str<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符串是 :  This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonindex()方法	Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。	<div class="article-body"><div class="article-intro" id="content"><h1>Python index()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。</p><h2>语法</h2><p>index()方法语法：</p><pre><br/>str.index(str, beg=0, end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 指定检索的字符串</li><li>beg -- 开始索引，默认为0。</li><li>end -- 结束索引，默认为字符串的长度。</li></ul></div></div>
Python3字典items()方法	Python 字典 items() 方法以列表返回可遍历的(键, 值) 元组数组。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 items() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 items() 方法以列表返回可遍历的(键, 值) 元组数组。</p><h2>语法</h2><p>items()方法语法：</p><pre><br/>dict.items()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回可遍历的(键, 值) 元组数组。</p><h2>实例</h2><p>以下实例展示了 items() 方法的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>dict = {'Name': 'Runoob', 'Age': 7}<br/><br/>print ("Value : %s" %  dict.items())<br/></pre><p>以上实例输出结果为：</p><pre><br/>Value : dict_items([('Age', 7), ('Name', 'Runoob')])<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
PythonListlen()方法	len() 方法返回列表元素个数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List len()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>len() 方法返回列表元素个数。</p><h2>语法</h2><p>len()方法语法：</p><pre><br/>len(list)<br/></pre><h2>参数</h2><ul><li>list -- 要计算元素个数的列表。</li></ul><h2>返回值</h2><p>返回列表元素个数。</p><h2>实例</h2><p>以下实例展示了 len()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>list1, list2 = [123, 'xyz', 'zara'], [456, 'abc']<br/><br/>print "First list length : ", len(list1);<br/>print "Second list length : ", len(list2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>First list length :  3<br/>Second lsit length :  2<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3os.lseek()方法	os.lseek() 方法用于设置文件描述符 fd 当前位置为 pos, how 方式修改。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.lseek() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lseek() 方法用于设置文件描述符 fd 当前位置为 pos, how 方式修改。</p><p>在Unix，Windows中有效。</p><h3>语法</h3><p><b>lseek()</b>方法语法格式如下：</p><pre><br/>os.lseek(fd, pos, how)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> --  文件描述符。</p></li><li><p><b>pos</b> --  这是相对于给定的参数 how 在文件中的位置。。</p></li><li><p><b>how</b> --  文件内参考位置。SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lseek() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 所有 fsync() 方法<br/>os.fsync(fd)<br/><br/># 从开始位置读取字符串<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print ("Read String is : ", str)<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3radians()函数	 radians() 方法将角度转换为弧度。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> radians() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>radians()</b> 方法将角度转换为弧度。</p><hr/><h2>语法</h2><p>以下是 radians() 方法的语法:</p><pre><br/>import math<br/><br/>math.radians(x)<br/></pre><p><strong>注意：</strong>radians()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回一个角度的弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 radians() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("radians(3) : ",  math.radians(3))<br/>print ("radians(-3) : ",  math.radians(-3))<br/>print ("radians(0) : ",  math.radians(0))<br/>print ("radians(math.pi) : ",  math.radians(math.pi))<br/>print ("radians(math.pi/2) : ",  math.radians(math.pi/2))<br/>print ("radians(math.pi/4) : ",  math.radians(math.pi/4))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>radians(3) :  0.05235987755982989<br/>radians(-3) :  -0.05235987755982989<br/>radians(0) :  0.0<br/>radians(math.pi) :  0.05483113556160755<br/>radians(math.pi/2) :  0.027415567780803774<br/>radians(math.pi/4) :  0.013707783890401887<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonfrozenset()函数	frozenset() 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。	<div class="article-body"><div class="article-intro" id="content"><h1>Python frozenset() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>frozenset()</b> 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p><h2>语法</h2><p>frozenset() 函数语法：</p><pre><br/>class frozenset([iterable])<br/></pre><h2>参数</h2><ul><li>iterable -- 可迭代的对象，比如列表、字典、元组等等。</li></ul><h2>返回值</h2><p>返回新的 frozenset 对象，如果不提供任何参数，默认会生成空集合。。</p><h2>实例</h2><p>以下实例展示了 frozenset() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-identifier">frozenset</span><span class="hl-brackets">(</span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 生成一个新的不可变集合</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"></span><span class="hl-identifier">frozenset</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"> = </span><span class="hl-identifier">frozenset</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"></span><span class="hl-identifier">frozenset</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">r</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">u</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">n</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 创建不可变集合</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.open()方法	os.open() 方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.open() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.open() 方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。</p><h3>语法</h3><p><b>open()</b>方法语法格式如下：</p><pre><br/>os.open(file, flags[, mode]);<br/></pre><h3>参数</h3><ul><li><p><b>file</b> --  要打开的文件</p></li><li><p><b>flags</b> --  该参数可以是以下选项，多个使用 "|" 隔开：</p><ul><li><b>os.O_RDONLY:</b> 以只读的方式打开 </li><li><b>os.O_WRONLY:</b> 以只写的方式打开 </li><li><b>os.O_RDWR :</b> 以读写的方式打开</li><li><b>os.O_NONBLOCK:</b> 打开时不阻塞</li><li><b>os.O_APPEND:</b> 以追加的方式打开</li><li><b>os.O_CREAT:</b> 创建并打开一个新文件</li><li><b>os.O_TRUNC:</b> 打开一个文件并截断它的长度为零（必须有写权限）</li><li><b>os.O_EXCL:</b> 如果指定的文件存在，返回错误</li><li><b>os.O_SHLOCK:</b> 自动获取共享锁</li><li><b>os.O_EXLOCK:</b> 自动获取独立锁</li><li><b>os.O_DIRECT:</b> 消除或减少缓存效果</li><li><b>os.O_FSYNC :</b> 同步写入</li><li><b>os.O_NOFOLLOW:</b> 不追踪软链接</li></ul></li><li><p><b>mode</b> --  类似 <a href="os-chmod.html">chmod()</a>。</p></li></ul><h3>返回值</h3><p>返回新打开文件的描述符。</p><h3>实例</h3><p>以下实例演示了 open() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.fstatvfs()方法	os.fstatvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息，类似 statvfs()。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fstatvfs() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fstatvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息，类似 statvfs()。</p><p>Unix上可用。</p><p>fstatvfs 方法返回的结构:</p><ul><li><p><b>f_bsize:</b> 文件系统块大小 </p></li><li><p><b>f_frsize:</b> 分栈大小 </p></li><li><p><b>f_blocks:</b> 文件系统数据块总数</p></li><li><p><b>f_bfree:</b> 可用块数</p></li><li><p><b>f_bavail:</b>非超级用户可获取的块数</p></li><li><p><b>f_files:</b> 文件结点总数 </p></li><li><p><b>f_ffree:</b> 可用文件结点数 </p></li><li><p><b>f_favail:</b> 非超级用户的可用文件结点数 </p></li><li><p><b>f_fsid:</b> 文件系统标识 ID</p></li><li><p><b>f_flag:</b> 挂载标记</p></li><li><p><b>f_namemax:</b> 最大文件长度 </p></li></ul><h3>语法</h3><p><b>fstatvfs()</b>方法语法格式如下：</p><pre><br/>os.fstatvfs(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li></ul><h3>返回值</h3><p>返回包含文件描述符fd的文件的文件系统的信息。</p><h3>实例</h3><p>以下实例演示了 fstatvfs() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 获取元组<br/>info = os.fstatvfs(fd)<br/><br/>print ("文件信息 :", info)<br/><br/># 获取文件名最大长度<br/>print ("文件名最大长度 :%d" % info.f_namemax)<br/><br/># 获取可用块数<br/>print ("可用块数 :%d" % info.f_bfree)<br/><br/># 关闭文件<br/>os.close( fd)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>文件信息 : (4096, 4096, 2621440L, 1113266L, 1113266L, <br/>             8929602L, 8764252L, 8764252L, 0, 255)<br/>文件名最大长度 :255<br/>可用块数 :1113266<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonreload()函数	reload() 用于重新载入之前载入的模块。	<div class="article-body"><div class="article-intro" id="content"><h1>Python reload() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>reload()</b> 用于重新载入之前载入的模块。</p><h2>语法</h2><p>reload() 函数语法：</p><pre><br/>reload(module)<br/></pre><h2>参数</h2><ul><li>module -- 模块对象。</li></ul><h2>返回值</h2><p>返回模块对象。</p><h2>实例</h2><p>以下实例展示了 reload() 的使用方法：</p><div class="example"><h2 class="example">重新载入 sys 模块，并设置默认编码为 utf8</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">sys</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">sys</span><span class="hl-code">.</span><span class="hl-identifier">getdefaultencoding</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 当前默认编码</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">ascii</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">reload</span><span class="hl-brackets">(</span><span class="hl-identifier">sys</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 使用 reload</span><span class="hl-code">&lt;</span><span class="hl-identifier">module</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">sys</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">built</span><span class="hl-code">-</span><span class="hl-reserved">in</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-identifier">sys</span><span class="hl-code">.</span><span class="hl-identifier">setdefaultencoding</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">utf8</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 设置编码</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">sys</span><span class="hl-code">.</span><span class="hl-identifier">getdefaultencoding</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">utf8</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonhash()函数	hash() 用于获取取一个对象（字符串或者数值等）的哈希值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python hash() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>hash()</b> 用于获取取一个对象（字符串或者数值等）的哈希值。</p><h2>语法</h2><p>hash 语法：</p><pre><br/>hash(object)<br/></pre><p>参数说明：</p><ul><li>object --  对象；</li></ul><h2>返回值</h2><p>返回对象的哈希值。</p><h2>实例</h2><p>以下实例展示了 hash 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">hash</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">test</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 字符串</span><span class="hl-code"></span><span class="hl-number">2314058222102390712</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">hash</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 数字</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">hash</span><span class="hl-brackets">(</span><span class="hl-builtin">str</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 集合</span><span class="hl-code"></span><span class="hl-number">1335416675971793195</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">hash</span><span class="hl-brackets">(</span><span class="hl-builtin">str</span><span class="hl-brackets">(</span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">1</span><span class="hl-quotes">'</span><span class="hl-code">:</span><span class="hl-number">1</span><span class="hl-code">}</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 字典</span><span class="hl-code"></span><span class="hl-number">7666464346782421378</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonfor循环语句	for iterating_var in sequence:   statements(s)	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1">for 循环语句</span></h1><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p><p><strong>语法：</strong></p><p>for循环的语法格式如下：</p><pre><br/>for iterating_var in sequence:<br/>   statements(s)<br/></pre><p><strong>流程图：</strong></p><img alt="python_for_loop" class="alignnone size-full wp-image-4022" height="351" sizes="(max-width: 388px) 100vw, 388px" src="_python_for_loop.jpg" srcset="http://www.runoob.com/wp-content/uploads/2013/11/python_for_loop.jpg 388w, http://www.runoob.com/wp-content/uploads/2013/11/python_for_loop-300x271.jpg 300w" width="388"/><p><strong>实例：</strong></p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">Python</span><span class="hl-quotes">'</span><span class="hl-code">:     </span><span class="hl-comment"># 第一个实例</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前字母 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">letter</span><span class="hl-code"></span><span class="hl-identifier">fruits</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">banana</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">apple</span><span class="hl-quotes">'</span><span class="hl-code">,  </span><span class="hl-quotes">'</span><span class="hl-string">mango</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">fruit</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-identifier">fruits</span><span class="hl-code">:        </span><span class="hl-comment"># 第二个实例</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前水果 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">fruit</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span></div></div><br/><a class="tryitbtn" href="https://www.runoob.com/try/runcode.php?filename=for_demo1&amp;type=python" target="_blank">尝试一下 »</a></div><p>以上实例输出结果:</p><pre><br/>当前字母 : P<br/>当前字母 : y<br/>当前字母 : t<br/>当前字母 : h<br/>当前字母 : o<br/>当前字母 : n<br/>当前水果 : banana<br/>当前水果 : apple<br/>当前水果 : mango<br/>Good bye!<br/></pre><br/><hr/><h2>通过序列索引迭代</h2><p>另外一种执行循环的遍历方式是通过索引，如下实例：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-identifier">fruits</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">banana</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">apple</span><span class="hl-quotes">'</span><span class="hl-code">,  </span><span class="hl-quotes">'</span><span class="hl-string">mango</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">index</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-builtin">len</span><span class="hl-brackets">(</span><span class="hl-identifier">fruits</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">:   </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前水果 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">fruits</span><span class="hl-brackets">[</span><span class="hl-identifier">index</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span></div></div></div><p>以上实例输出结果：</p><pre><br/>当前水果 : banana<br/>当前水果 : apple<br/>当前水果 : mango<br/>Good bye!<br/></pre><p>以上实例我们使用了内置函数 len() 和 range(),函数 len() 返回列表的长度，即元素的个数。range返回一个序列的数。</p><br/><hr/><h2>循环使用 else 语句</h2><p>在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">num</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-code">,</span><span class="hl-number">20</span><span class="hl-brackets">)</span><span class="hl-code">:  </span><span class="hl-comment"># 迭代 10 到 20 之间的数字</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-identifier">num</span><span class="hl-brackets">)</span><span class="hl-code">: </span><span class="hl-comment"># 根据因子迭代</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">num</span><span class="hl-code">%</span><span class="hl-identifier">i</span><span class="hl-code"> == </span><span class="hl-number">0</span><span class="hl-code">:      </span><span class="hl-comment"># 确定第一个因子</span><span class="hl-code"></span><span class="hl-identifier">j</span><span class="hl-code">=</span><span class="hl-identifier">num</span><span class="hl-code">/</span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-comment"># 计算第二个因子</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">%d 等于 %d * %d</span><span class="hl-quotes">'</span><span class="hl-code"> % </span><span class="hl-brackets">(</span><span class="hl-identifier">num</span><span class="hl-code">,</span><span class="hl-identifier">i</span><span class="hl-code">,</span><span class="hl-identifier">j</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">break</span><span class="hl-code"> </span><span class="hl-comment"># 跳出当前循环</span><span class="hl-code"></span><span class="hl-reserved">else</span><span class="hl-code">:                  </span><span class="hl-comment"># 循环的 else 部分</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-identifier">num</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">是一个质数</span><span class="hl-quotes">'</span></div></div><br/><a class="tryitbtn" href="https://www.runoob.com/try/runcode.php?filename=for_demo2&amp;type=python" target="_blank">尝试一下 »</a></div><p>以上实例输出结果：</p><pre><br/>10 等于 2 * 5<br/>11 是一个质数<br/>12 等于 2 * 6<br/>13 是一个质数<br/>14 等于 2 * 7<br/>15 等于 3 * 5<br/>16 等于 2 * 8<br/>17 是一个质数<br/>18 等于 2 * 9<br/>19 是一个质数<br/></pre><p>更多实例：<a href="https://www.runoob.com/w3cnote/prints-diamonds-triangles-rectangles.html" target="_blank">python 打印菱形、三角形、矩形</a></p></div></div>
PythonListsort()方法	sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List sort()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p><h2>语法</h2><p>sort()方法语法：</p><pre><br/>list.sort([func])<br/></pre><h2>参数</h2><ul><li>func -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li></ul><h2>返回值</h2><p>该方法没有返回值，但是会对列表的对象进行排序。</p><h2>实例</h2><p>以下实例展示了 sort()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc', 'xyz'];<br/><br/>aList.sort();<br/>print "List : ", aList;<br/></pre><p>以上实例输出结果如下：</p><pre><br/>List :  [123, 'abc', 'xyz', 'xyz', 'zara']<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3Filetruncate()方法	truncate() 方法用于从文件的首行首字符开始截断，截断文件为 size
 个字符，无 size 表示从当前位置截断；截断之后 V 后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。 。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File truncate() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>truncate()</b> 方法用于从文件的首行首字符开始截断，截断文件为 size 个字符，无 size 表示从当前位置截断；截断之后 V 后面的所有字符被删除，其中 Widnows 系统下的换行代表2个字符大小。 。</p><h3>语法</h3><p>truncate() 方法语法如下：</p><pre><br/>fileObject.truncate( [ size ])<br/></pre><h3>参数</h3><ul><li><p><b>size</b> -- 可选，如果存在则文件截断为 size 字节。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 truncate() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><pre><br/>1:www.runoob.com<br/>2:www.runoob.com<br/>3:www.runoob.com<br/>4:www.runoob.com<br/>5:www.runoob.com<br/></pre><p>循环读取文件的内容：</p><pre><br/>#!/usr/bin/python3<br/><br/>fo = open("runoob.txt", "r+")<br/>print ("文件名: ", fo.name)<br/><br/>line = fo.readline()<br/>print ("读取行: %s" % (line))<br/><br/>fo.truncate()<br/>line = fo.readlines()<br/>print ("读取行: %s" % (line))<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名:  runoob.txt<br/>读取行: 1:www.runoob.com<br/><br/>读取行: ['2:www.runoob.com\n', '3:www.runoob.com\n', '4:www.runoob.com\n', '5:www.runoob.com\n']<br/></pre><p>以下实例截取 runoob.txt 文件的10个字节：</p><pre><br/>#!/usr/bin/python3<br/><br/># 打开文件<br/>fo = open("runoob.txt", "r+")<br/>print ("文件名为: ", fo.name)<br/><br/># 截取10个字节<br/>fo.truncate(10)<br/><br/>str = fo.read()<br/>print ("读取数据: %s" % (str))<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/>读取数据: 1:www.runo<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p></div></div>
Python3round()函数	 round() 方法返回浮点数x的四舍五入值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> round() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>round()</b> 方法返回浮点数x的四舍五入值。</p><hr/><h2>语法</h2><p>以下是 round() 方法的语法:</p><pre><br/>round( x [, n]  )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>n -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回浮点数x的四舍五入值。<hr/><h2>实例</h2><p>以下展示了使用 round() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>print ("round(70.23456) : ", round(70.23456))<br/>print ("round(56.659,1) : ", round(56.659,1))<br/>print ("round(80.264, 2) : ", round(80.264, 2))<br/>print ("round(100.000056, 3) : ", round(100.000056, 3))<br/>print ("round(-100.000056, 3) : ", round(-100.000056, 3))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>round(70.23456) :  70<br/>round(56.659,1) :  56.7<br/>round(80.264, 2) :  80.26<br/>round(100.000056, 3) :  100.0<br/>round(-100.000056, 3) :  -100.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3seed()函数	 seed() 方法改变随机数生成器的种子，可以在调用其他随机模块函数之前调用此函数。。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> seed() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>seed()</b> 方法改变随机数生成器的种子，可以在调用其他随机模块函数之前调用此函数。。</p><hr/><h2>语法</h2><p>以下是 seed() 方法的语法:</p><pre><br/>import random<br/><br/>random.seed ( [x] )<br/></pre><p><strong>注意：</strong>seed()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li></ul><hr/><h2>返回值</h2><p>本函数没有返回值。</p><hr/><h2>实例</h2><p>以下展示了使用 seed(() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import random<br/><br/>random.seed()<br/>print ("使用默认种子生成随机数：", random.random())<br/><br/>random.seed(10)<br/>print ("使用整数种子生成随机数：", random.random())<br/><br/>random.seed("hello",2)<br/>print ("使用字符串种子生成随机数：", random.random())<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>使用默认种子生成随机数： 0.9186252047469824<br/>使用整数种子生成随机数： 0.5714025946899135<br/>使用字符串种子生成随机数： 0.3537754404730722<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3os.symlink()方法	os.symlink() 方法用于创建一个软链接。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.symlink() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.symlink() 方法用于创建一个软链接。</p><h3>语法</h3><p><b>symlink()</b>方法语法格式如下：</p><pre><br/>os.symlink(src, dst)<br/></pre><h3>参数</h3><ul><li><p><b>src</b> --  源地址。</p></li><li><p><b>dst</b> --  目标地址。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 symlink() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os<br/><br/>src = '/usr/bin/python'<br/>dst = '/tmp/python'<br/><br/># 创建软链接<br/>os.symlink(src, dst)<br/><br/>print ("软链接创建成功")<br/></pre><p>执行以上程序输出结果为：</p><pre>软链接创建成功<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3join()方法	Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 join()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><h2>语法</h2><p>join()方法语法：</p><pre><br/>str.join(sequence)<br/></pre><h2>参数</h2><ul><li>sequence -- 要连接的元素序列。</li></ul></div></div>
Python3os.pathconf()方法	os.pathconf() 方法用于返回一个打开的文件的系统配置信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.pathconf() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.pathconf() 方法用于返回一个打开的文件的系统配置信息。</p><p>Unix 平台下可用。</p><h3>语法</h3><p><b>fpathconf()</b>方法语法格式如下：</p><pre><br/>os.fpathconf(fd, name)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li><li><p><b>name</b> --  检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。一些平台也定义了一些额外的名字。这些名字在主操作系统上pathconf_names的字典中。对于不在pathconf_names中的配置变量，传递一个数字作为名字，也是可以接受的。</p></li></ul><h3>返回值</h3><p>返回文件的系统信息。</p><h3>实例</h3><p>以下实例演示了 fpathconf() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/>print ("%s" % os.pathconf_names)<br/><br/># 获取文件最大连接数<br/>no = os.fpathconf(fd, 'PC_LINK_MAX')<br/>print ("Maximum number of links to the file. :%d" % no)<br/><br/># 获取文件名最大长度<br/>no = os.fpathconf(fd, 'PC_NAME_MAX')<br/>print ("Maximum length of a filename :%d" % no)<br/><br/># 关闭文件<br/>os.close( fd)<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonreduce()函数	reduce() 函数会对参数序列中元素进行累积。	<div class="article-body"><div class="article-intro" id="content"><h1>Python reduce() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>reduce()</b> 函数会对参数序列中元素进行累积。</p><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给reduce中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><h2>语法</h2><p>reduce() 函数语法：</p><pre><br/>reduce(function, iterable[, initializer])<br/></pre><h2>参数</h2><ul><li>function -- 函数，有两个参数</li><li>iterable -- 可迭代对象</li><li>initializer -- 可选，初始参数</li></ul><h2>返回值</h2><p>返回函数计算结果。</p><h2>实例</h2><p>以下实例展示了 reduce() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">add</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-code">, </span><span class="hl-identifier">y</span><span class="hl-brackets">)</span><span class="hl-code"> :            </span><span class="hl-comment"># 两数相加</span><span class="hl-code">...     </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code"> + </span><span class="hl-identifier">y</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-builtin">reduce</span><span class="hl-brackets">(</span><span class="hl-identifier">add</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 计算列表和：1+2+3+4+5</span><span class="hl-code"></span><span class="hl-number">15</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">reduce</span><span class="hl-brackets">(</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">, </span><span class="hl-identifier">y</span><span class="hl-code">: </span><span class="hl-identifier">x</span><span class="hl-code">+</span><span class="hl-identifier">y</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 使用 lambda 匿名函数</span><span class="hl-code"></span><span class="hl-number">15</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonlong()函数	long() 函数将数字或字符串转换为一个长整型。	<div class="article-body"><div class="article-intro" id="content"><h1>Python long() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>long()</b> 函数将数字或字符串转换为一个长整型。</p><h2>语法</h2><p>long() 函数语法：</p><pre><br/>class long(x, base=10)<br/></pre><h2>参数</h2><ul><li>x -- 字符串或数字。</li><li>base -- 可选，进制数，默认十进制。</li></ul><h2>返回值</h2><p>返回长整型数。</p><h2>实例</h2><p>以下实例展示了 long() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">long</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">0L</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">long</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">1L</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">long</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">123</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">123L</span><span class="hl-code">&gt;&gt;&gt; &gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonistitle()方法	Python istitle() 方法检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python istitle()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python istitle() 方法检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。</p><h2>语法</h2><p>istitle()方法语法：</p><pre><br/>str.istitle()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3timeclock()方法	这个需要注意，在不同的系统上含义不同。在UNIX系统上，它返回的是"进程时间"，它是用秒表示的浮点数（时间戳）。而在WINDOWS中，第一次调用，返回的是进程运行的实际时间。而第二次之后的调用是自第一次调用以后到现在的运行时间。（实际上是以WIN32上QueryPerformanceCounter()为基础，它比毫秒表示更为精确）
	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 time clock()方法</h1><hr/><h2>描述</h2><p>Python time clock() 函数以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。</p><p>这个需要注意，在不同的系统上含义不同。在UNIX系统上，它返回的是"进程时间"，它是用秒表示的浮点数（时间戳）。而在WINDOWS中，第一次调用，返回的是进程运行的实际时间。而第二次之后的调用是自第一次调用以后到现在的运行时间。（实际上是以WIN32上QueryPerformanceCounter()为基础，它比毫秒表示更为精确）</p><h2>语法</h2><p>clock()方法语法：</p><pre><br/>time.clock()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数有两个功能，</p><p>  在第一次调用的时候，返回的是程序运行的实际时间；</p><p>  以第二次之后的调用，返回的是自第一次调用后,到这次调用的时间间隔</p><p>在win32系统下，这个函数返回的是真实时间（wall time），而在Unix/Linux下返回的是CPU时间。</p><h2>实例</h2><p>以下实例展示了 clock()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/>import time<br/><br/>def procedure():<br/>    time.sleep(2.5)<br/><br/># time.clock<br/>t0 = time.clock()<br/>procedure()<br/>print (time.clock() - t0)<br/><br/># time.time<br/>t0 = time.time()<br/>procedure()<br/>print (time.time() - t0)<br/></pre><p>以上实例输出结果为：</p><pre><br/>5.000000000000143e-05<br/>2.5020556449890137<br/></pre></div></div>
Python3os.tcgetpgrp()方法	os.tcgetpgrp() 方法用于回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.tcgetpgrp() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tcgetpgrp() 方法用于回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组。</p><h3>语法</h3><p><b>tcgetpgrp()</b>方法语法格式如下：</p><pre><br/>os.tcgetpgrp(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li></ul><h3>返回值</h3><p>该方法返回进程组。</p><h3>实例</h3><p>以下实例演示了 tcgetpgrp() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 显示当前目录<br/>print ("当前目录 :%s" %os.getcwd())<br/><br/># 修改目录到 /dev/tty<br/>fd = os.open("/dev/tty",os.O_RDONLY)<br/><br/>f = os.tcgetpgrp(fd)<br/><br/># 显示进程组<br/>print ("相关进程组: ")<br/>print (f)<br/><br/>os.close(fd)<br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre>当前目录 :/tmp<br/>相关进程组:<br/>2670<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3maketrans()方法	maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 maketrans()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</p>两个字符串的长度必须相同，为一一对应的关系。</div></div>
Python3tuple函数	tuple 函数将列表转换为元组。。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> tuple 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p>tuple 函数将列表转换为元组。。</p></div></div>
Pythonrindex()方法	Python rindex() 返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。	<div class="article-body"><div class="article-intro" id="content"><h1>Python rindex()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python rindex() 返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。</p><h2>语法</h2><p>rindex()方法语法：</p><pre><br/>str.rindex(str, beg=0 end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 查找的字符串</li><li>beg -- 开始查找的位置，默认为0</li><li>end -- 结束查找位置，默认为字符串的长度。</li></ul><h2>返回值</h2><p>返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常。</p><h2>实例</h2><p>以下实例展示了rindex()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str1 = "this is string example....wow!!!";<br/>str2 = "is";<br/><br/>print str1.rindex(str2);<br/>print str1.index(str2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>5<br/>2<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonos.ttyname()方法	os.ttyname() 方法用于返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.ttyname() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.ttyname() 方法用于返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</p><h3>语法</h3><p><b>ttyname()</b>方法语法格式如下：</p><pre><br/>os.ttyname(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>返回一个字符串，它表示与文件描述符fd 关联的终端设备。</p><h3>实例</h3><p>以下实例演示了 ttyname() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示当前目录<br/>print "当前目录 :%s" %os.getcwd()<br/><br/># 修改目录为 /dev/tty<br/>fd = os.open("/dev/tty",os.O_RDONLY)<br/><br/>p = os.ttyname(fd)<br/>print "关联的终端为: "<br/>print p<br/>print "done!!"<br/><br/>os.close(fd)<br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前目录 :/tmp<br/>关联的终端为:<br/>/dev/tty<br/>done!!<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.chdir()方法	os.chdir() 方法用于改变当前工作目录到指定的路径。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.chdir() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chdir() 方法用于改变当前工作目录到指定的路径。</p><h3>语法</h3><p><b>chdir()</b>方法语法格式如下：</p><pre><br/>os.chdir(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要切换到的新路径。 </p></li></ul><h3>返回值</h3><p>如果允许访问返回 True , 否则返回False。</p><h3>实例</h3><p>以下实例演示了 chdir() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/>path = "/tmp"<br/><br/># 查看当前工作目录<br/>retval = os.getcwd()<br/>print ("当前工作目录为 %s" % retval)<br/><br/># 修改当前工作目录<br/>os.chdir( path )<br/><br/># 查看修改后的工作目录<br/>retval = os.getcwd()<br/><br/>print ("目录修改成功 %s" % retval)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录为 /www<br/>目录修改成功 /tmp<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonmax()方法	Python max() 方法返回字符串中最大的字母。	<div class="article-body"><div class="article-intro" id="content"><h1>Python max()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python max() 方法返回字符串中最大的字母。</p><h2>语法</h2><p>max()方法语法：</p><pre><br/>max(str)<br/></pre><h2>参数</h2><ul><li>str -- 字符串。</li></ul><h2>返回值</h2><p>返回字符串中最大的字母。</p><h2>实例</h2><p>以下实例展示了max()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is really a string example....wow!!!";<br/>print "Max character: " + max(str);<br/><br/>str = "this is a string example....wow!!!";<br/>print "Max character: " + max(str);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Max character: y<br/>Max character: x<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonislower()方法	Python islower() 方法检测字符串是否由小写字母组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python islower()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python islower() 方法检测字符串是否由小写字母组成。</p><h2>语法</h2><p>islower()方法语法：</p><pre><br/>str.islower()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3os.fchmod()方法	os.fchmod() 方法用于改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fchmod() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fchmod() 方法用于改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</p><p> Unix上可用。</p><h3>语法</h3><p><b>fchmod()</b>方法语法格式如下：</p><pre><br/>os.fchmod(fd, mode);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li><li><p><b>mode</b> -- 可以是以下一个或多个组成，多个使用 "|" 隔开：</p><ul><li><p><b>stat.S_ISUID:</b>设置 UID 位</p></li><li><p><b>stat.S_ISGID:</b> 设置组 ID 位 </p></li><li><p><b>stat.S_ENFMT:</b> 系统文件锁定的执法行动</p></li><li><p><b>stat.S_ISVTX:</b>   在执行之后保存文字和图片</p></li><li><p><b>stat.S_IREAD:</b> 对于拥有者读的权限，Unix V7 版本中 stat.S_IRUSR 的代名词</p></li><li><p><b>stat.S_IWRITE:</b> 对于拥有者写的权限，Unix V7 版本中 stat.S_IWUSR 的代名词</p></li><li><p><b>stat.S_IEXEC:</b> 对于拥有者执行的权限，Unix V7 版本中 stat.S_IXUSR 的代名词</p></li><li><p><b>stat.S_IRWXU:</b>对于拥有者读、写、执行的权限</p></li><li><p><b>stat.S_IRUSR:</b> 对于拥有者读的权限</p></li><li><p><b>stat.S_IWUSR:</b> 对于拥有者写的权限</p></li><li><p><b>stat.S_IXUSR:</b> 对于拥有者执行的权限</p></li><li><p><b>stat.S_IRWXG:</b> 对于同组的人读写执行的权限 </p></li><li><p><b>stat.S_IRGRP:</b> 对于同组读的权限 </p></li><li><p><b>stat.S_IWGRP:</b>对于同组写的权限</p></li><li><p><b>stat.S_IXGRP:</b> 对于同组执行的权限</p></li><li><p><b>stat.S_IRWXO:</b> 对于其他组读写执行的权限</p></li><li><p><b>stat.S_IROTH:</b> 对于其他组读的权限</p></li><li><p><b>stat.S_IWOTH:</b>  对于其他组写的权限</p></li><li><p><b>stat.S_IXOTH:</b>对于其他组执行的权限</p></li></ul></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fchmod() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys, stat<br/><br/># 打开文件 "/tmp/foo.txt"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 设置文件可通过组执行<br/><br/>os.fchmod( fd, stat.S_IXGRP)<br/><br/># 设置文件可被其他用户写入<br/>os.fchmod(fd, stat.S_IWOTH)<br/><br/>print ("修改权限成功!!")<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.stat_float_times()方法	os.stat_float_times() 方法用于决定stat_result是否以float对象显示时间戳。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.stat_float_times() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.stat_float_times() 方法用于决定stat_result是否以float对象显示时间戳。</p><h3>语法</h3><p><b>stat_float_times()</b>方法语法格式如下：</p><pre><br/>os.stat_float_times([newvalue])<br/></pre><h3>参数</h3><ul><li><p><b>newvalue</b> --  如果为 True, 调用 stat() 返回 floats,如果 False, 调用 stat 返回 ints。如果没有该参数返回当前设置。</p></li></ul><h3>返回值</h3><p>返回 True 或 False。</p><h3>实例</h3><p>以下实例演示了 stat_float_times() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># Stat 信息<br/>statinfo = os.stat('a2.py')<br/><br/>print (statinfo)<br/>statinfo = os.stat_float_times()<br/>print (statinfo)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.stat_result(st_mode=33188, st_ino=3940649674337682L, st_dev=277923425L, <br/>st_nlink=1, st_uid=400, st_gid=401, st_size=335L, st_atime=1330498089, st_mtime=13<br/>30498089, st_ctime=1330498089)<br/>True<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.rmdir()方法	os.rmdir() 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.rmdir() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.rmdir() 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。</p><h3>语法</h3><p><b>rmdir()</b>方法语法格式如下：</p><pre><br/>os.rmdir(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要删除的目录路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 rmdir() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 列出目录<br/>print ("目录为: %s"%os.listdir(os.getcwd()))<br/><br/># 删除路径<br/>os.rmdir("mydir")<br/><br/># 列出重命名后的目录<br/>print ("目录为: %s" %os.listdir(os.getcwd()))<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py','mydir' ]<br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py' ]<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
PythonOS文件/目录方法	
http://kuanghy.github.io/python-os/

http://python.usyiyi.cn/python_278/library/os.html
	<div class="article-body"><div class="article-intro" id="content"><h1>Python OS 文件/目录方法</h1><p><b>os</b> 模块提供了非常丰富的方法用来处理文件和目录。常用的方法如下表所示：</p><table class="reference"><tbody><tr><th style="width:5%">序号</th><th>方法及描述</th></tr><tr><td>1</td><td><p><a href="https://www.runoob.com/python/os-access.html">os.access(path, mode)</a></p><br/>检验权限模式  </td></tr><tr><td>2</td><td><p><a href="https://www.runoob.com/python/os-chdir.html">os.chdir(path)</a></p><br/>改变当前工作目录</td></tr><tr><td>3</td><td><p><a href="https://www.runoob.com/python/os-chflags.html">os.chflags(path, flags)</a></p><br/>设置路径的标记为数字标记。</td></tr><tr><td>4</td><td><p><a href="https://www.runoob.com/python/os-chmod.html">os.chmod(path, mode)</a></p><br/>更改权限 </td></tr><tr><td>5</td><td><p><a href="https://www.runoob.com/python/os-chown.html">os.chown(path, uid, gid)</a></p><br/>更改文件所有者</td></tr><tr><td>6</td><td><p><a href="https://www.runoob.com/python/os-chroot.html">os.chroot(path)</a></p><br/>改变当前进程的根目录  </td></tr><tr><td>7</td><td><p><a href="https://www.runoob.com/python/os-close.html">os.close(fd)</a></p><br/>关闭文件描述符 fd</td></tr><tr><td>8</td><td><p><a href="https://www.runoob.com/python/os-closerange.html">os.closerange(fd_low, fd_high)</a></p><br/>关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略</td></tr><tr><td>9</td><td><p><a href="https://www.runoob.com/python/os-dup.html">os.dup(fd)</a></p><br/>复制文件描述符 fd</td></tr><tr><td>10</td><td><p><a href="https://www.runoob.com/python/os-dup2.html">os.dup2(fd, fd2)</a></p><br/>将一个文件描述符 fd 复制到另一个 fd2</td></tr><tr><td>11</td><td><p><a href="https://www.runoob.com/python/os-fchdir.html">os.fchdir(fd)</a></p><br/>通过文件描述符改变当前工作目录</td></tr><tr><td>12</td><td><p><a href="https://www.runoob.com/python/os-fchmod.html">os.fchmod(fd, mode)</a></p><br/>改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</td></tr><tr><td>13</td><td><p><a href="https://www.runoob.com/python/os-fchown.html">os.fchown(fd, uid, gid)</a></p><br/>修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。 </td></tr><tr><td>14</td><td><p><a href="https://www.runoob.com/python/os-fdatasync.html">os.fdatasync(fd)</a></p><br/>强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。</td></tr><tr><td>15</td><td><p><a href="https://www.runoob.com/python/os-fdopen.html">os.fdopen(fd[, mode[, bufsize]])</a></p><br/>通过文件描述符 fd 创建一个文件对象，并返回这个文件对象 </td></tr><tr><td>16</td><td><p><a href="https://www.runoob.com/python/os-fpathconf.html">os.fpathconf(fd, name)</a></p><br/>返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。</td></tr><tr><td>17</td><td><p><a href="https://www.runoob.com/python/os-fstat.html">os.fstat(fd)</a></p><br/>返回文件描述符fd的状态，像stat()。 </td></tr><tr><td>18</td><td><p><a href="https://www.runoob.com/python/os-fstatvfs.html">os.fstatvfs(fd)</a></p><br/>返回包含文件描述符fd的文件的文件系统的信息，像 statvfs()</td></tr><tr><td>19</td><td><p><a href="https://www.runoob.com/python/os-fsync.html">os.fsync(fd)</a></p><br/>强制将文件描述符为fd的文件写入硬盘。</td></tr><tr><td>20</td><td><p><a href="https://www.runoob.com/python/os-ftruncate.html">os.ftruncate(fd, length)</a></p><br/>裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。</td></tr><tr><td>21</td><td><p><a href="https://www.runoob.com/python/os-getcwd.html">os.getcwd()</a></p><br/>返回当前工作目录 </td></tr><tr><td>22</td><td><p><a href="https://www.runoob.com/python/os-getcwdu.html">os.getcwdu()</a></p><br/>返回一个当前工作目录的Unicode对象</td></tr><tr><td>23</td><td><p><a href="https://www.runoob.com/python/os-isatty.html">os.isatty(fd)</a></p><br/>如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</td></tr><tr><td>24</td><td><p><a href="https://www.runoob.com/python/os-lchflags.html">os.lchflags(path, flags)</a></p><br/>设置路径的标记为数字标记，类似 chflags()，但是没有软链接</td></tr><tr><td>25</td><td><p><a href="https://www.runoob.com/python/os-lchmod.html">os.lchmod(path, mode)</a></p><br/>修改连接文件权限</td></tr><tr><td>26</td><td><p><a href="https://www.runoob.com/python/os-lchown.html">os.lchown(path, uid, gid)</a></p><br/>更改文件所有者，类似 chown，但是不追踪链接。 </td></tr><tr><td>27</td><td><p><a href="https://www.runoob.com/python/os-link.html">os.link(src, dst)</a></p><br/>创建硬链接，名为参数 dst，指向参数 src</td></tr><tr><td>28</td><td><p><a href="https://www.runoob.com/python/os-listdir.html">os.listdir(path)</a></p><br/>返回path指定的文件夹包含的文件或文件夹的名字的列表。 </td></tr><tr><td>29</td><td><p><a href="https://www.runoob.com/python/os-lseek.html">os.lseek(fd, pos, how)</a></p><br/>设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效</td></tr><tr><td>30</td><td><p><a href="https://www.runoob.com/python/os-lstat.html">os.lstat(path)</a></p><br/>像stat(),但是没有软链接 </td></tr><tr><td>31</td><td><p><a href="https://www.runoob.com/python/os-major.html">os.major(device)</a></p><br/>从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</td></tr><tr><td>32</td><td><p><a href="https://www.runoob.com/python/os-makedev.html">os.makedev(major, minor)</a></p><br/>以major和minor设备号组成一个原始设备号</td></tr><tr><td>33</td><td><p><a href="https://www.runoob.com/python/os-makedirs.html">os.makedirs(path[, mode])</a></p><br/>递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。</td></tr><tr><td>34</td><td><p><a href="https://www.runoob.com/python/os-minor.html">os.minor(device)</a></p><br/>从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</td></tr><tr><td>35</td><td><p><a href="https://www.runoob.com/python/os-mkdir.html">os.mkdir(path[, mode])</a></p><br/>以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。 </td></tr><tr><td>36</td><td><p><a href="https://www.runoob.com/python/os-mkfifo.html">os.mkfifo(path[, mode])</a></p><br/>创建命名管道，mode 为数字，默认为 0666 (八进制) </td></tr><tr><td>37</td><td><p><a href="https://www.runoob.com/python/os-mknod.html">os.mknod(filename[, mode=0600, device])</a><br/>创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。</p></td></tr><tr><td>38</td><td><p><a href="https://www.runoob.com/python/os-open.html">os.open(file, flags[, mode])</a></p><br/>打开一个文件，并且设置需要的打开选项，mode参数是可选的</td></tr><tr><td>39</td><td><p><a href="https://www.runoob.com/python/os-openpty.html">os.openpty()</a></p><br/>打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</td></tr><tr><td>40</td><td><p><a href="https://www.runoob.com/python/os-pathconf.html">os.pathconf(path, name)</a></p><br/>返回相关文件的系统配置信息。 </td></tr><tr><td>41</td><td><p><a href="https://www.runoob.com/python/os-pipe.html">os.pipe()</a></p><br/>创建一个管道. 返回一对文件描述符(r, w) 分别为读和写</td></tr><tr><td>42</td><td><p><a href="https://www.runoob.com/python/os-popen.html">os.popen(command[, mode[, bufsize]])</a></p><br/>从一个 command 打开一个管道</td></tr><tr><td>43</td><td><p><a href="https://www.runoob.com/python/os-read.html">os.read(fd, n)</a></p><br/>从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</td></tr><tr><td>44</td><td><p><a href="https://www.runoob.com/python/os-readlink.html">os.readlink(path)</a></p><br/>返回软链接所指向的文件 </td></tr><tr><td>45</td><td><p><a href="https://www.runoob.com/python/os-remove.html">os.remove(path)</a></p><br/>删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。 </td></tr><tr><td>46</td><td><p><a href="https://www.runoob.com/python/os-removedirs.html">os.removedirs(path)</a></p><br/>递归删除目录。</td></tr><tr><td>47</td><td><p><a href="https://www.runoob.com/python/os-rename.html">os.rename(src, dst)</a></p><br/>重命名文件或目录，从 src 到 dst</td></tr><tr><td>48</td><td><p><a href="https://www.runoob.com/python/os-renames.html">os.renames(old, new)</a></p><br/>递归地对目录进行更名，也可以对文件进行更名。</td></tr><tr><td>49</td><td><p><a href="https://www.runoob.com/python/os-rmdir.html">os.rmdir(path)</a></p><br/>删除path指定的空目录，如果目录非空，则抛出一个OSError异常。</td></tr><tr><td>50</td><td><p><a href="https://www.runoob.com/python/os-stat.html">os.stat(path)</a></p><br/>获取path指定的路径的信息，功能等同于C API中的stat()系统调用。</td></tr><tr><td>51</td><td><p><a href="https://www.runoob.com/python/os-stat_float_times.html">os.stat_float_times([newvalue])</a><br/>决定stat_result是否以float对象显示时间戳</p></td></tr><tr><td>52</td><td><p><a href="https://www.runoob.com/python/os-statvfs.html">os.statvfs(path)</a></p><br/>获取指定路径的文件系统统计信息</td></tr><tr><td>53</td><td><p><a href="https://www.runoob.com/python/os-symlink.html">os.symlink(src, dst)</a></p><br/>创建一个软链接</td></tr><tr><td>54</td><td><p><a href="https://www.runoob.com/python/os-tcgetpgrp.html">os.tcgetpgrp(fd)</a></p><br/>返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组 </td></tr><tr><td>55</td><td><p><a href="https://www.runoob.com/python/os-tcsetpgrp.html">os.tcsetpgrp(fd, pg)</a></p><br/>设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</td></tr><tr><td>56</td><td><p><a href="https://www.runoob.com/python/os-tempnam.html">os.tempnam([dir[, prefix]])</a></p><br/>返回唯一的路径名用于创建临时文件。 </td></tr><tr><td>57</td><td><p><a href="https://www.runoob.com/python/os-tmpfile.html">os.tmpfile()</a></p><br/>返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。 </td></tr><tr><td>58</td><td><p><a href="https://www.runoob.com/python/os-tmpnam.html">os.tmpnam()</a></p><br/>为创建一个临时文件返回一个唯一的路径</td></tr><tr><td>59</td><td><p><a href="https://www.runoob.com/python/os-ttyname.html">os.ttyname(fd)</a></p><br/>返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</td></tr><tr><td>60</td><td><p><a href="https://www.runoob.com/python/os-unlink.html">os.unlink(path)</a></p><br/>删除文件路径 </td></tr><tr><td>61</td><td><p><a href="https://www.runoob.com/python/os-utime.html">os.utime(path, times)</a></p><br/>返回指定的path文件的访问和修改的时间。 </td></tr><tr><td>62</td><td><p><a href="https://www.runoob.com/python/os-walk.html">os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</a></p><br/>输出在文件夹中的文件名通过在树中游走，向上或者向下。</td></tr><tr><td>63</td><td><p><a href="https://www.runoob.com/python/os-write.html">os.write(fd, str)</a></p><br/>写入字符串到文件描述符 fd中. 返回实际写入的字符串长度</td></tr></tbody></table><h3>参考地址：</h3><ul><li>http://kuanghy.github.io/python-os/</li><li>http://python.usyiyi.cn/python_278/library/os.html</li></ul></div></div>
Pythonexpandtabs()方法	Python expandtabs() 方法把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8。	<div class="article-body"><div class="article-intro" id="content"><h1>Python expandtabs()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python expandtabs() 方法把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8。</p><h2>语法</h2><p>expandtabs()方法语法：</p><pre><br/>str.expandtabs(tabsize=8)<br/></pre><h2>参数</h2><ul><li>tabsize -- 指定转换字符串中的 tab 符号('\t')转为空格的字符数。</li></ul><h2>返回值</h2><p>该方法返回字符串中的 tab 符号('\t')转为空格后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了expandtabs()方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is\tstring example....wow!!!";<br/><br/><br/>print "Original string: " + str;<br/>print "Defualt exapanded tab: " +  str.expandtabs();<br/>print "Double exapanded tab: " +  str.expandtabs(16);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Original string: this is        string example....wow!!!<br/>Defualt exapanded tab: this is string example....wow!!!<br/>Double exapanded tab: this is         string example....wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
PythonTuple(元组)cmp()方法	Python 元组 cmp() 函数用于比较两个元组元素。	<div class="article-body"><div class="article-intro" id="content"><h1>Python Tuple(元组) cmp()方法</h1><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p><hr/><h2>描述</h2><p>Python 元组 cmp() 函数用于比较两个元组元素。</p><h2>语法</h2><p>cmp()方法语法：</p><pre><br/>cmp(tuple1, tuple2)<br/></pre><h2>参数</h2><ul><li>tuple1 -- 比较的元组。</li><li>tuple2 -- 比较的另外一个元组。</li></ul><h2>返回值</h2><p>如果比较的元素是同类型的,则比较其值,返回结果。</p><p>如果两个元素不是同一种类型,则检查它们是否是数字。</p><ul><li>如果是数字,执行必要的数字强制类型转换,然后比较。 </li><li>如果有一方的元素是数字,则另一方的元素"大"(数字是"最小的")  </li><li>否则,通过类型名字的字母顺序进行比较。</li></ul><p>如果有一个列表首先到达末尾,则另一个长一点的列表"大"。</p><p>如果我们用尽了两个列表的元素而且所 有元素都是相等的,那么结果就是个平局,就是说返回一个 0。</p><h2>实例</h2><p>以下实例展示了 cmp()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>tuple1, tuple2 = (123, 'xyz'), (456, 'abc')<br/><br/>print cmp(tuple1, tuple2);<br/>print cmp(tuple2, tuple1);<br/>tuple3 = tuple2 + (786,);<br/>print cmp(tuple2, tuple3)<br/>tuple4 = (123, 'xyz')<br/>print cmp(tuple1, tuple4)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>-1<br/>1<br/>-1<br/>0<br/></pre><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p></div></div>
Python字典(Dictionary)keys()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) keys()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) keys() 函数以列表返回一个字典所有的键。</p><h2>语法</h2><p>keys()方法语法：</p><pre><br/>dict.keys()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回一个字典所有的键。</p><h2>实例</h2><p>以下实例展示了 keys()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7}<br/><br/>print "Value : %s" %  dict.keys()<br/></pre><p>以上实例输出结果为：</p><pre><br/>Value : ['Age', 'Name']<br/></pre></div></div>
PythonFilewrite()方法	write() 方法用于向文件中写入指定字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File write() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>write()</b> 方法用于向文件中写入指定字符串。</p><p>在文件关闭前或缓冲区刷新前，字符串内容存储在缓冲区中，这时你在文件中是看不到写入的内容的。</p><h3>语法</h3><p>write() 方法语法如下：</p><pre><br/>fileObject.write( [ str ])<br/></pre><h3>参数</h3><ul><li><p><b>str</b> -- 要写入文件的字符串。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 write() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("test.txt", "w")<br/>print "文件名为: ", fo.name<br/>str = "菜鸟教程"<br/>fo.write( str )<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  test.txt<br/></pre><p>查看文件内容：</p><pre><br/>$ cat test.txt <br/>菜鸟教程<br/></pre><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p></div></div>
PythonListindex()方法	index() 函数用于从列表中找出某个值第一个匹配项的索引位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List index()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。</p><h2>语法</h2><p>index()方法语法：</p><pre><br/>list.index(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 查找的对象。</li></ul><h2>返回值</h2><p>该方法返回查找对象的索引位置，如果没有找到对象则抛出异常。</p><h2>实例</h2><p>以下实例展示了 index()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc'];<br/><br/>print "Index for xyz : ", aList.index( 'xyz' ) ;<br/>print "Index for zara : ", aList.index( 'zara' ) ;<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Index for xyz :  1<br/>Index for zara :  2<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3rjust()方法	rjust() 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 rjust()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>rjust() 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。</p><h2>语法</h2><p>rjust()方法语法：</p><pre><br/>str.rjust(width[, fillchar])<br/></pre><h2>参数</h2><ul><li>width -- 指定填充指定字符后中字符串的总长度.</li><li>fillchar -- 填充的字符，默认为空格。</li></ul><h2>返回值</h2><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串</p><h2>实例</h2><p>以下实例展示了rjust()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example....wow!!!"<br/>print (str.rjust(50, '*'))<br/><br/></pre><p>以上实例输出结果如下：</p><pre><br/>******************this is string example....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
PythonTuple(元组)len()方法	Python 元组 len() 函数计算元组元素个数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python Tuple(元组) len()方法</h1><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p><hr/><h2>描述</h2><p>Python 元组 len() 函数计算元组元素个数。</p><h2>语法</h2><p>len()方法语法：</p><pre><br/>len(tuple1, tuple2)<br/></pre><h2>参数</h2><ul><li>tuple -- 要计算的元组。</li></ul><h2>返回值</h2><p>函数返回元组元素个数。</p><h2>实例</h2><p>以下实例展示了 len()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>tuple1, tuple2 = (123, 'xyz', 'zara'), (456, 'abc')<br/><br/>print "First tuple length : ", len(tuple1);<br/>print "Second tuple length : ", len(tuple2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>First tuple length :  3<br/>Second tuple length :  2<br/></pre><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p></div></div>
PythonTuple(元组)tuple()方法	Python 元组 tuple() 函数将列表转换为元组。	<div class="article-body"><div class="article-intro" id="content"><h1>Python Tuple(元组) tuple()方法</h1><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p><hr/><h2>描述</h2><p>Python 元组 tuple() 函数将列表转换为元组。</p><h2>语法</h2><p>tuple()方法语法：</p><pre><br/>tuple( seq )<br/></pre><h2>参数</h2><ul><li>seq -- 要转换为元组的序列。</li></ul><h2>返回值</h2><p>返回元组。</p><h2>实例</h2><p>以下实例展示了 tuple()函数的使用方法：</p><div class="example"><h2 class="example">实例 1</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">tuple</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-builtin">tuple</span><span class="hl-brackets">(</span><span class="hl-code">{</span><span class="hl-number">1</span><span class="hl-code">:</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">:</span><span class="hl-number">4</span><span class="hl-code">}</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment">#针对字典 会返回字典的key组成的tuple</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-builtin">tuple</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment">#元组会返回元组自身</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span></div></div></div><div class="example"><h2 class="example">实例 2</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-identifier">aList</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">123</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">xyz</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">zara</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">abc</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">;</span><span class="hl-identifier">aTuple</span><span class="hl-code"> = </span><span class="hl-builtin">tuple</span><span class="hl-brackets">(</span><span class="hl-identifier">aList</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Tuple elements : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">aTuple</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>Tuple elements :  (123, 'xyz', 'zara', 'abc')<br/></pre><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p></div></div>
Python字典(Dictionary)fromkeys()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) fromkeys()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。</p><h2>语法</h2><p>fromkeys()方法语法：</p><pre><br/>dict.fromkeys(seq[, value]))<br/></pre><h2>参数</h2><ul><li>seq -- 字典键值列表。</li><li>value -- 可选参数, 设置键序列（seq）的值。</li></ul><h2>返回值</h2><p>该方法返回列表。</p><h2>实例</h2><p>以下实例展示了 fromkeys()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>seq = ('name', 'age', 'sex')<br/><br/>dict = dict.fromkeys(seq)<br/>print "New Dictionary : %s" %  str(dict)<br/><br/>dict = dict.fromkeys(seq, 10)<br/>print "New Dictionary : %s" %  str(dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>New Dictionary : {'age': None, 'name': None, 'sex': None}<br/>New Dictionary : {'age': 10, 'name': 10, 'sex': 10}<br/></pre></div></div>
Python3isspace()方法	Python isspace() 方法检测字符串是否只由空白字符组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isspace()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python isspace() 方法检测字符串是否只由空白字符组成。</p><h2>语法</h2><p>isspace()方法语法：</p><pre><br/>str.isspace()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3title()方法	Python title() 方法返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 title()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python title() 方法返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。</p><h2>语法</h2><p>title()方法语法：</p><pre><br/>str.title();<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回"标题化"的字符串,就是说所有单词都是以大写开始。</p><h2>实例</h2><p>以下实例展示了 title()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example from runoob....wow!!!"<br/>print (str.title())<br/></pre><p>以上实例输出结果如下：</p><pre><br/>This Is String Example From Runoob....Wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3rfind()方法	Python rfind() 返回字符串最后一次出现的位置，如果没有匹配项则返回-1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 rfind()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python rfind() 返回字符串最后一次出现的位置，如果没有匹配项则返回-1。</p><h2>语法</h2><p>rfind()方法语法：</p><pre><br/>str.rfind(str, beg=0 end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 查找的字符串</li><li>beg -- 开始查找的位置，默认为0</li><li>end -- 结束查找位置，默认为字符串的长度。</li></ul><h2>返回值</h2><p>返回字符串最后一次出现的位置，如果没有匹配项则返回-1。</p><h2>实例</h2><p>以下实例展示了rfind()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str1 = "this is really a string example....wow!!!"<br/>str2 = "is"<br/><br/>print (str1.rfind(str2))<br/><br/>print (str1.rfind(str2, 0, 10))<br/>print (str1.rfind(str2, 10, 0))<br/><br/>print (str1.find(str2))<br/>print (str1.find(str2, 0, 10))<br/>print (str1.find(str2, 10, 0))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>5<br/>5<br/>-1<br/>2<br/>2<br/>-1<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonsuper()函数	super() 函数用于调用下一个父类(超类)并返回该父类实例的方法。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> super() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>super()</b> 函数用于调用下一个父类(超类)并返回该父类实例的方法。</p><p>super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。</p><p>MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。</p><h3>语法</h3><p>以下是 super() 方法的语法:</p><pre><br/>super(type[, object-or-type])<br/></pre><h3>参数</h3><ul><li>type -- 类。</li><li>object-or-type -- 类，一般是 self</li></ul><h3>返回值</h3><p>无。</p><hr/><h2>实例</h2><p>以下展示了使用 super 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">FooParent</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">__init__</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">parent</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">I</span><span class="hl-special">\'</span><span class="hl-string">m the parent.</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">Parent</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">bar</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-code">,</span><span class="hl-identifier">message</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">%s from Parent</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-identifier">message</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">FooChild</span><span class="hl-brackets">(</span><span class="hl-identifier">FooParent</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">__init__</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-comment"># super(FooChild,self) 首先找到 FooChild 的父类（就是类 FooParent），然后把类B的对象 FooChild 转换为类 FooParent 的对象</span><span class="hl-code"></span><span class="hl-builtin">super</span><span class="hl-brackets">(</span><span class="hl-identifier">FooChild</span><span class="hl-code">,</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">.</span><span class="hl-identifier">__init__</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">Child</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">bar</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-code">,</span><span class="hl-identifier">message</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-builtin">super</span><span class="hl-brackets">(</span><span class="hl-identifier">FooChild</span><span class="hl-code">, </span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">.</span><span class="hl-identifier">bar</span><span class="hl-brackets">(</span><span class="hl-identifier">message</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">Child bar fuction</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">parent</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">__name__</span><span class="hl-code"> == </span><span class="hl-quotes">'</span><span class="hl-string">__main__</span><span class="hl-quotes">'</span><span class="hl-code">:    </span><span class="hl-identifier">fooChild</span><span class="hl-code"> = </span><span class="hl-identifier">FooChild</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">fooChild</span><span class="hl-code">.</span><span class="hl-identifier">bar</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">HelloWorld</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span></div></div></div><p>执行结果：</p><pre><br/>Parent<br/>Child<br/>HelloWorld from Parent<br/>Child bar fuction<br/>I'm the parent.<br/></pre><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythondir()函数	dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python dir() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>dir()</b> 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法__dir__()，该方法将被调用。如果参数不包含__dir__()，该方法将最大限度地收集参数信息。</p><h2>语法</h2><p>dir 语法：</p><pre><br/>dir([object])<br/></pre><p>参数说明：</p><ul><li>object --  对象、变量、类型。</li></ul><h2>返回值</h2><p>返回模块的属性列表。</p><h2>实例</h2><p>以下实例展示了 dir 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">dir</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment">#  获得当前模块的属性列表</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">__builtins__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__doc__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__name__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__package__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">arr</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">myslice</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">dir</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-code"> </span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 查看列表的方法</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">__add__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__class__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__contains__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__delattr__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__delitem__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__delslice__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__doc__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__eq__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__format__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__ge__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__getattribute__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__getitem__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__getslice__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__gt__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__hash__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__iadd__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__imul__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__init__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__iter__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__le__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__len__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__lt__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__mul__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__ne__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__new__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__reduce__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__reduce_ex__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__repr__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__reversed__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__rmul__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__setattr__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__setitem__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__setslice__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__sizeof__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__str__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__subclasshook__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">append</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">count</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">extend</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">index</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">insert</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">pop</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">remove</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">reverse</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">sort</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3asin()函数	 asin() 返回x的反正弦弧度值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> asin() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>asin()</b> 返回x的反正弦弧度值。</p><hr/><h2>语法</h2><p>以下是 asin() 方法的语法:</p><pre><br/>import math<br/><br/>math.asin(x)<br/></pre><p><strong>注意：</strong>asin()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- -1到1之间的数值。如果x是大于1，会产生一个错误。</li></ul><hr/><h2>返回值</h2><p>返回x的反正弦弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 asin() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("asin(0.64) : ",  math.asin(0.64))<br/>print ("asin(0) : ",  math.asin(0))<br/>print ("asin(-1) : ",  math.asin(-1))<br/>print ("asin(1) : ",  math.asin(1))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>asin(0.64) :  0.694498265626556<br/>asin(0) :  0.0<br/>asin(-1) :  -1.5707963267948966<br/>asin(1) :  1.5707963267948966<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythondelattr()函数	delattr 函数用于删除属性。	<div class="article-body"><div class="article-intro" id="content"><h1>Python delattr() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>delattr</b> 函数用于删除属性。</p><p><span class="marked">delattr(x, 'foobar')</span> 相等于 <span class="marked">del x.foobar</span>。</p><h2>语法</h2><p>setattr 语法：</p><pre><br/>delattr(object, name)<br/></pre><h2>参数</h2><ul><li>object -- 对象。</li><li>name -- 必须是对象的属性。</li></ul><h2>返回值</h2><p>无。</p><h2>实例</h2><p>以下实例展示了 delattr 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Coordinate</span><span class="hl-code">:    </span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code"></span><span class="hl-identifier">y</span><span class="hl-code"> = -</span><span class="hl-number">5</span><span class="hl-code"></span><span class="hl-identifier">z</span><span class="hl-code"> = </span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-identifier">point1</span><span class="hl-code"> = </span><span class="hl-identifier">Coordinate</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">x = </span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-identifier">point1</span><span class="hl-code">.</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">y = </span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-identifier">point1</span><span class="hl-code">.</span><span class="hl-identifier">y</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">z = </span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-identifier">point1</span><span class="hl-code">.</span><span class="hl-identifier">z</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-builtin">delattr</span><span class="hl-brackets">(</span><span class="hl-identifier">Coordinate</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">z</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">--删除 z 属性后--</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">x = </span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-identifier">point1</span><span class="hl-code">.</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">y = </span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-identifier">point1</span><span class="hl-code">.</span><span class="hl-identifier">y</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 触发错误</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">z = </span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-identifier">point1</span><span class="hl-code">.</span><span class="hl-identifier">z</span><span class="hl-brackets">)</span></div></div></div><p>输出结果：</p><pre><br/>('x = ', 10)<br/>('y = ', -5)<br/>('z = ', 0)<br/>--删除 z 属性后--<br/>('x = ', 10)<br/>('y = ', -5)<br/>Traceback (most recent call last):<br/>  File "test.py", line 22, in &lt;module&gt;<br/>    print('z = ',point1.z)<br/>AttributeError: Coordinate instance has no attribute 'z'<br/></pre><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3cos()函数	 cos() 返回x的弧度的余弦值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> cos() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>cos()</b> 返回x的弧度的余弦值。</p><hr/><h2>语法</h2><p>以下是 cos() 方法的语法:</p><pre><br/>import math<br/><br/>math.cos(x)<br/></pre><p><strong>注意：</strong>cos()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回x的弧度的余弦值,-1 到 1 之间。</p><hr/><h2>实例</h2><p>以下展示了使用 cos() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("cos(3) : ",  math.cos(3))<br/>print ("cos(-3) : ",  math.cos(-3))<br/>print ("cos(0) : ",  math.cos(0))<br/>print ("cos(math.pi) : ",  math.cos(math.pi))<br/>print ("cos(2*math.pi) : ",  math.cos(2*math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>cos(3) :  -0.9899924966004454<br/>cos(-3) :  -0.9899924966004454<br/>cos(0) :  1.0<br/>cos(math.pi) :  -1.0<br/>cos(2*math.pi) :  1.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3os.pipe()方法	os.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.pipe() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。</p><h3>语法</h3><p><b>pipe()</b>方法语法格式如下：</p><pre><br/>os.pipe()<br/></pre><h3>参数</h3><ul><li><p>无</p></li></ul></div></div>
Python3os.mknod()方法	os.mknod() 方法用于创建一个指定文件名的文件系统节点（文件，设备特别文件或者命名pipe）。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.mknod() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.mknod() 方法用于创建一个指定文件名的文件系统节点（文件，设备特别文件或者命名pipe）。</p><h3>语法</h3><p><b>mknod()</b>方法语法格式如下：</p><pre><br/>os.mknod(filename[, mode=0600[, device=0]])<br/></pre><h3>参数</h3><ul><li><p><b>filename</b> --  创建的文件系统节点</p></li><li><p><b>mode</b> --   mode指定创建或使用节点的权限, 组合 (或者bitwise) stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, 和stat.S_IFIFO (这些常数在stat模块). 对于 stat.S_IFCHR和stat.S_IFBLK, 设备定义了 最新创建的设备特殊文件 (可能使用 os.makedev()),其它都将忽略。</p></li><li><p><b>device</b> --  可选，指定创建文件的设备</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 mknod() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os<br/>import stat<br/><br/>filename = '/tmp/tmpfile'<br/>mode = 0600|stat.S_IRUSR<br/><br/># 文件系统节点指定不同模式<br/>os.mknod(filename, mode)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>-rw-------. 1 root   root         0 Apr 30 02:38 tmpfile<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonset()函数	set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。	<div class="article-body"><div class="article-intro" id="content"><h1>Python set() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>set()</b> 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><h2>语法</h2><p>set 语法：</p><pre><br/>class set([iterable])<br/></pre><p>参数说明：</p><ul><li>iterable --  可迭代对象对象；</li></ul><h2>返回值</h2><p>返回新的集合对象。</p><h2>实例</h2><p>以下实例展示了 set 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">y</span><span class="hl-code"> = </span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">google</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">x</span><span class="hl-code">, </span><span class="hl-identifier">y</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">r</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">u</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">n</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">e</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">g</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">l</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 重复的被删除</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">x</span><span class="hl-code"> &amp; </span><span class="hl-identifier">y</span><span class="hl-code"> </span><span class="hl-comment"># 交集</span><span class="hl-code"></span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">x</span><span class="hl-code"> | </span><span class="hl-identifier">y</span><span class="hl-code"> </span><span class="hl-comment"># 并集</span><span class="hl-code"></span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">e</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">g</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">l</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">n</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">r</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">u</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">x</span><span class="hl-code"> - </span><span class="hl-identifier">y</span><span class="hl-code"> </span><span class="hl-comment"># 差集</span><span class="hl-code"></span><span class="hl-identifier">set</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">r</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">u</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">n</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.chown()方法	os.chown() 方法用于更改文件所有者，如果不修改可以设置为 -1, 你需要超级用户权限来执行权限修改操作。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.chown() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chown() 方法用于更改文件所有者，如果不修改可以设置为 -1, 你需要超级用户权限来执行权限修改操作。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>chown()</b>方法语法格式如下：</p><pre><br/>os.chown(path, uid, gid);<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置权限的文件路径</p></li><li><p><b>uid</b> -- 所属用户 ID </p></li><li><p><b>gid</b> -- 所属用户组 ID </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 chown() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 假定 /tmp/foo.txt 文件存在.<br/># 设置所有者 ID 为 100 <br/>os.chown("/tmp/foo.txt", 100, -1)<br/><br/>print ("修改权限成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonisalpha()方法	Python isalpha() 方法检测字符串是否只由字母组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isalpha()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isalpha() 方法检测字符串是否只由字母组成。</p><h2>语法</h2><p>isalpha()方法语法：</p><pre><br/>str.isalpha()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3atan()函数	 atan() 返回x的反正切弧度值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> atan() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>atan()</b> 返回x的反正切弧度值。</p><hr/><h2>语法</h2><p>以下是 atan() 方法的语法:</p><pre><br/>import math<br/><br/>math.atan(x)<br/></pre><p><strong>注意：</strong>atan()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回x的反正切弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 atan() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("atan(0.64) : ",  math.atan(0.64))<br/>print ("atan(0) : ",  math.atan(0))<br/>print ("atan(10) : ",  math.atan(10))<br/>print ("atan(-1) : ",  math.atan(-1))<br/>print ("atan(1) : ",  math.atan(1))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>atan(0.64) :  0.5693131911006619<br/>atan(0) :  0.0<br/>atan(10) :  1.4711276743037347<br/>atan(-1) :  -0.7853981633974483<br/>atan(1) :  0.7853981633974483<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3lower()方法	Python lower() 方法转换字符串中所有大写字符为小写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 lower()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python lower() 方法转换字符串中所有大写字符为小写。</p><h2>语法</h2><p>lower()方法语法：</p><pre><br/>str.lower()<br/></pre><h2>参数</h2><ul><li>无。</li></ul><h2>返回值</h2><p>返回将字符串中所有大写字符转换为小写后生成的字符串。</p><h2>实例</h2><p>以下实例展示了lower()的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "Runoob EXAMPLE....WOW!!!"<br/><br/>print( str.lower() )<br/></pre><p>以上实例输出结果如下：</p><pre><br/>runoob example....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonchoice()函数	 choice() 方法返回一个列表，元组或字符串的随机项。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> choice() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>choice()</b> 方法返回一个列表，元组或字符串的随机项。</p><hr/><h2>语法</h2><p>以下是 choice() 方法的语法:</p><pre><br/>import random<br/><br/>random.choice( seq  )<br/></pre><p><strong>注意：</strong>choice()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>seq  -- 可以是一个列表，元组或字符串。</li></ul><hr/><h2>返回值</h2>返回随机项。<hr/><h2>实例</h2><p>以下展示了使用 choice() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import random<br/><br/>print "choice([1, 2, 3, 5, 9]) : ", random.choice([1, 2, 3, 5, 9])<br/>print "choice('A String') : ", random.choice('A String')<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>choice([1, 2, 3, 5, 9]) :  2<br/>choice('A String') :  n<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonrstrip()方法	Python rstrip() 删除 string 字符串末尾的指定字符（默认为空格）.	<div class="article-body"><div class="article-intro" id="content"><h1>Python rstrip()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python rstrip() 删除 string 字符串末尾的指定字符（默认为空格）.</p><h2>语法</h2><p>rstrip()方法语法：</p><pre><br/>str.rstrip([chars])<br/></pre><h2>参数</h2><ul><li>chars -- 指定删除的字符（默认为空格）</li></ul><h2>返回值</h2><p>返回删除 string 字符串末尾的指定字符后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了rstrip()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "     this is string example....wow!!!     ";<br/>print str.rstrip();<br/>str = "88888888this is string example....wow!!!8888888";<br/>print str.rstrip('8');<br/></pre><p>以上实例输出结果如下：</p><pre><br/>     this is string example....wow!!!<br/>88888888this is string example....wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonos.getcwdu()方法	os.getcwdu() 方法用于返回一个当前工作目录的Unicode对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.getcwdu() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.getcwdu() 方法用于返回一个当前工作目录的Unicode对象。</p><p>Unix, Windows 系统下可用。</p><h3>语法</h3><p><b>getcwdu()</b>方法语法格式如下：</p><pre><br/>os.getcwdu()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>返回一个当前工作目录的Unicode对象。</p><h3>实例</h3><p>以下实例演示了 getcwdu() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 切换到 "/var/www/html" 目录<br/>os.chdir("/var/www/html" )<br/><br/># 打印当前目录<br/>print "当前工作目录 : %s" % os.getcwdu()<br/><br/># 打开 "/tmp"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 使用 os.fchdir() 方法修改目录<br/>os.fchdir(fd)<br/><br/># 打印当前目录<br/>print "当前工作目录 : %s" % os.getcwdu()<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录 : /var/www/html<br/>当前工作目录 : /tmp<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.mkfifo()方法	os.mkfifo() 方法用于创建指令路径的管道，并设置权限模式。默认的模式为 0666 (八进制)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.mkfifo() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.mkfifo() 方法用于创建指令路径的管道，并设置权限模式。默认的模式为 0666 (八进制)。</p><h3>语法</h3><p><b>mkfifo()</b>方法语法格式如下：</p><pre><br/>os.mkfifo(path[, mode])<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  要创建的目录</p></li><li><p><b>mode</b> --  要为目录设置的权限数字模式</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 mkfifo() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 创建的目录<br/>path = "/tmp/hourly"<br/><br/>os.mkfifo( path, 0644 )<br/><br/>print "路径被创建"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>路径被创建<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonceil()函数	ceil() 函数返回数字的上入整数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> ceil() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>ceil() 函数返回数字的上入整数。</p><hr/><h2>语法</h2><p>以下是 ceil() 方法的语法:</p><pre><br/>import math<br/><br/>math.ceil( x )<br/></pre><p><strong>注意：</strong>ceil()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2>x -- 数值表达式。<hr/><h2>返回值</h2>函数返回数字的上入整数。<hr/><h2>实例</h2><p>以下展示了使用 ceil() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # This will import math module<br/><br/>print "math.ceil(-45.17) : ", math.ceil(-45.17)<br/>print "math.ceil(100.12) : ", math.ceil(100.12)<br/>print "math.ceil(100.72) : ", math.ceil(100.72)<br/>print "math.ceil(119L) : ", math.ceil(119L)<br/>print "math.ceil(math.pi) : ", math.ceil(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.ceil(-45.17) :  -45.0<br/>math.ceil(100.12) :  101.0<br/>math.ceil(100.72) :  101.0<br/>math.ceil(119L) :  119.0<br/>math.ceil(math.pi) : 4.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythontranslate()方法	Python translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符,

要过滤掉的字符放到 del 参数中。	<div class="article-body"><div class="article-intro" id="content"><h1>Python translate()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符,要过滤掉的字符放到 del 参数中。</p><h2>语法</h2><p>translate()方法语法：</p><pre><br/>str.translate(table[, deletechars]);<br/></pre><h2>参数</h2><ul><li>table -- 翻译表，翻译表是通过maketrans方法转换而来。</li><li>deletechars -- 字符串中要过滤的字符列表。</li></ul><h2>返回值</h2><p>返回翻译后的字符串。</p><h2>实例</h2><p>以下实例展示了 translate()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>from string import maketrans   # 引用 maketrans 函数。<br/><br/>intab = "aeiou"<br/>outtab = "12345"<br/>trantab = maketrans(intab, outtab)<br/><br/>str = "this is string example....wow!!!";<br/>print str.translate(trantab);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>th3s 3s str3ng 2x1mpl2....w4w!!!<br/></pre><p>以上实例去除字符串中的 'x' 和 'm' 字符：</p><pre><br/>#!/usr/bin/python<br/><br/>from string import maketrans   # Required to call maketrans function.<br/><br/>intab = "aeiou"<br/>outtab = "12345"<br/>trantab = maketrans(intab, outtab)<br/><br/>str = "this is string example....wow!!!";<br/>print str.translate(trantab, 'xm');<br/></pre><p>以上实例输出结果：</p><pre><br/>th3s 3s str3ng 21pl2....w4w!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonid()函数	id() 函数用于获取对象的内存地址。	<div class="article-body"><div class="article-intro" id="content"><h1>Python id() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>id()</b> 函数用于获取对象的内存地址。</p><h2>语法</h2><p>id 语法：</p><pre><br/>id([object])<br/></pre><p>参数说明：</p><ul><li>object --  对象。</li></ul><h2>返回值</h2><p>返回对象的内存地址。</p><h2>实例</h2><p>以下实例展示了 id 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">id</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">4531887632</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">id</span><span class="hl-brackets">(</span><span class="hl-identifier">b</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">140588731085608</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonfilter()函数	filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> filter() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>filter()</b> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><h3>语法</h3><p>以下是 filter() 方法的语法:</p><pre><br/>filter(function, iterable)<br/></pre><h3>参数</h3><ul><li>function --  判断函数。</li><li>iterable --  可迭代对象。</li></ul><h3>返回值</h3><p>返回列表。</p><hr/><h2>实例</h2><p>以下展示了使用 filter 函数的实例：</p><div class="example"><h2 class="example">过滤出列表中的所有奇数：</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">is_odd</span><span class="hl-brackets">(</span><span class="hl-identifier">n</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">n</span><span class="hl-code"> % </span><span class="hl-number">2</span><span class="hl-code"> == </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-identifier">newlist</span><span class="hl-code"> = </span><span class="hl-builtin">filter</span><span class="hl-brackets">(</span><span class="hl-identifier">is_odd</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">newlist</span><span class="hl-brackets">)</span></div></div></div><p>输出结果 ：</p><pre>[1, 3, 5, 7, 9]</pre><div class="example"><h2 class="example">过滤出1~100中平方根是整数的数：</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">math</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">is_sqr</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">sqrt</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code"> % </span><span class="hl-number">1</span><span class="hl-code"> == </span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-identifier">newlist</span><span class="hl-code"> = </span><span class="hl-builtin">filter</span><span class="hl-brackets">(</span><span class="hl-identifier">is_sqr</span><span class="hl-code">, </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">101</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">newlist</span><span class="hl-brackets">)</span></div></div></div><p>输出结果 ：</p><pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</pre><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.tcsetpgrp()方法	os.tcsetpgrp() 方法用于设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.tcsetpgrp() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tcsetpgrp() 方法用于设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</p>可用系统: Unix。<h3>语法</h3><p><b>tcsetpgrp()</b>方法语法格式如下：</p><pre><br/>os.tcsetpgrp(fd, pg)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li><li><p><b>pg</b> -- 关联的进程组。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 tcsetpgrp() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 显示当前目录<br/>print( "当前目录 :%s" %os.getcwd() )<br/><br/># 修改目录到 /dev/tty<br/>fd = os.open("/dev/tty",os.O_RDONLY)<br/><br/>f = os.tcgetpgrp(fd)<br/><br/># 显示进程组<br/>print( "关联进程组: " )<br/>print( f )<br/><br/># 设置进程组<br/>os.tcsetpgrp(fd,2672)<br/>print( "done" )<br/><br/>os.close(fd)<br/>print( "关闭文件成功!!" )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前目录 :/tmp<br/>关联进程组:<br/>2672<br/>done<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonljust()方法	Python ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python ljust()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><h2>语法</h2><p>ljust()方法语法：</p><pre><br/>str.ljust(width[, fillchar])<br/></pre><h2>参数</h2><ul><li>width -- 指定字符串长度。</li><li>fillchar -- 填充字符，默认为空格。</li></ul><h2>返回值</h2><p>返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><h2>实例</h2><p>以下实例展示了ljust()的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/><br/>print str.ljust(50, '0');<br/></pre><p>以上实例输出结果如下：</p><pre><br/>this is string example....wow!!!000000000000000000<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonos.fpathconf()方法	os.fpathconf() 方法用于返回一个打开的文件的系统配置信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fpathconf() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fpathconf() 方法用于返回一个打开的文件的系统配置信息。</p><p>Unix上可用。</p><h3>语法</h3><p><b>fpathconf()</b>方法语法格式如下：</p><pre><br/>os.fpathconf(fd, name)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 打开的文件的描述符。</p></li><li><p><b>name</b> -- 可选，和buffersize参数和Python内建的open函数一样，mode参数可以指定『r,w,a,r+,w+,a+,b』等，表示文件的是只读的还是可以读写的，以及打开文件是以二进制还是文本形式打开。这些参数和C语言中的&lt;stdio.h&gt;中fopen函数中指定的mode参数类似。</p></li><li><p><b>bufsize</b> -- 检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。一些平台也定义了一些额外的名字。这些名字在主操作系统上pathconf_names的字典中。对于不在pathconf_names中的配置变量，传递一个数字作为名字，也是可以接受的。</p></li></ul><h3>返回值</h3><p>返回一个打开的文件的系统配置信息。</p><h3>实例</h3><p>以下实例演示了 fpathconf() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/>print "%s" % os.pathconf_names<br/><br/># 获取最大文件连接数<br/>no = os.fpathconf(fd, 'PC_LINK_MAX')<br/>print "文件最大连接数为 :%d" % no<br/><br/># 获取文件名最大长度<br/>no = os.fpathconf(fd, 'PC_NAME_MAX')<br/>print "文件名最大长度为 :%d" % no<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>{'PC_MAX_INPUT': 2, 'PC_VDISABLE': 8, 'PC_SYNC_IO': 9, <br/>'PC_SOCK_MAXBUF': 12, 'PC_NAME_MAX': 3, 'PC_MAX_CANON': 1, <br/>'PC_PRIO_IO': 11, 'PC_CHOWN_RESTRICTED': 6, 'PC_ASYNC_IO': 10, <br/>'PC_NO_TRUNC': 7, 'PC_FILESIZEBITS': 13, 'PC_LINK_MAX': 0, <br/>'PC_PIPE_BUF': 5, 'PC_PATH_MAX': 4}<br/><br/>文件最大连接数为 :127<br/>文件名最大长度为 :255<br/>Closed the file successfully!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythontimeclock()方法	这个需要注意，在不同的系统上含义不同。在UNIX系统上，它返回的是"进程时间"，它是用秒表示的浮点数（时间戳）。而在WINDOWS中，第一次调用，返回的是进程运行的实际时间。而第二次之后的调用是自第一次调用以后到现在的运行时间。（实际上是以WIN32上QueryPerformanceCounter()为基础，它比毫秒表示更为精确）
	<div class="article-body"><div class="article-intro" id="content"><h1>Python time clock()方法</h1><hr/><h2>描述</h2><p>Python time clock() 函数以浮点数计算的秒数返回当前的CPU时间。用来衡量不同程序的耗时，比time.time()更有用。</p><p>这个需要注意，在不同的系统上含义不同。在UNIX系统上，它返回的是"进程时间"，它是用秒表示的浮点数（时间戳）。而在WINDOWS中，第一次调用，返回的是进程运行的实际时间。而第二次之后的调用是自第一次调用以后到现在的运行时间。（实际上是以WIN32上QueryPerformanceCounter()为基础，它比毫秒表示更为精确）</p><h2>语法</h2><p>clock()方法语法：</p><pre><br/>time.clock()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数有两个功能，</p><p>  在第一次调用的时候，返回的是程序运行的实际时间；</p><p>  以第二次之后的调用，返回的是自第一次调用后,到这次调用的时间间隔</p><p>在win32系统下，这个函数返回的是真实时间（wall time），而在Unix/Linux下返回的是CPU时间。</p><h2>实例</h2><p>以下实例展示了 clock()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>def procedure():<br/>    time.sleep(2.5)<br/><br/># measure process time<br/>t0 = time.clock()<br/>procedure()<br/>print time.clock() - t0, "seconds process time"<br/><br/># measure wall time<br/>t0 = time.time()<br/>procedure()<br/>print time.time() - t0, "seconds wall time"<br/></pre><p>以上实例输出结果为：</p><pre><br/>0.0 seconds process time<br/>2.50023603439 seconds wall time<br/></pre></div></div>
PythonListmax()方法	max() 方法返回列表元素中的最大值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List max()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>max() 方法返回列表元素中的最大值。</p><h2>语法</h2><p>max()方法语法：</p><pre><br/>max(list)<br/></pre><h2>参数</h2><ul><li>list -- 要返回最大值的列表。</li></ul><h2>返回值</h2><p>返回列表元素中的最大值。</p><h2>实例</h2><p>以下实例展示了 max()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>list1, list2 = [123, 'xyz', 'zara', 'abc'], [456, 700, 200]<br/><br/>print "Max value element : ", max(list1);<br/>print "Max value element : ", max(list2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Max value element :  zara<br/>Max value element :  700<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3Listpop()方法	pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List pop()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p><h2>语法</h2><p>pop()方法语法：</p><pre><br/>list.pop(obj=list[-1])<br/></pre><h2>参数</h2><ul><li>obj -- 可选参数，要移除列表元素的对象。</li></ul><h2>返回值</h2><p>该方法返回从列表中移除的元素对象。</p><h2>实例</h2><p>以下实例展示了 pop()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao']<br/>list1.pop()<br/>print ("列表现在为 : ", list1)<br/>list1.pop(1)<br/>print ("列表现在为 : ", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表现在为 :  ['Google', 'Runoob']<br/>列表现在为 :  ['Google']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python字典(Dictionary)str()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) str()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) str() 函数将值转化为适于人阅读的形式，以可打印的字符串表示。</p><h2>语法</h2><p>str()方法语法：</p><pre><br/>str(dict)<br/></pre><h2>参数</h2><ul><li>dict -- 字典。</li></ul><h2>返回值</h2><p>返回字符串。</p><h2>实例</h2><p>以下实例展示了 str()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7};<br/>print "Equivalent String : %s" % str (dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>Equivalent String : {'Age': 7, 'Name': 'Zara'}<br/></pre></div></div>
Pythonos.chdir()方法	os.chdir() 方法用于改变当前工作目录到指定的路径。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.chdir() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chdir() 方法用于改变当前工作目录到指定的路径。</p><h3>语法</h3><p><b>chdir()</b>方法语法格式如下：</p><pre><br/>os.chdir(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要切换到的新路径。 </p></li></ul><h3>返回值</h3><p>如果允许访问返回 True , 否则返回False。</p><h3>实例</h3><p>以下实例演示了 chdir() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/>path = "/tmp"<br/><br/># 查看当前工作目录<br/>retval = os.getcwd()<br/>print "当前工作目录为 %s" % retval<br/><br/># 修改当前工作目录<br/>os.chdir( path )<br/><br/># 查看修改后的工作目录<br/>retval = os.getcwd()<br/><br/>print "目录修改成功 %s" % retval<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录为 /www<br/>目录修改成功 /tmp<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3isupper()方法	isupper() 方法检测字符串中所有的字母是否都为大写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isupper()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>isupper() 方法检测字符串中所有的字母是否都为大写。</p><h2>语法</h2><p>isupper()方法语法：</p><pre><br/>str.isupper()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Pythonos.fdopen()方法	os.fdopen() 方法用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fdopen() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fdopen() 方法用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。</p><p>Unix, Windows上可用。</p><h3>语法</h3><p><b>fdopen()</b>方法语法格式如下：</p><pre><br/>os.fdopen(fd, [, mode[, bufsize]]);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 打开的文件的描述符，在Unix下，描述符是一个小整数。</p></li><li><p><b>mode</b> -- 可选，和bufsize参数和Python内建的open函数一样，mode参数可以指定『r,w,a,r+,w+,a+,b』等，表示文件的是只读的还是可以读写的，以及打开文件是以二进制还是文本形式打开。这些参数和C语言中的&lt;stdio.h&gt;中fopen函数中指定的mode参数类似。</p></li><li><p><b>bufsize</b> -- 可选，指定返回的文件对象是否带缓冲：bufsize=0，表示没有带缓冲；bufsize=1，表示该文件对象是行缓冲的；bufsize=正数，表示使用一个指定大小的缓冲冲，单位为byte，但是这个大小不是精确的；bufsize=负数，表示使用一个系统默认大小的缓冲，对于tty字元设备一般是行缓冲，而对于其他文件则一般是全缓冲。如果这个参数没有制定，则使用系统默认的缓冲设定。</p></li></ul><h3>返回值</h3><p>通过文件描述符返回的文件对象。</p><h3>实例</h3><p>以下实例演示了 fdopen() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 获取以上文件的对象<br/>fo = os.fdopen(fd, "w+")<br/><br/># 获取当前文章<br/>print "Current I/O pointer position :%d" % fo.tell()<br/><br/># 写入字符串<br/>fo.write( "Python is a great language.\nYeah its great!!\n");<br/><br/># 读取内容<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print "Read String is : ", str<br/><br/># 获取当前位置<br/>print "Current I/O pointer position :%d" % fo.tell()<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Current I/O pointer position :0<br/>Read String is :  This is testPython is a great language.<br/>Yeah its great!!<br/><br/>Current I/O pointer position :45<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3sorted()函数	sorted() 函数对所有可迭代的对象进行排序操作。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 sorted() 函数</h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p><b>sorted()</b> 函数对所有可迭代的对象进行排序操作。</p><blockquote><p><strong>sort 与 sorted 区别：</strong></p><p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p><p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p></blockquote><h2>语法</h2><p>sorted 语法：</p><pre><br/>sorted(iterable, key=None, reverse=False)  <br/></pre><p>参数说明：</p><ul><li>iterable --  可迭代对象。</li><li>key --  主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse --  排序规则，reverse = True  降序 ， reverse = False 升序（默认）。</li></ul><h2>返回值</h2><p>返回重新排序的列表。</p><h2>实例</h2><p>以下实例展示了 sorted 的最简单的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-code"> </span><span class="hl-comment"># 默认为升序</span></div></div></div><p>你也可以使用 list 的 list.sort() 方法。这个方法会修改原始的 list（返回值为None）。通常这个方法不如sorted()方便-如果你不需要原始的 list，list.sort()方法效率会稍微高一些。</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code">=</span><span class="hl-brackets">[</span><span class="hl-number">5</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code">.</span><span class="hl-identifier">sort</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-brackets">]</span></div></div></div><p>另一个区别在于list.sort() 方法只为 list 定义。而 sorted() 函数可以接收任何的 iterable。</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-code">{</span><span class="hl-number">1</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">D</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">E</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">A</span><span class="hl-quotes">'</span><span class="hl-code">}</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">]</span></div></div></div><p>利用key进行倒序排序</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">example_list</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">result_list</span><span class="hl-code"> = </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">example_list</span><span class="hl-code">, </span><span class="hl-identifier">key</span><span class="hl-code">=</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">: </span><span class="hl-identifier">x</span><span class="hl-code">*-</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">result_list</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p>要进行反向排序，也通过传入第三个参数 reverse=True：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">example_list</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">example_list</span><span class="hl-code">, </span><span class="hl-identifier">reverse</span><span class="hl-code">=</span><span class="hl-reserved">True</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">]</span></div></div></div><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p></div></div>
Python3choice()函数	 choice() 方法返回一个列表，元组或字符串的随机项。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> choice() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>choice()</b> 方法返回一个列表，元组或字符串的随机项。</p><hr/><h2>语法</h2><p>以下是 choice() 方法的语法:</p><pre><br/>import random<br/><br/>random.choice( seq  )<br/></pre><p><strong>注意：</strong>choice()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>seq  -- 可以是一个列表，元组或字符串。</li></ul><hr/><h2>返回值</h2>返回随机项。<hr/><h2>实例</h2><p>以下展示了使用 choice() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import random<br/><br/>print ("从 range(100) 返回一个随机数 : ",random.choice(range(100)))<br/>print ("从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 : ", random.choice([1, 2, 3, 5, 9]))<br/>print ("从字符串中 'Runoob' 返回一个随机字符 : ", random.choice('Runoob'))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>从 range(100) 返回一个随机数 :  68<br/>从列表中 [1, 2, 3, 5, 9]) 返回一个随机元素 :  2<br/>从字符串中 'Runoob' 返回一个随机字符 :  u<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
PythonFilenext()方法	next() 方法在文件使用迭代器时会使用到，在循环中，next()方法会在每次循环中调用，该方法返回文件的下一行，如果到达结尾(EOF),则触发 StopIteration	<div class="article-body"><div class="article-intro" id="content"><h1>Python File next() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>next()</b> 方法在文件使用迭代器时会使用到，在循环中，next()方法会在每次循环中调用，该方法返回文件的下一行，如果到达结尾(EOF),则触发 <i>StopIteration</i></p></div></div>
Pythonzfill()方法	Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。	<div class="article-body"><div class="article-intro" id="content"><h1>Python zfill()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。</p><h2>语法</h2><p>zfill()方法语法：</p><pre><br/>str.zfill(width)<br/></pre><h2>参数</h2><ul><li>width -- 指定字符串的长度。原字符串右对齐，前面填充0。</li></ul><h2>返回值</h2><p>返回指定长度的字符串。</p><h2>实例</h2><p>以下实例展示了 zfill()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/><br/>print str.zfill(40);<br/>print str.zfill(50);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>00000000this is string example....wow!!!<br/>000000000000000000this is string example....wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonos.rmdir()方法	os.rmdir() 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.rmdir() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.rmdir() 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。</p><h3>语法</h3><p><b>rmdir()</b>方法语法格式如下：</p><pre><br/>os.rmdir(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要删除的目录路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 rmdir() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 列出目录<br/>print "目录为: %s"%os.listdir(os.getcwd())<br/><br/># 删除路径<br/>os.rmdir("mydir")<br/><br/># 列出重命名后的目录<br/>print "目录为: %s" %os.listdir(os.getcwd())<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py','mydir' ]<br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py' ]<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.isatty()方法	os.isatty() 方法用于判断如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.isatty() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.isatty() 方法用于判断如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</p><h3>语法</h3><p><b>isatty()</b>方法语法格式如下：</p><pre><br/>os.isatty()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</p><h3>实例</h3><p>以下实例演示了 isatty() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>str = "This is runoob.com site"<br/>os.write(fd,bytes(str, 'UTF-8'))<br/><br/># 使用 isatty() 查看文件<br/>ret = os.isatty(fd)<br/><br/>print ("返回值: ", ret)<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>返回值:  False<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.removedirs()方法	os.removedirs() 方法用于递归删除目录。像rmdir(), 如果子文件夹成功删除, removedirs()才尝试它们的父文件夹,直到抛出一个error(它基本上被忽略,因为它一般意味着你文件夹不为空)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.removedirs() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.removedirs() 方法用于递归删除目录。像rmdir(), 如果子文件夹成功删除, removedirs()才尝试它们的父文件夹,直到抛出一个error(它基本上被忽略,因为它一般意味着你文件夹不为空)。</p><h3>语法</h3><p><b>removedirs()</b>方法语法格式如下：</p><pre><br/>os.removedirs(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要移除的目录路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 removedirs() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 列出目录<br/>print ("目录为: %s" %os.listdir(os.getcwd()))<br/><br/># 移除<br/>os.removedirs("/test")<br/><br/># 列出移除后的目录<br/>print ("移除后目录为:" %os.listdir(os.getcwd()))<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py','test' ]<br/>移除后目录为:<br/>[  'a1.txt','resume.doc','a3.py' ]<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.dup()方法	os.dup() 方法用于复制文件描述符 fd。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.dup() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.dup() 方法用于复制文件描述符 fd。</p><h3>语法</h3><p><b>dup()</b>方法语法格式如下：</p><pre><br/>os.dup(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>返回复制的文件描述符。</p><h3>实例</h3><p>以下实例演示了 dup() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 复制文件描述符<br/>d_fd = os.dup( fd )<br/><br/># 使用复制的文件描述符写入文件<br/>os.write(d_fd, "This is test")<br/><br/># 关闭文件<br/>os.closerange( fd, d_fd)<br/><br/>print "关闭所有文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre>关闭所有文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3Listcopy()方法	copy() 函数用于复制列表，类似于 a[:]。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List copy()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>copy() 函数用于复制列表，类似于 <b>a[:]</b>。</p><h2>语法</h2><p>copy()方法语法：</p><pre><br/>list.copy()<br/></pre><h2>参数</h2><ul><li>无。</li></ul><h2>返回值</h2><p>返回复制后的新列表。</p><h2>实例</h2><p>以下实例展示了 copy()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao', 'Baidu']<br/>list2 = list1.copy()<br/>print ("list2 列表: ", list2)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>list2 列表:  ['Google', 'Runoob', 'Taobao', 'Baidu']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3split()方法	split()通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 split()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>split()通过指定分隔符对字符串进行切片，如果参数num 有指定值，则仅分隔 num 个子字符串</p><h2>语法</h2><p>split()方法语法：</p><pre><br/>str.split(str="", num=string.count(str)).<br/></pre><h2>参数</h2><ul><li>str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num -- 分割次数。</li></ul><h2>返回值</h2><p>返回分割后的字符串列表。</p><h2>实例</h2><p>以下实例展示了split()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example....wow!!!"<br/>print (str.split( ))<br/>print (str.split('i',1))<br/>print (str.split('w'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>['this', 'is', 'string', 'example....wow!!!']<br/>['th', 's is string example....wow!!!']<br/>['this is string example....', 'o', '!!!']<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3degrees()函数	 degrees() 将弧度转换为角度。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> degrees() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>degrees()</b> 将弧度转换为角度。</p><hr/><h2>语法</h2><p>以下是 degrees() 方法的语法:</p><pre><br/>import math<br/><br/>math.degrees(x)<br/></pre><p><strong>注意：</strong>degrees()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回一个角度值。</p><hr/><h2>实例</h2><p>以下展示了使用 degrees() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("degrees(3) : ",  math.degrees(3))<br/>print ("degrees(-3) : ",  math.degrees(-3))<br/>print ("degrees(0) : ",  math.degrees(0))<br/>print ("degrees(math.pi) : ",  math.degrees(math.pi))<br/>print ("degrees(math.pi/2) : ",  math.degrees(math.pi/2))<br/>print ("degrees(math.pi/4) : ",  math.degrees(math.pi/4))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>degrees(3) :  171.88733853924697<br/>degrees(-3) :  -171.88733853924697<br/>degrees(0) :  0.0<br/>degrees(math.pi) :  180.0<br/>degrees(math.pi/2) :  90.0<br/>degrees(math.pi/4) :  45.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonos.renames()方法	os.renames() 方法用于递归重命名目录或文件。类似rename()。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.renames() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.renames() 方法用于递归重命名目录或文件。类似rename()。</p><h3>语法</h3><p><b>renames()</b>方法语法格式如下：</p><pre><br/>os.renames(old, new)<br/></pre><h3>参数</h3><ul><li><p><b>old</b> -- 要重命名的目录</p></li><li><p><b>new</b> --文件或目录的新名字。甚至可以是包含在目录中的文件，或者完整的目录树。</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 renames() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/>print "当前目录为: %s" %os.getcwd()<br/><br/># 列出目录<br/>print "目录为: %s"%os.listdir(os.getcwd())<br/><br/># 重命名 "aa1.txt"<br/>os.renames("aa1.txt","newdir/aanew.txt")<br/><br/>print "重命名成功。"<br/><br/># 列出重命名的文件 "aa1.txt"<br/>print "目录为: %s" %os.listdir(os.getcwd())<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前目录为: /tmp<br/>目录为:<br/> [  'a1.txt','resume.doc','a3.py','aa1.txt','Administrator','amrood.admin' ]<br/>重命名成功。<br/>目录为:<br/> [  'a1.txt','resume.doc','a3.py','Administrator','amrood.admin' ]<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.readlink()方法	os.readlink() 方法用于返回软链接所指向的文件。可能返回绝对火相对路径。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.readlink() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.readlink() 方法用于返回软链接所指向的文件。可能返回绝对火相对路径。</p><p>在Unix中有效</p><h3>语法</h3><p><b>readlink()</b>方法语法格式如下：</p><pre><br/>os.readlink(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要查找的软链接路径</p></li></ul><h3>返回值</h3><p>返回软链接所指向的文件 </p><h3>实例</h3><p>以下实例演示了 readlink() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os<br/><br/>src = '/usr/bin/python'<br/>dst = '/tmp/python'<br/><br/># 创建软链接<br/>os.symlink(src, dst)<br/><br/># 使用软链接显示源链接<br/>path = os.readlink( dst )<br/>print path<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>/usr/bin/python<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3strip()方法	Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 strip()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格）。</p><h2>语法</h2><p>strip()方法语法：</p><pre><br/>str.strip([chars]);<br/></pre><h2>参数</h2><ul><li>chars -- 移除字符串头尾指定的字符。</li></ul><h2>返回值</h2><p>返回移除字符串头尾指定的字符生成的新字符串。</p><h2>实例</h2><p>以下实例展示了strip()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "*****this is string example....wow!!!*****"<br/>print (str.strip( '*' ))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>this is string example....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonos.tmpnam()方法	os.tmpnam() 方法用于为创建一个临时文件返回一个唯一的路径。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.tmpnam() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tmpnam() 方法用于为创建一个临时文件返回一个唯一的路径。</p><h3>语法</h3><p><b>tmpnam()</b>方法语法格式如下：</p><pre><br/>os.tmpnam<br/></pre><h3>参数</h3><ul><li><p>无</p></li></ul><h3>返回值</h3><p>返回一个唯一的路径。</p><h3>实例</h3><p>以下实例演示了 tmpnam() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 生成临时路径<br/>tmpfn = os.tmpnam()<br/><br/>print "这是一个唯一的路径:"<br/>print tmpfn<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>这是一个唯一的路径:<br/>/tmp/fileUFojpd<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonprint()函数	print() 方法用于打印输出，最常见的一个函数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> print() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>print()</b> 方法用于打印输出，最常见的一个函数。</p><blockquote><p>print 在 Python3.x 是一个函数，但在 Python2.x 版本不是一个函数，只是一个关键字。</p></blockquote><h3>语法</h3><p>以下是 print() 方法的语法:</p><pre><br/>print(*objects, sep=' ', end='\n', file=sys.stdout)<br/></pre><h3>参数</h3><ul><li>objects -- 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</li><li>sep -- 用来间隔多个对象，默认值是一个空格。</li><li>end -- 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串。</li><li>file -- 要写入的文件对象。</li></ul><h3>返回值</h3><p>无。</p><hr/><h2>实例</h2><p>以下展示了使用 print 函数的实例：</p><div class="example"><h2 class="example">Python3 下测试</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code">  &gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Hello World</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">Hello</span><span class="hl-code"> </span><span class="hl-identifier">World</span><span class="hl-code">   &gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">,</span><span class="hl-identifier">b</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">runoob</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">aaa</span><span class="hl-quotes">"</span><span class="hl-quotes">"</span><span class="hl-string">bbb</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">aaabbb</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">aaa</span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-quotes">"</span><span class="hl-string">bbb</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">aaa</span><span class="hl-code"> </span><span class="hl-identifier">bbb</span><span class="hl-code">&gt;&gt;&gt;  &gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">www</span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-quotes">"</span><span class="hl-string">runoob</span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-quotes">"</span><span class="hl-string">com</span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-identifier">sep</span><span class="hl-code">=</span><span class="hl-quotes">"</span><span class="hl-string">.</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 设置间隔符</span><span class="hl-code"></span><span class="hl-identifier">www</span><span class="hl-code">.</span><span class="hl-identifier">runoob</span><span class="hl-code">.</span><span class="hl-identifier">com</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.pipe()方法	os.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.pipe() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.pipe() 方法用于创建一个管道, 返回一对文件描述符(r, w) 分别为读和写。</p><h3>语法</h3><p><b>pipe()</b>方法语法格式如下：</p><pre><br/>os.pipe()<br/></pre><h3>参数</h3><ul><li><p>无</p></li></ul></div></div>
Python3字典pop()方法	Python 字典 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 pop() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</p><h2>语法</h2><p>pop()方法语法：</p><pre><br/>pop(key[,default])<br/></pre><h2>参数</h2><ul><li>key: 要删除的键值</li><li>default: 如果没有 key，返回 default 值</li></ul><h2>返回值</h2><p>返回被删除的值。</p><h2>实例</h2><p>以下实例展示了 pop() 方法的使用方法：</p><pre><br/>&gt;&gt;&gt; site= {'name': '菜鸟教程', 'alexa': 10000, 'url': 'www.runoob.com'}<br/>&gt;&gt;&gt; pop_obj=site.pop('name')<br/>&gt;&gt;&gt; print(pop_obj)<br/>菜鸟教程<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
PythonListlist()方法	list() 方法用于将元组转换为列表。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List list()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>list() 方法用于将元组转换为列表。</p><p><strong>注：</strong>元组与列表是非常类似的，区别在于元组的元素值不能修改，元组是放在括号中，列表是放于方括号中。</p><h2>语法</h2><p>list()方法语法：</p><pre><br/>list( seq )<br/></pre><h2>参数</h2><ul><li>list -- 要转换为列表的元组。</li></ul><h2>返回值</h2><p>返回列表。</p><h2>实例</h2><p>以下实例展示了 list()函数的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-identifier">aTuple</span><span class="hl-code"> = </span><span class="hl-brackets">(</span><span class="hl-number">123</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">xyz</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">zara</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">abc</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">;</span><span class="hl-identifier">aList</span><span class="hl-code"> = </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-identifier">aTuple</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">列表元素 : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">aList</span></div></div></div><p>以上实例输出结果如下：</p><pre><br/>列表元素 :  [123, 'xyz', 'zara', 'abc']<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Pythonisdecimal()方法	Python isdecimal() 方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isdecimal()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isdecimal() 方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。</p><p><strong>注意:</strong>定义一个十进制字符串，只需要在字符串前添加 'u' 前缀即可。</p><h2>语法</h2><p>isdecimal()方法语法：</p><pre><br/>str.isdecimal()<br/></pre><h2>参数</h2><ul><li>无</li></ul><h2>返回值</h2><p>如果字符串是否只包含十进制字符返回True，否则返回False。</p><h2>实例</h2><p>以下实例展示了 isdecimal()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/><br/>str = u"this2009";  <br/>print str.isdecimal();<br/><br/>str = u"23443434";<br/>print str.isdecimal();<br/></pre><p>以上实例输出结果如下：</p><pre><br/>False<br/>True<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3index()方法	index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 index()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。</p><h2>语法</h2><p>index()方法语法：</p><pre><br/>str.index(str, beg=0, end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 指定检索的字符串</li><li>beg -- 开始索引，默认为0。</li><li>end -- 结束索引，默认为字符串的长度。</li></ul></div></div>
Python3os.lchmod()方法	os.lchmod() 方法用于修改连接文件权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.lchmod() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lchmod() 方法用于修改连接文件权限。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>lchmod()</b>方法语法格式如下：</p><pre><br/>os.lchmod(path, mode)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置标记的文件路径</p></li><li><p><b>mode</b> -- 可以是以下一个或多个组成，多个使用 "|" 隔开：</p> <ul> <li><p><b>stat.S_ISUID:</b>设置 UID 位</p></li> <li><p><b>stat.S_ISGID:</b> 设置组 ID 位 </p></li> <li><p><b>stat.S_ENFMT:</b> 系统文件锁定的执法行动</p></li> <li><p><b>stat.S_ISVTX:</b> 在执行之后保存文字和图片</p></li> <li><p><b>stat.S_IREAD:</b> 对于拥有者读的权限</p></li> <li><p><b>stat.S_IWRITE:</b> 对于拥有者写的权限</p></li> <li><p><b>stat.S_IEXEC:</b> 对于拥有者执行的权限</p></li> <li><p><b>stat.S_IRWXU:</b>对于拥有者读、写、执行的权限</p></li> <li><p><b>stat.S_IRUSR:</b> 对于拥有者读的权限</p></li> <li><p><b>stat.S_IWUSR:</b> 对于拥有者写的权限</p></li> <li><p><b>stat.S_IXUSR:</b> 对于拥有者执行的权限</p></li> <li><p><b>stat.S_IRWXG:</b> 对于同组的人读写执行的权限 </p></li> <li><p><b>stat.S_IRGRP:</b> 对于同组读的权限 </p></li> <li><p><b>stat.S_IWGRP:</b>对于同组写的权限</p></li> <li><p><b>stat.S_IXGRP:</b> 对于同组执行的权限</p></li> <li><p><b>stat.S_IRWXO:</b> 对于其他组读写执行的权限</p></li> <li><p><b>stat.S_IROTH:</b> 对于其他组读的权限</p></li> <li><p><b>stat.S_IWOTH:</b> 对于其他组写的权限</p></li> <li><p><b>stat.S_IXOTH:</b>对于其他组执行的权限</p></li> </ul> </li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchmod() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/># 修改文件权限<br/># 设置文件可以通过组执行<br/>os.lchmod( path, stat.S_IXGRP)<br/><br/># 设置文件可以被其他用户写入<br/>os.lchmod("/tmp/foo.txt", stat.S_IWOTH)<br/><br/>print ("修改权限成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
PythonTuple(元组)min()方法	Python 元组 min() 函数返回元组中元素最小值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python Tuple(元组) min()方法</h1><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p><hr/><h2>描述</h2><p>Python 元组 min() 函数返回元组中元素最小值。</p><h2>语法</h2><p>min()方法语法：</p><pre><br/>min(tuple)<br/></pre><h2>参数</h2><ul><li>tuple -- 指定的元组。</li></ul><h2>返回值</h2><p>返回元组中元素最小值。</p><h2>实例</h2><p>以下实例展示了 min()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>tuple1, tuple2 = (123, 'xyz', 'zara', 'abc'), (456, 700, 200)<br/><br/>print "min value element : ", min(tuple1);<br/>print "min value element : ", min(tuple2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>min value element :  123<br/>min value element :  200<br/></pre><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p></div></div>
Python3isdigit()方法	Python isdigit() 方法检测字符串是否只由数字组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isdigit()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python isdigit() 方法检测字符串是否只由数字组成。</p><h2>语法</h2><p>isdigit()方法语法：</p><pre><br/>str.isdigit()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Pythonfloat()函数	float() 函数用于将整数和字符串转换成浮点数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python float() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>float()</b> 函数用于将整数和字符串转换成浮点数。</p><h2>语法</h2><p>float()方法语法：</p><pre><br/>class float([x])<br/></pre><h2>参数</h2><ul><li>x -- 整数或字符串</li></ul><h2>返回值</h2><p>返回浮点数。</p><h2>实例</h2><p>以下实例展示了 float() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">float</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">1.0</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">float</span><span class="hl-brackets">(</span><span class="hl-number">112</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">112.0</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">float</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">123.6</span><span class="hl-brackets">)</span><span class="hl-code">-</span><span class="hl-number">123.6</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">float</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">123</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 字符串</span><span class="hl-code"></span><span class="hl-number">123.0</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.makedirs()方法	os.makedirs() 方法用于递归创建目录。像 mkdir(), 但创建的所有intermediate-level文件夹需要包含子目录。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.makedirs() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.makedirs() 方法用于递归创建目录。像 mkdir(), 但创建的所有intermediate-level文件夹需要包含子目录。</p><h3>语法</h3><p><b>makedirs()</b>方法语法格式如下：</p><pre><br/>os.makedirs(path, mode=0o777)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  需要递归创建的目录。</p></li><li><p><b>mode</b> --  权限模式。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 makedirs() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 创建的目录<br/>path = "/tmp/home/monthly/daily"<br/><br/>os.makedirs( path, 0755 );<br/><br/>print ("路径被创建")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>路径被创建<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3Listindex()方法	index() 函数用于从列表中找出某个值第一个匹配项的索引位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List index()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。</p><h2>语法</h2><p>index()方法语法：</p><pre><br/>list.index(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 查找的对象。</li></ul><h2>返回值</h2><p>该方法返回查找对象的索引位置，如果没有找到对象则抛出异常。</p><h2>实例</h2><p>以下实例展示了 index()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao']<br/>print ('Runoob 索引值为', list1.index('Runoob'))<br/>print ('Taobao 索引值为', list1.index('Taobao'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Runoob 索引值为 1<br/>Taobao 索引值为 2<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3bytes函数	bytes 函数返回一个新的 bytes 对象，该对象是一个 0 <= x < 256 区间内的整数不可变序列。它是 bytearray 的不可变版本。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> bytes 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p>bytes 函数返回一个新的 bytes 对象，该对象是一个 0 &lt;= x &lt; 256 区间内的整数不可变序列。它是 bytearray 的不可变版本。</p></div></div>
PythonFileread()方法	read() 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File read() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>read()</b> 方法用于从文件读取指定的字节数，如果未给定或为负则读取所有。</p></div></div>
Pythondecode()方法	Python decode() 方法以 encoding 指定的编码格式解码字符串。默认编码为字符串编码。	<div class="article-body"><div class="article-intro" id="content"><h1>Python decode()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python decode() 方法以 <em>encoding</em> 指定的编码格式解码字符串。默认编码为字符串编码。</p><h2>语法</h2><p>decode()方法语法：</p><pre><br/>str.decode(encoding='UTF-8',errors='strict')<br/></pre><h2>参数</h2><ul><li>encoding -- 要使用的编码，如"UTF-8"。</li><li>errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。</li></ul><h2>返回值</h2><p>该方法返回解码后的字符串。</p><h2>实例</h2><p>以下实例展示了decode()方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/>str = str.encode('base64','strict');<br/><br/>print "Encoded String: " + str;<br/>print "Decoded String: " + str.decode('base64','strict')<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Encoded String: dGhpcyBpcyBzdHJpbmcgZXhhbXBsZS4uLi53b3chISE=<br/><br/>Decoded String: this is string example....wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3Listextend()方法	extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List extend()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。</p><h2>语法</h2><p>extend()方法语法：</p><pre><br/>list.extend(seq)<br/></pre><h2>参数</h2><ul><li>seq -- 元素列表。</li></ul><h2>返回值</h2><p>该方法没有返回值，但会在已存在的列表中添加新的列表内容。</p><h2>实例</h2><p>以下实例展示了 extend()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao']<br/>list2=list(range(5)) # 创建 0-4 的列表<br/>list1.extend(list2)  # 扩展列表<br/>print ("扩展后的列表：", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>扩展后的列表： ['Google', 'Runoob', 'Taobao', 0, 1, 2, 3, 4]<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3expandtabs()方法	expandtabs() 方法把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 expandtabs()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>expandtabs() 方法把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8。</p><h2>语法</h2><p>expandtabs()方法语法：</p><pre><br/>str.expandtabs(tabsize=8)<br/></pre><h2>参数</h2><ul><li>tabsize -- 指定转换字符串中的 tab 符号('\t')转为空格的字符数。</li></ul><h2>返回值</h2><p>该方法返回字符串中的 tab 符号('\t')转为空格后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了expandtabs()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is\tstring example....wow!!!"<br/><br/>print ("原始字符串: " + str)<br/>print ("替换 \\t 符号: " +  str.expandtabs())<br/>print ("使用16个空格替换 \\t 符号: " +  str.expandtabs(16))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>原始字符串: this is     string example....wow!!!<br/>替换 \t 符号: this is string example....wow!!!<br/>使用16个空格替换 \t 符号: this is         string example....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonos.mknod()方法	os.mknod() 方法用于创建一个指定文件名的文件系统节点（文件，设备特别文件或者命名pipe）。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.mknod() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.mknod() 方法用于创建一个指定文件名的文件系统节点（文件，设备特别文件或者命名pipe）。</p><h3>语法</h3><p><b>mknod()</b>方法语法格式如下：</p><pre><br/>os.mknod(filename[, mode=0600[, device=0]])<br/></pre><h3>参数</h3><ul><li><p><b>filename</b> --  创建的文件系统节点</p></li><li><p><b>mode</b> --   mode指定创建或使用节点的权限, 组合 (或者bitwise) stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, 和stat.S_IFIFO (这些常数在stat模块). 对于 stat.S_IFCHR和stat.S_IFBLK, 设备定义了 最新创建的设备特殊文件 (可能使用 os.makedev()),其它都将忽略。</p></li><li><p><b>device</b> --  可选，指定创建文件的设备</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 mknod() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os<br/>import stat<br/><br/>filename = '/tmp/tmpfile'<br/>mode = 0600|stat.S_IRUSR<br/><br/># 文件系统节点指定不同模式<br/>os.mknod(filename, mode)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>-rw-------. 1 root   root         0 Apr 30 02:38 tmpfile<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3Fileisatty()方法	isatty() 方法检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False。
	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File isatty() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>isatty()</b> 方法检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False。</p><h3>语法</h3><p>isatty() 方法语法如下：</p><pre><br/>fileObject.isatty(); <br/></pre><h3>参数</h3><ul><li><p><b>无</b></p></li></ul><h3>返回值</h3><p>如果连接到一个终端设备返回 True，否则返回 False。</p><h3>实例</h3><p>以下实例演示了 isatty() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/># 打开文件<br/>fo = open("runoob.txt", "wb")<br/>print ("文件名为: ", fo.name)<br/><br/>ret = fo.isatty()<br/>print ("返回值 : ", ret)<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/>返回值 :  False<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p></div></div>
Pythoncount()方法	Python count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python count()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。</p><h2>语法</h2><p>count()方法语法：</p><pre><br/>str.count(sub, start= 0,end=len(string))<br/></pre><h2>参数</h2><ul><li>sub -- 搜索的子字符串</li><li>start -- 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li><li>end -- 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li></ul><h2>返回值</h2><p>该方法返回子字符串在字符串中出现的次数。</p><h2>实例</h2><p>以下实例展示了count()方法的实例：</p><div class="example"><h2 class="example">实例(Python 2.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-identifier">str</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">this is string example....wow!!!</span><span class="hl-quotes">"</span><span class="hl-code">; </span><span class="hl-identifier">sub</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">i</span><span class="hl-quotes">"</span><span class="hl-code">;</span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">str.count(sub, 4, 40) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">str</span><span class="hl-code">.</span><span class="hl-identifier">count</span><span class="hl-brackets">(</span><span class="hl-identifier">sub</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">40</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">sub</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">wow</span><span class="hl-quotes">"</span><span class="hl-code">;</span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">str.count(sub) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">str</span><span class="hl-code">.</span><span class="hl-identifier">count</span><span class="hl-brackets">(</span><span class="hl-identifier">sub</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果如下：</p><pre><br/>str.count(sub, 4, 40) :  2<br/>str.count(sub) :  1<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonpow()函数	 pow() 方法返回 xy（x的y次方） 的值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> pow() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>pow()</b> 方法返回 x<sup>y</sup>（x的y次方） 的值。</p><hr/><h2>语法</h2><p>以下是 math 模块 pow() 方法的语法:</p><pre><br/>import math<br/><br/>math.pow( x, y )<br/></pre><p>内置的 pow() 方法</p><pre><br/>pow(x, y[, z])<br/></pre><p>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p><p><strong>注意：</strong>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回 x<sup>y</sup>（x的y次方） 的值。<hr/><h2>实例</h2><p>以下展示了使用 pow() 方法的实例：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">math</span><span class="hl-code"> </span><span class="hl-comment"># 导入 math 模块</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">math.pow(100, 2) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-builtin">pow</span><span class="hl-brackets">(</span><span class="hl-number">100</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 使用内置，查看输出结果区别</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">pow(100, 2) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">pow</span><span class="hl-brackets">(</span><span class="hl-number">100</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">math.pow(100, -2) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-builtin">pow</span><span class="hl-brackets">(</span><span class="hl-number">100</span><span class="hl-code">, -</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">math.pow(2, 4) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-builtin">pow</span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">math.pow(3, 0) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-builtin">pow</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">)</span></div></div></div><p>以上实例运行后输出结果为：</p><pre><br/>math.pow(100, 2) :  10000.0<br/>pow(100, 2) :  10000<br/>math.pow(100, -2) :  0.0001<br/>math.pow(2, 4) :  16.0<br/>math.pow(3, 0) :  1.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonexp()函数	exp() 方法返回x的指数,ex。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> exp() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>exp() 方法返回x的指数,e<sup>x</sup>。</p><hr/><h2>语法</h2><p>以下是 exp() 方法的语法:</p><pre><br/>import math<br/><br/>math.exp( x )<br/></pre><p><strong>注意：</strong>exp()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回x的指数,e<sup>x</sup>。<hr/><h2>实例</h2><p>以下展示了使用 exp() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # 导入 math 模块<br/><br/>print "math.exp(-45.17) : ", math.exp(-45.17)<br/>print "math.exp(100.12) : ", math.exp(100.12)<br/>print "math.exp(100.72) : ", math.exp(100.72)<br/>print "math.exp(119L) : ", math.exp(119L)<br/>print "math.exp(math.pi) : ", math.exp(math.pi)<br/></pre><p>以上实例运行后输出结果为：<pre><br/>math.exp(-45.17) :  2.41500621326e-20<br/>math.exp(100.12) :  3.03084361407e+43<br/>math.exp(100.72) :  5.52255713025e+43<br/>math.exp(119L) :  4.7978133273e+51<br/>math.exp(math.pi) :  23.1406926328<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></p></div></div>
Pythonos.chown()方法	os.chown() 方法用于更改文件所有者，如果不修改可以设置为 -1, 你需要超级用户权限来执行权限修改操作。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.chown() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chown() 方法用于更改文件所有者，如果不修改可以设置为 -1, 你需要超级用户权限来执行权限修改操作。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>chown()</b>方法语法格式如下：</p><pre><br/>os.chown(path, uid, gid);<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置权限的文件路径</p></li><li><p><b>uid</b> -- 所属用户 ID </p></li><li><p><b>gid</b> -- 所属用户组 ID </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchmod() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 假定 /tmp/foo.txt 文件存在.<br/># 设置所有者 ID 为 100 <br/>os.chown("/tmp/foo.txt", 100, -1)<br/><br/>print "修改权限成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3randrange()函数	randrange() 方法返回指定递增基数集合中的一个随机数，基数缺省值为1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> randrange() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p><b>randrange()</b> 方法返回指定递增基数集合中的一个随机数，基数缺省值为1。</p><hr/><h2>语法</h2><p>以下是 randrange() 方法的语法:</p><pre><br/>import random<br/><br/>random.randrange ([start,] stop [,step])<br/></pre><p><strong>注意：</strong>randrange()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>start  -- 指定范围内的开始值，包含在范围内。</li><li>stop  -- 指定范围内的结束值，不包含在范围内。</li><li>step  -- 指定递增基数。</li></ul><hr/><h2>返回值</h2>从给定的范围返回随机项。<hr/><h2>实例</h2><p>以下展示了使用 randrange() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import random<br/><br/># 从 1-100 中选取一个奇数<br/>print ("randrange(1,100, 2) : ", random.randrange(1, 100, 2))<br/><br/># 从 0-99 选取一个随机数<br/>print ("randrange(100) : ", random.randrange(100))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>randrange(1,100, 2) :  97<br/>randrange(100) :  42<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythontimestrptime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time strptime()方法</h1><hr/><h2>描述</h2><p>Python time strptime() 函数根据指定的格式把一个时间字符串解析为时间元组。</p><h2>语法</h2><p>strptime()方法语法：</p><pre><br/>time.strptime(string[, format])<br/></pre><h2>参数</h2><ul><li>string -- 时间字符串。</li><li>format -- 格式化字符串。</li></ul><h2>返回值</h2><p>返回struct_time对象。</p><h2>说明</h2><p>python中时间日期格式化符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h2>实例</h2><p>以下实例展示了 strptime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>struct_time = time.strptime("30 Nov 00", "%d %b %y")<br/>print "returned tuple: %s " % struct_time<br/></pre><p>以上实例输出结果为：</p><pre><br/>returned tuple: (2000, 11, 30, 0, 0, 0, 3, 335, -1)<br/></pre></div></div>
Pythonos.fdatasync()方法	os.fdatasync() 方法用于强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。如果你需要刷新缓冲区可以使用该方法。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fdatasync() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fdatasync() 方法用于强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。如果你需要刷新缓冲区可以使用该方法。</p><p> Unix上可用。</p><h3>语法</h3><p><b>fdatasync()</b>方法语法格式如下：</p><pre><br/>os.fdatasync(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fdatasync() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件 "/tmp/foo.txt"<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 使用 fdatasync() 方法<br/>os.fdatasync(fd)<br/><br/># 读取文件<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print "读取的字符是 : ", str<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符是 :  This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonisalnum()方法	Python isalnum() 方法检测字符串是否由字母和数字组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isalnum()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isalnum() 方法检测字符串是否由字母和数字组成。</p><h2>语法</h2><p>isalnum()方法语法：</p><pre><br/>str.isalnum()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3timemktime()方法	如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 time mktime()方法</h1><hr/><h2>描述</h2><p>Python time mktime() 函数执行与gmtime(), localtime()相反的操作，它接收struct_time对象作为参数，返回用秒数来表示时间的浮点数。</p><p>如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。</p><h2>语法</h2><p>mktime()方法语法：</p><pre><br/>time.mktime(t)<br/></pre><h2>参数</h2><ul><li>t -- 结构化的时间或者完整的9位元组元素。</li></ul><h2>返回值</h2><p>返回用秒数来表示时间的浮点数。</p><h2>实例</h2><p>以下实例展示了 mktime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/>import time<br/><br/>t = (2016, 2, 17, 17, 3, 38, 1, 48, 0)<br/>secs = time.mktime( t )<br/>print ("time.mktime(t) : %f" %  secs)<br/>print ("asctime(localtime(secs)): %s" % time.asctime(time.localtime(secs)))<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.mktime(t) : 1455699818.000000<br/>asctime(localtime(secs)): Wed Feb 17 17:03:38 2016<br/></pre></div></div>
Pythonos.ftruncate()方法	os.ftruncate() 裁剪文件描述符fd对应的文件, 它最大不能超过文件大小。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.ftruncate() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.ftruncate() 裁剪文件描述符fd对应的文件, 它最大不能超过文件大小。</p><p>Unix, Windows上可用。</p><h3>语法</h3><p><b>ftruncate()</b>方法语法格式如下：</p><pre><br/>os.ftruncate(fd, length)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li><li><p><b>length</b> -- 要裁剪文件大小。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 ftruncate() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test - This is test")<br/><br/># 使用 ftruncate() 方法<br/>os.ftruncate(fd, 10)<br/><br/># 读取内容<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print "读取的字符串是 : ", str<br/><br/># 关闭文件<br/>os.close( fd)<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符串是 :  This is te<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3Fileclose()方法	close() 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作，
否则会触发 ValueError 错误。 
 close() 方法允许调用多次。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File close() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>close()</b> 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作，否则会触发 <i>ValueError</i> 错误。  close() 方法允许调用多次。</p><p>当 file 对象，被引用到操作另外一个文件时，Python 会自动关闭之前的 file 对象。使用 close() 方法关闭文件是一个好的习惯。</p><h3>语法</h3><p>close() 方法语法如下：</p><pre><br/>fileObject.close();<br/></pre><h3>参数</h3><ul><li><p><b>无</b></p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 close() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/># 打开文件<br/>fo = open("runoob.txt", "wb")<br/>print("文件名为: ", fo.name)<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p></div></div>
Pythonos.chmod()方法	os.chmod() 方法用于更改文件或目录的权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.chmod() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chmod() 方法用于更改文件或目录的权限。</p><h3>语法</h3><p><b>chmod()</b>方法语法格式如下：</p><pre><br/>os.chmod(path, mode)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 文件名路径或目录路径。 </p></li><li><p><b>flags</b> -- 可用以下选项按位或操作生成，目录的读权限表示可以获取目录里文件名列表，，执行权限表示可以把工作目录切换到此目录，删除添加目录里的文件必须同时有写和执行权限，文件权限以用户id-&gt;组id-&gt;其它顺序检验,最先匹配的允许或禁止权限被应用。 </p><ul><li><b>stat.S_IXOTH:</b>     其他用户有执行权0o001</li></ul></li><li><b>stat.S_IWOTH:</b>     其他用户有写权限0o002</li><li><b>stat.S_IROTH:</b>     其他用户有读权限0o004</li><li><b>stat.S_IRWXO:</b>     其他用户有全部权限(权限掩码)0o007</li><li><b>stat.S_IXGRP:</b>    组用户有执行权限0o010</li><li><b>stat.S_IWGRP:</b>     组用户有写权限0o020</li><li><b>stat.S_IRGRP:</b>     组用户有读权限0o040</li><li><b>stat.S_IRWXG:</b>     组用户有全部权限(权限掩码)0o070</li><li><b>stat.S_IXUSR:</b>     拥有者具有执行权限0o100</li><li><b>stat.S_IWUSR:</b>     拥有者具有写权限0o200</li><li><b>stat.S_IRUSR:</b>     拥有者具有读权限0o400</li><li><b>stat.S_IRWXU:</b>     拥有者有全部权限(权限掩码)0o700</li><li><b>stat.S_ISVTX:</b>     目录里文件目录只有拥有者才可删除更改0o1000</li><li><b>stat.S_ISGID:</b>     执行此文件其进程有效组为文件所在组0o2000</li><li><b>stat.S_ISUID:</b>     执行此文件其进程有效用户为文件所有者0o4000</li><li><b>stat.S_IREAD:</b>     windows下设为只读</li><li><b>stat.S_IWRITE:</b>    windows下取消只读</li></ul></div></div>
PythonFiletell()方法	tell() 方法返回文件的当前位置，即文件指针当前位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File tell() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>tell()</b> 方法返回文件的当前位置，即文件指针当前位置。</p></div></div>
Pythoncomplex()函数	complex() 函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。。	<div class="article-body"><div class="article-intro" id="content"><h1>Python complex() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>complex()</b> 函数用于创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。。</p><h2>语法</h2><p>complex 语法：</p><pre><br/>class complex([real[, imag]])<br/></pre><p>参数说明：</p><ul><li>real --  int, long, float或字符串；</li><li>imag --   int, long, float；</li></ul><h2>返回值</h2><p>返回一个复数。</p><h2>实例</h2><p>以下实例展示了 complex 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">complex</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code"> + </span><span class="hl-number">2j</span><span class="hl-brackets">)</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-builtin">complex</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 数字</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code"> + </span><span class="hl-number">0j</span><span class="hl-brackets">)</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-builtin">complex</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">1</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 当做字符串处理</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code"> + </span><span class="hl-number">0j</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 注意：这个地方在"+"号两边不能有空格，也就是不能写成"1 + 2j"，应该是"1+2j"，否则会报错</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">complex</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">1+2j</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code"> + </span><span class="hl-number">2j</span><span class="hl-brackets">)</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python字典(Dictionary)type()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) type()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) type() 函数返回输入的变量类型，如果变量是字典就返回字典类型。</p><h2>语法</h2><p>type()方法语法：</p><pre><br/>type(dict)<br/></pre><h2>参数</h2><ul><li>dict -- 字典。</li></ul><h2>返回值</h2><p>返回输入的变量类型。</p><h2>实例</h2><p>以下实例展示了 type()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7};<br/>print "Variable Type : %s" %  type (dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>Variable Type : &lt;type 'dict'&gt;<br/></pre></div></div>
Pythonglobals()函数	globals() 函数会以字典类型返回当前位置的全部全局变量。	<div class="article-body"><div class="article-intro" id="content"><h1>Python globals() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>globals()</b> 函数会以字典类型返回当前位置的全部全局变量。</p><h2>语法</h2><p>globals() 函数语法：</p><pre><br/>globals()<br/></pre><h2>参数</h2><ul><li>无</li></ul><h2>返回值</h2><p>返回全局变量的字典。</p><h2>实例</h2><p>以下实例展示了 globals() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">globals</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># globals 函数返回一个全局变量的字典，包括所有导入的变量。</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">__builtins__</span><span class="hl-quotes">'</span><span class="hl-code">: &lt;</span><span class="hl-identifier">module</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">__builtin__</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">built</span><span class="hl-code">-</span><span class="hl-reserved">in</span><span class="hl-brackets">)</span><span class="hl-code">&gt;, </span><span class="hl-quotes">'</span><span class="hl-string">__name__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">__main__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__doc__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-reserved">None</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__package__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-reserved">None</span><span class="hl-code">}</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.getcwd()方法	os.getcwd() 方法用于返回当前工作目录。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.getcwd() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.getcwd() 方法用于返回当前工作目录。</p><h3>语法</h3><p><b>getcwd()</b>方法语法格式如下：</p><pre><br/>os.getcwd()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>返回当前进程的工作目录。</p><h3>实例</h3><p>以下实例演示了 getcwd() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 切换到 "/var/www/html" 目录<br/>os.chdir("/var/www/html" )<br/><br/># 打印当前目录<br/>print ("当前工作目录 : %s" % os.getcwd())<br/><br/># 打开 "/tmp"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 使用 os.fchdir() 方法修改目录<br/>os.fchdir(fd)<br/><br/># 打印当前目录<br/>print ("当前工作目录 : %s" % os.getcwd())<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录 : /var/www/html<br/>当前工作目录 : /tmp<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.walk()方法	os.walk() 方法用于通过在目录树种游走输出在目录中的文件名，向上或者向下。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.walk() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.walk() 方法用于通过在目录树种游走输出在目录中的文件名，向上或者向下。</p><p>在Unix，Windows中有效。</p><h3>语法</h3><p><b>walk()</b>方法语法格式如下：</p><pre><br/>os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])<br/></pre><h3>参数</h3><ul><li><p><b>top</b> -- 根目录下的每一个文件夹(包含它自己), 产生3-元组 (dirpath, dirnames, filenames)【文件夹路径, 文件夹名字, 文件名】。</p></li></ul></div></div>
Pythontype()函数	type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。 	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> type() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。 </p><blockquote><p>isinstance() 与 type() 区别：</p><ul><li><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p></li><li><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p></li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p></blockquote><h3>语法</h3><p>以下是 type() 方法的语法:</p><pre><br/>class type(name, bases, dict)<br/></pre><h3>参数</h3><ul><li>name -- 类的名称。</li><li>bases -- 基类的元组。</li><li>dict -- 字典，类内定义的命名空间变量。</li></ul><h3>返回值</h3><p>一个参数返回对象类型, 三个参数，返回新的类型对象。</p><hr/><h2>实例</h2><p>以下展示了使用 type 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment"># 一个参数实例</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">int</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">list</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-code">{</span><span class="hl-number">0</span><span class="hl-code">:</span><span class="hl-quotes">'</span><span class="hl-string">zero</span><span class="hl-quotes">'</span><span class="hl-code">}</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">dict</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">          &gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"> == </span><span class="hl-identifier">int</span><span class="hl-code"> </span><span class="hl-comment"># 判断类型是否相等</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code"></span><span class="hl-comment"># 三个参数</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">X</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">...&gt;&gt;&gt; </span><span class="hl-identifier">X</span><span class="hl-code"> = </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">X</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-code">,</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-builtin">dict</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">=</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 产生一个新的类型 X</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">X</span><span class="hl-code">&lt;</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">__main__.X</span><span class="hl-quotes">'</span><span class="hl-code">&gt;</span></div></div></div><div class="example"><h2 class="example">type() 与 isinstance()区别：</h2><div class="example_code"><div class="hl-main"><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-code">:    </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-builtin">isinstance</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># returns True</span><span class="hl-code"></span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> == </span><span class="hl-identifier">A</span><span class="hl-code"> </span><span class="hl-comment"># returns True</span><span class="hl-code"></span><span class="hl-builtin">isinstance</span><span class="hl-brackets">(</span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># returns True</span><span class="hl-code"></span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> == </span><span class="hl-identifier">A</span><span class="hl-code"> </span><span class="hl-comment"># returns False</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.statvfs()方法	os.statvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.statvfs() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.statvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息。</p><h3>语法</h3><p><b>statvfs()</b>方法语法格式如下：</p><pre><br/>os.statvfs([path])<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  文件路径。</p></li></ul><h3>返回值</h3><p>返回的结构:</p><ul><li><p><b>f_bsize:</b> 文件系统块大小 </p></li><li><p><b>f_frsize:</b> 分栈大小 </p></li><li><p><b>f_blocks:</b> 文件系统数据块总数</p></li><li><p><b>f_bfree:</b> 可用块数</p></li><li><p><b>f_bavail:</b>非超级用户可获取的块数</p></li><li><p><b>f_files:</b> 文件结点总数 </p></li><li><p><b>f_ffree:</b> 可用文件结点数 </p></li><li><p><b>f_favail:</b> 非超级用户的可用文件结点数 </p></li><li><p><b>f_fsid:</b> 文件系统标识 ID</p></li><li><p><b>f_flag:</b> 挂载标记</p></li><li><p><b>f_namemax:</b> 最大文件长度 </p></li></ul><h3>实例</h3><p>以下实例演示了 statvfs() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示 "a1.py" 文件的 statvfs 信息<br/>stinfo = os.statvfs('a1.py')<br/><br/>print stinfo<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.statvfs_result(f_bsize=4096, f_frsize=4096, f_blocks=1909350L, f_bfree=1491513L,<br/>f_bavail=1394521L, f_files=971520L, f_ffree=883302L, f_fvail=883302L, f_flag=0,<br/>f_namemax=255)<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
PythonListextend()方法	extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List extend()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。</p><h2>语法</h2><p>extend()方法语法：</p><pre><br/>list.extend(seq)<br/></pre><h2>参数</h2><ul><li>seq -- 元素列表。</li></ul><h2>返回值</h2><p>该方法没有返回值，但会在已存在的列表中添加新的列表内容。</p><h2>实例</h2><p>以下实例展示了 extend()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc', 123];<br/>bList = [2009, 'manni'];<br/>aList.extend(bList)<br/><br/>print "Extended List : ", aList ;<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Extended List :  [123, 'xyz', 'zara', 'abc', 123, 2009, 'manni']<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Pythonhelp()函数	help() 函数用于查看函数或模块用途的详细说明。	<div class="article-body"><div class="article-intro" id="content"><h1>Python help() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>help()</b> 函数用于查看函数或模块用途的详细说明。</p><h2>语法</h2><p>help 语法：</p><pre><br/>help([object])<br/></pre><p>参数说明：</p><ul><li>object --  对象；</li></ul><h2>返回值</h2><p>返回对象帮助信息。</p><h2>实例</h2><p>以下实例展示了 help 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">help</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">sys</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 查看 sys 模块的帮助</span><span class="hl-code">……显示帮助信息…… &gt;&gt;&gt;</span><span class="hl-builtin">help</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 查看 str 数据类型的帮助</span><span class="hl-code">……显示帮助信息…… &gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">help</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 查看列表 list 帮助信息</span><span class="hl-code">……显示帮助信息…… &gt;&gt;&gt;</span><span class="hl-builtin">help</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">.</span><span class="hl-identifier">append</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 显示list的append方法的帮助</span><span class="hl-code">……显示帮助信息……</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.lchown()方法	os.lchown() 方法用于更改文件所有者，类似 chown，但是不追踪链接。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.lchown() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lchown() 方法用于更改文件所有者，类似 chown，但是不追踪链接。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>lchown()</b>方法语法格式如下：</p><pre><br/>os.lchown(path, uid, gid)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置权限的文件路径</p></li><li><p><b>uid</b> -- 所属用户 ID </p></li><li><p><b>gid</b> -- 所属用户组 ID </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchown() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭打开的文件<br/>os.close( fd )<br/><br/># 修改文件权限<br/># 设置文件所属用户 ID<br/>os.lchown( path, 500, -1)<br/><br/># 设置文件所属用户组 ID<br/>os.lchown( path, -1, 500)<br/><br/>print ("修改权限成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.openpty()方法	os.openpty() 方法用于打开一个新的伪终端对。返回 pty 和 tty的文件描述符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.openpty() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.openpty() 方法用于打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</p><h3>语法</h3><p><b>openpty()</b>方法语法格式如下：</p><pre><br/>os.openpty()<br/></pre><h3>参数</h3><ul><li>无</li></ul></div></div>
Pythoneval()函数	eval() 函数用来执行一个字符串表达式，并返回表达式的值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> eval() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><h3>语法</h3><p>以下是 eval() 方法的语法:</p><pre><br/>eval(expression[, globals[, locals]])<br/></pre><h3>参数</h3><ul><li>expression -- 表达式。</li><li>globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li><li>locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li></ul><h3>返回值</h3><p>返回表达式计算结果。</p><hr/><h2>实例</h2><p>以下展示了使用 eval() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-number">7</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">eval</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">3 * x</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">21</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">eval</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">pow(2,2)</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">4</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">eval</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">2 + 2</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">4</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">n</span><span class="hl-code">=</span><span class="hl-number">81</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">eval</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">n + 4</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">85</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonrepr()函数	repr() 函数将对象转化为供解释器读取的形式。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> repr() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>repr() 函数将对象转化为供解释器读取的形式。</p><h3>语法</h3><p>以下是 repr() 方法的语法:</p><pre><br/>repr(object)<br/></pre><h3>参数</h3><ul><li>object -- 对象。</li></ul><h3>返回值</h3><p>返回一个对象的 string 格式。</p><hr/><h2>实例</h2><p>以下展示了使用 repr() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">s</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">RUNOOB</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">repr</span><span class="hl-brackets">(</span><span class="hl-identifier">s</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">"</span><span class="hl-string">'RUNOOB'</span><span class="hl-quotes">"</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">dict</span><span class="hl-code"> = {</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">runoob.com</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">google</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">google.com</span><span class="hl-quotes">'</span><span class="hl-code">};&gt;&gt;&gt; </span><span class="hl-builtin">repr</span><span class="hl-brackets">(</span><span class="hl-identifier">dict</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">"</span><span class="hl-string">{'google': 'google.com', 'runoob': 'runoob.com'}</span><span class="hl-quotes">"</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3shuffle()函数	 shuffle() 方法将序列的所有元素随机排序。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> shuffle() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>shuffle()</b> 方法将序列的所有元素随机排序。</p><hr/><h2>语法</h2><p>以下是 shuffle() 方法的语法:</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">random</span><span class="hl-code"></span><span class="hl-identifier">random</span><span class="hl-code">.</span><span class="hl-identifier">shuffle</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">lst</span><span class="hl-code"> </span><span class="hl-brackets">)</span></div></div></div><p><strong>注意：</strong>shuffle()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>lst -- 列表。 </li></ul><hr/><h2>返回值</h2><p>返回随机排序后的序列。</p><hr/><h2>实例</h2><p>以下展示了使用 shuffle() 方法的实例：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">random</span><span class="hl-code"></span><span class="hl-identifier">list</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">20</span><span class="hl-code">, </span><span class="hl-number">16</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-code">;</span><span class="hl-identifier">random</span><span class="hl-code">.</span><span class="hl-identifier">shuffle</span><span class="hl-brackets">(</span><span class="hl-identifier">list</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">随机排序列表 : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">list</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">random</span><span class="hl-code">.</span><span class="hl-identifier">shuffle</span><span class="hl-brackets">(</span><span class="hl-identifier">list</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">随机排序列表 : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">list</span><span class="hl-brackets">)</span></div></div></div><p>以上实例运行后输出结果为：</p><pre><br/>随机排序列表 :  [20, 5, 16, 10]<br/>随机排序列表 :  [5, 20, 10, 16]<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
PythonTuple(元组)max()方法	Python 元组 max() 函数返回元组中元素最大值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python Tuple(元组) max()方法</h1><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p><hr/><h2>描述</h2><p>Python 元组 max() 函数返回元组中元素最大值。</p><h2>语法</h2><p>max()方法语法：</p><pre><br/>max(tuple)<br/></pre><h2>参数</h2><ul><li>tuple -- 指定的元组。</li></ul><h2>返回值</h2><p>返回元组中元素最大值。</p><h2>实例</h2><p>以下实例展示了 max()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>tuple1, tuple2 = (123, 'xyz', 'zara', 'abc'), (456, 700, 200)<br/><br/>print "Max value element : ", max(tuple1);<br/>print "Max value element : ", max(tuple2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Max value element :  zara<br/>Max value element :  700<br/></pre><p><a href="http://www.runoob.com/python/python-tuples.html"><img alt="Python 元组" class="navup" src="http://www.runoob.com/images/up.gif"/>Python 元组</a></p></div></div>
Python3center()方法	center()方法语法：	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 center()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><p>center() 方法返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</p><h3>语法</h3><p>center()方法语法：</p><pre><br/>str.center(width[, fillchar])<br/></pre><h2>参数</h2><ul><li>width -- 字符串的总宽度。</li><li>fillchar -- 填充字符。</li></ul><h2>返回值</h2><p>返回一个指定的宽度 width 居中的字符串，如果 width 小于字符串宽度直接返回字符串，否则使用 fillchar 去填充。</p><h2>实例</h2><p>以下实例展示了center()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "[www.runoob.com]"<br/><br/>print ("str.center(40, '*') : ", str.center(40, '*'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>str.center(40, '*') :  ************[www.runoob.com]************<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3replace()方法	replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 replace()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p><h2>语法</h2><p>replace()方法语法：</p><pre><br/>str.replace(old, new[, max])<br/></pre><h2>参数</h2><ul><li>old -- 将被替换的子字符串。</li><li>new  -- 新字符串，用于替换old子字符串。</li><li>max -- 可选字符串, 替换不超过 max 次</li></ul><h2>返回值</h2><p>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。</p><h2>实例</h2><p>以下实例展示了replace()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "www.w3cschool.cc"<br/>print ("菜鸟教程旧地址：", str)<br/>print ("菜鸟教程新地址：", str.replace("w3cschool.cc", "runoob.com"))<br/><br/>str = "this is string example....wow!!!"<br/>print (str.replace("is", "was", 3))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>菜鸟教程旧地址： www.w3cschool.cc<br/>菜鸟教程新地址： www.runoob.com<br/>thwas was string example....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3os.unlink()方法	os.unlink() 方法用于删除文件,如果文件是一个目录则返回一个错误。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.unlink() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.unlink() 方法用于删除文件,如果文件是一个目录则返回一个错误。</p><h3>语法</h3><p><b>unlink()</b>方法语法格式如下：</p><pre><br/>os.unlink(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 删除的文件路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 unlink() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 列出目录<br/>print ("目录为: %s" %os.listdir(os.getcwd()))<br/><br/>os.unlink("aa.txt")<br/><br/># 删除后的目录<br/>print ("删除后的目录为 : %s" %os.listdir(os.getcwd()))<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/> [ 'a1.txt','aa.txt','resume.doc']<br/>删除后的目录为 : <br/>[ 'a1.txt','resume.doc' ]<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.fsync()方法	os.fsync() 方法强制将文件描述符为fd的文件写入硬盘。在Unix, 将调用fsync()函数;在Windows, 调用 _commit()函数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fsync() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fsync() 方法强制将文件描述符为fd的文件写入硬盘。在Unix, 将调用fsync()函数;在Windows, 调用 _commit()函数。</p><p>如果你准备操作一个Python文件对象f, 首先f.flush(),然后os.fsync(f.fileno()), 确保与f相关的所有内存都写入了硬盘.在unix，Windows中有效。</p><p>Unix、Windows上可用。</p><h3>语法</h3><p><b>fsync()</b>方法语法格式如下：</p><pre><br/>os.fsync(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fsync() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 使用 fsync() 方法.<br/>os.fsync(fd)<br/><br/># 读取内容<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print ("读取的字符串为 : ", str)<br/><br/># 关闭文件<br/>os.close( fd)<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符串为 :  This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.chflags()方法	os.chflags() 方法用于设置路径的标记为数字标记。多个标记可以使用 OR 来组合起来。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.chflags() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chflags() 方法用于设置路径的标记为数字标记。多个标记可以使用 OR 来组合起来。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>chflags()</b>方法语法格式如下：</p><pre><br/>os.chflags(path, flags)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 文件名路径或目录路径。 </p></li><li><p><b>flags</b> -- 可以是以下值： </p><ul><li><b>stat.UF_NODUMP:</b>  非转储文件</li><li><b>stat.UF_IMMUTABLE:</b>  文件是只读的</li><li><b>stat.UF_APPEND:</b>     文件只能追加内容 </li><li><b>stat.UF_NOUNLINK:</b>   文件不可删除</li><li><b>stat.UF_OPAQUE:</b>    目录不透明，需要通过联合堆栈查看</li><li><b>stat.SF_ARCHIVED:</b>   可存档文件(超级用户可设) </li><li><b>stat.SF_IMMUTABLE:</b>  文件是只读的(超级用户可设)</li><li><b>stat.SF_APPEND:</b>      文件只能追加内容(超级用户可设) </li><li><b>stat.SF_NOUNLINK:</b>    文件不可删除(超级用户可设) </li><li><b>stat.SF_SNAPSHOT:</b>    快照文件(超级用户可设)</li></ul></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 chflags() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os,stat<br/><br/>path = "/tmp/foo.txt"<br/><br/># 为文件设置标记，使得它不能被重命名和删除<br/>flags = stat.SF_NOUNLINK<br/>retval = os.chflags( path, flags)<br/>print "返回值: %s" % retval<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>返回值: None<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3pow()函数	 pow() 方法返回 xy（x的y次方） 的值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> pow() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>pow()</b> 方法返回 x<sup>y</sup>（x的y次方） 的值。</p><hr/><h2>语法</h2><p>以下是 math 模块 pow() 方法的语法:</p><pre><br/>import math<br/><br/>math.pow( x, y )<br/></pre><p>内置的 pow() 方法</p><pre><br/>pow(x, y[, z])<br/></pre><p>函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p><p><strong>注意：</strong>pow() 通过内置的方法直接调用，内置方法会把参数作为整型，而 math 模块则会把参数转换为 float。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回 x<sup>y</sup>（x的y次方） 的值。<hr/><h2>实例</h2><p>以下展示了使用 pow() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.pow(100, 2) : ", math.pow(100, 2))<br/># 使用内置，查看输出结果区别<br/>print ("pow(100, 2) : ", pow(100, 2))<br/>print ("math.pow(100, -2) : ", math.pow(100, -2))<br/>print ("math.pow(2, 4) : ", math.pow(2, 4))<br/>print ("math.pow(3, 0) : ", math.pow(3, 0))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.pow(100, 2) :  10000.0<br/>pow(100, 2) :  10000<br/>math.pow(100, -2) :  0.0001<br/>math.pow(2, 4) :  16.0<br/>math.pow(3, 0) :  1.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3exp()函数	exp() 方法返回x的指数,ex。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> exp() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>exp() 方法返回x的指数,e<sup>x</sup>。</p><hr/><h2>语法</h2><p>以下是 exp() 方法的语法:</p><pre><br/>import math<br/><br/>math.exp( x )<br/></pre><p><strong>注意：</strong>exp()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回x的指数,e<sup>x</sup>。<hr/><h2>实例</h2><p>以下展示了使用 exp() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.exp(-45.17) : ", math.exp(-45.17))<br/>print ("math.exp(100.12) : ", math.exp(100.12))<br/>print ("math.exp(100.72) : ", math.exp(100.72))<br/>print ("math.exp(math.pi) : ", math.exp(math.pi))<br/></pre><p>以上实例运行后输出结果为：<pre><br/>math.exp(-45.17) :  2.4150062132629406e-20<br/>math.exp(100.12) :  3.0308436140742566e+43<br/>math.exp(100.72) :  5.522557130248187e+43<br/>math.exp(math.pi) :  23.140692632779267<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></p></div></div>
Pythonos.closerange()方法	os.closerange() 方法用于关闭所有文件描述符 fd，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.closerange() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.closerange() 方法用于关闭所有文件描述符 fd，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略。</p><h3>语法</h3><p><b>closerange()</b>方法语法格式如下：</p><pre><br/>os.closerange(fd_low, fd_high);<br/></pre><h3>参数</h3><ul><li><p><b>fd_low</b> -- 最小文件描述符</p></li><li><p><b>fd_high</b> -- 最大文件描述符</p></li></ul><p>该方法类似于：</p><pre><br/>for fd in xrange(fd_low, fd_high):<br/>    try:<br/>        os.close(fd)<br/>    except OSError:<br/>        pass<br/></pre><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 closerange() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 关闭文件<br/>os.closerange( fd, fd)<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.open()方法	os.open() 方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.open() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.open() 方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。</p><h3>语法</h3><p><b>open()</b>方法语法格式如下：</p><pre><br/>os.open(file, flags[, mode]);<br/></pre><h3>参数</h3><ul><li><p><b>file</b> --  要打开的文件</p></li><li><p><b>flags</b> --  该参数可以是以下选项，多个使用 "|" 隔开：</p><ul><li><b>os.O_RDONLY:</b> 以只读的方式打开 </li><li><b>os.O_WRONLY:</b> 以只写的方式打开 </li><li><b>os.O_RDWR :</b> 以读写的方式打开</li><li><b>os.O_NONBLOCK:</b> 打开时不阻塞</li><li><b>os.O_APPEND:</b> 以追加的方式打开</li><li><b>os.O_CREAT:</b> 创建并打开一个新文件</li><li><b>os.O_TRUNC:</b> 打开一个文件并截断它的长度为零（必须有写权限）</li><li><b>os.O_EXCL:</b> 如果指定的文件存在，返回错误</li><li><b>os.O_SHLOCK:</b> 自动获取共享锁</li><li><b>os.O_EXLOCK:</b> 自动获取独立锁</li><li><b>os.O_DIRECT:</b> 消除或减少缓存效果</li><li><b>os.O_FSYNC :</b> 同步写入</li><li><b>os.O_NOFOLLOW:</b> 不追踪软链接</li></ul></li><li><p><b>mode</b> --  类似 <a href="python3-os-chmod.html">chmod()</a>。</p></li></ul><h3>返回值</h3><p>返回新打开文件的描述符。</p><h3>实例</h3><p>以下实例演示了 open() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.rename()方法	os.rename() 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.rename() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.rename() 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</p><h3>语法</h3><p><b>rename()</b>方法语法格式如下：</p><pre><br/>os.rename(src, dst)<br/></pre><h3>参数</h3><ul><li><p><b>src</b> -- 要修改的目录名</p></li><li><p><b>dst</b> -- 修改后的目录名</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 rename() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 列出目录<br/>print "目录为: %s"%os.listdir(os.getcwd())<br/><br/># 重命名<br/>os.rename("test","test2")<br/><br/>print "重命名成功。"<br/><br/># 列出重命名后的目录<br/>print "目录为: %s" %os.listdir(os.getcwd())<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py','test' ]<br/>重命名成功。<br/>[  'a1.txt','resume.doc','a3.py','test2' ]<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythontimeasctime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time asctime()方法</h1><hr/><h2>描述</h2><p>Python time asctime() 函数接受时间元组并返回一个可读的形式为"Tue Dec 11 18:07:14 2008"（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</p><h2>语法</h2><p>asctime()方法语法：</p><pre><br/>time.asctime([t]))<br/></pre><h2>参数</h2><ul><li>t -- 9个元素的元组或者通过函数 gmtime() 或 localtime() 返回的时间值。</li></ul><h2>返回值</h2><p>返回一个可读的形式为"Tue Dec 11 18:07:14 2008"（2008年12月11日 周二18时07分14秒）的24个字符的字符串。</p><h2>实例</h2><p>以下实例展示了 asctime()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>t = time.localtime()<br/>print "time.asctime(t): %s " % time.asctime(t)<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.asctime(t): Tue Feb 17 09:42:58 2009<br/></pre></div></div>
PythonListreverse()方法	reverse() 函数用于反向列表中元素。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List reverse()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>reverse() 函数用于反向列表中元素。</p><h2>语法</h2><p>reverse()方法语法：</p><pre><br/>list.reverse()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该方法没有返回值，但是会对列表的元素进行反向排序。</p><h2>实例</h2><p>以下实例展示了 reverse()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc', 'xyz'];<br/><br/>aList.reverse();<br/>print "List : ", aList;<br/></pre><p>以上实例输出结果如下：</p><pre><br/>List :  ['xyz', 'abc', 'zara', 'xyz', 123]<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3splitlines()方法	Python splitlines() 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 splitlines()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python splitlines() 按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</p><h2>语法</h2><p>splitlines()方法语法：</p><pre><br/>str.splitlines([keepends])<br/></pre><h2>参数</h2><ul><li>keepends -- 在输出结果里是否去掉换行符('\r', '\r\n', \n')，默认为 False，不包含换行符，如果为 True，则保留换行符。</li></ul><h2>返回值</h2><p>返回一个包含各行作为元素的列表。</p><h2>实例</h2><p>以下实例展示了splitlines()函数的使用方法：</p><pre><br/>&gt;&gt;&gt; 'ab c\n\nde fg\rkl\r\n'.splitlines()<br/>['ab c', '', 'de fg', 'kl']<br/>&gt;&gt;&gt; 'ab c\n\nde fg\rkl\r\n'.splitlines(True)<br/>['ab c\n', '\n', 'de fg\r', 'kl\r\n']<br/>&gt;&gt;&gt; <br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonlower()方法	Python lower() 方法转换字符串中所有大写字符为小写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python lower()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python lower() 方法转换字符串中所有大写字符为小写。</p><h2>语法</h2><p>lower()方法语法：</p><pre><br/>str.lower()<br/></pre><h2>参数</h2><ul><li>无。</li></ul><h2>返回值</h2><p>返回将字符串中所有大写字符转换为小写后生成的字符串。</p><h2>实例</h2><p>以下实例展示了lower()的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "THIS IS STRING EXAMPLE....WOW!!!";<br/><br/>print str.lower();<br/></pre><p>以上实例输出结果如下：</p><pre><br/>this is string example....wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonlen()方法	Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python len()方法</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p><h2>语法</h2><p>len()方法语法：</p><pre><br/>len( s )<br/></pre><h2>参数</h2><ul><li>s -- 对象。</li></ul></div></div>
PythonListcount()方法	count() 方法用于统计某个元素在列表中出现的次数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List count()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>count() 方法用于统计某个元素在列表中出现的次数。</p><h2>语法</h2><p>count()方法语法：</p><pre><br/>list.count(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 列表中统计的对象。</li></ul><h2>返回值</h2><p>返回元素在列表中出现的次数。</p><h2>实例</h2><p>以下实例展示了 count()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc', 123];<br/><br/>print "Count for 123 : ", aList.count(123);<br/>print "Count for zara : ", aList.count('zara');<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Count for 123 :  2<br/>Count for zara :  1<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3os.listdir()方法	os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。这个列表以字母顺序。 它不包括 '.' 和'..' 即使它在文件夹中。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.listdir() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。这个列表以字母顺序。 它不包括 '.' 和'..' 即使它在文件夹中。</p><p>只支持在 Unix, Windows 下使用。</p><h3>语法</h3><p><b>listdir()</b>方法语法格式如下：</p><pre><br/>os.listdir(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  需要列出的目录路径</p></li></ul><h3>返回值</h3><p>返回指定路径下的文件和文件夹列表。</p><h3>实例</h3><p>以下实例演示了 listdir() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/"<br/>dirs = os.listdir( path )<br/><br/># 输出所有文件和文件夹<br/>for file in dirs:<br/>    print (file)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>test.htm<br/>stamp<br/>faq.htm<br/>_vti_txt<br/>robots.txt<br/>itemlisting<br/>resumelisting<br/>writing_effective_resume.htm<br/>advertisebusiness.htm<br/>papers<br/>resume<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.lchflags()方法	os.lchflags() 方法用于设置路径的标记为数字标记，类似 chflags()，但是没有软链接。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.lchflags() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lchflags() 方法用于设置路径的标记为数字标记，类似 chflags()，但是没有软链接。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>lchflags()</b>方法语法格式如下：</p><pre><br/>os.lchflags(path, flags)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置标记的文件路径</p></li><li><p><b>flags</b> -- 可以由一个或多个标记组合，多个使用"|"隔开：</p><ul><li><p><b>UF_NODUMP:</b> 非转储文件</p></li><li><p><b>UF_IMMUTABLE:</b> 文件是只读的</p></li><li><p><b>UF_APPEND:</b> 文件只能追加内容</p></li><li><p><b>UF_NOUNLINK:</b> 文件不可删除</p></li><li><p><b>UF_OPAQUE:</b> 目录不透明，需要通过联合堆栈查看</p></li><li><p><b>SF_ARCHIVED:</b> 可存档文件(超级用户可设)</p></li><li><p><b>SF_IMMUTABLE:</b> 文件是只读的(超级用户可设)</p></li><li><p><b>SF_APPEND:</b> 文件只能追加内容(超级用户可设)</p></li><li><p><b>SF_NOUNLINK:</b> 文件不可删除(超级用户可设)</p></li><li><p><b>SF_SNAPSHOT:</b> 快照文件(超级用户可设)</p></li></ul></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchflags() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/># 修改文件标记<br/>ret = os.lchflags(path, os.UF_IMMUTABLE )<br/><br/>print ("修改文件标记成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改文件标记成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3sqrt()函数	 sqrt() 方法返回数字x的平方根。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> sqrt() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>sqrt()</b> 方法返回数字x的平方根。</p><hr/><h2>语法</h2><p>以下是 sqrt() 方法的语法:</p><pre><br/>import math<br/><br/>math.sqrt( x )<br/></pre><p><strong>注意：</strong>sqrt()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回数字x的平方根。<hr/><h2>实例</h2><p>以下展示了使用 sqrt() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.sqrt(100) : ", math.sqrt(100))<br/>print ("math.sqrt(7) : ", math.sqrt(7))<br/>print ("math.sqrt(math.pi) : ", math.sqrt(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.sqrt(100) :  10.0<br/>math.sqrt(7) :  2.6457513110645907<br/>math.sqrt(math.pi) :  1.7724538509055159<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythontitle()方法	Python title() 方法返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。	<div class="article-body"><div class="article-intro" id="content"><h1>Python title()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python title() 方法返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。</p><h2>语法</h2><p>title()方法语法：</p><pre><br/>str.title();<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回"标题化"的字符串,就是说所有单词都是以大写开始。</p><h2>实例</h2><p>以下实例展示了 title()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/>print str.title();<br/></pre><p>以上实例输出结果如下：</p><pre><br/>This Is String Example....Wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3字典copy()方法	Python 字典 copy() 函数返回一个字典的浅复制。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 copy()方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 copy() 函数返回一个字典的浅复制。</p><h2>语法</h2><p>copy()方法语法：</p><pre><br/>dict.copy()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回一个字典的浅复制。</p><h2>实例</h2><p>以下实例展示了 copy()函数的使用方法：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-code"> = {</span><span class="hl-quotes">'</span><span class="hl-string">Name</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">Runoob</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Age</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Class</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">First</span><span class="hl-quotes">'</span><span class="hl-code">} </span><span class="hl-identifier">dict2</span><span class="hl-code"> = </span><span class="hl-identifier">dict1</span><span class="hl-code">.</span><span class="hl-identifier">copy</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">新复制的字典为 : </span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-identifier">dict2</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>新复制的字典为 :  {'Age': 7, 'Name': 'Runoob', 'Class': 'First'}<br/></pre><hr/><h2>直接赋值和 copy 的区别</h2><p>可以通过以下实例说明：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-code"> =  {</span><span class="hl-quotes">'</span><span class="hl-string">user</span><span class="hl-quotes">'</span><span class="hl-code">:</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-quotes">'</span><span class="hl-string">num</span><span class="hl-quotes">'</span><span class="hl-code">:</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-code">} </span><span class="hl-identifier">dict2</span><span class="hl-code"> = </span><span class="hl-identifier">dict1</span><span class="hl-code"> </span><span class="hl-comment"># 浅拷贝: 引用对象</span><span class="hl-code"></span><span class="hl-identifier">dict3</span><span class="hl-code"> = </span><span class="hl-identifier">dict1</span><span class="hl-code">.</span><span class="hl-identifier">copy</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span><span class="hl-code"></span><span class="hl-comment"># 修改 data 数据</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">user</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">root</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">num</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">.</span><span class="hl-identifier">remove</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 输出结果</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">dict1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">dict2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">dict3</span><span class="hl-brackets">)</span></div></div></div><p>实例中 dict2 其实是 dict1 的引用（别名），所以输出结果都是一致的，dict3 父对象进行了深拷贝，不会随dict1 修改而修改，子对象是浅拷贝所以随 dict1 的修改而修改。</p><pre><br/>{'user': 'root', 'num': [2, 3]}<br/>{'user': 'root', 'num': [2, 3]}<br/>{'user': 'runoob', 'num': [2, 3]}<br/></pre><h3>知识扩展</h3><p><a href="../w3cnote/python-understanding-dict-copy-shallow-or-deep.html" target="_blank">Python 直接赋值、浅拷贝和深度拷贝解析</a></p><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Pythonrfind()方法	Python rfind() 返回字符串最后一次出现的位置(从右向左查询)，如果没有匹配项则返回-1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python rfind()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python rfind() 返回字符串最后一次出现的位置(从右向左查询)，如果没有匹配项则返回-1。</p><h2>语法</h2><p>rfind()方法语法：</p><pre><br/>str.rfind(str, beg=0 end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 查找的字符串</li><li>beg -- 开始查找的位置，默认为 0</li><li>end -- 结束查找位置，默认为字符串的长度。</li></ul><h2>返回值</h2><p>返回字符串最后一次出现的位置，如果没有匹配项则返回-1。</p><h2>实例</h2><p>以下实例展示了rfind()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is really a string example....wow!!!";<br/>substr = "is";<br/><br/>print str.rfind(substr);<br/>print str.rfind(substr, 0, 10);<br/>print str.rfind(substr, 10, 0);<br/><br/>print str.find(substr);<br/>print str.find(substr, 0, 10);<br/>print str.find(substr, 10, 0);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>5<br/>5<br/>-1<br/>2<br/>2<br/>-1<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonfind()方法	Python find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python find()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。</p><h2>语法</h2><p>find()方法语法：</p><pre><br/>str.find(str, beg=0, end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 指定检索的字符串</li><li>beg -- 开始索引，默认为0。</li><li>end -- 结束索引，默认为字符串的长度。</li></ul></div></div>
Pythonoct()函数	oct() 函数将一个整数转换成8进制字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python oct() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>oct()</b> 函数将一个整数转换成8进制字符串。</p><h2>语法</h2><p>oct 语法：</p><pre><br/>oct(x)<br/></pre><p>参数说明：</p><ul><li>x --  整数。</li></ul><h2>返回值</h2><p>返回8进制字符串。</p><h2>实例</h2><p>以下实例展示了 oct 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">oct</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">012</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">oct</span><span class="hl-brackets">(</span><span class="hl-number">20</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">024</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">oct</span><span class="hl-brackets">(</span><span class="hl-number">15</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">017</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.dup2()方法	os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.dup2() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.dup2() 方法用于将一个文件描述符 fd 复制到另一个 fd2。</p><p> Unix, Windows 上可用。</p><h3>语法</h3><p><b>dup2()</b>方法语法格式如下：</p><pre><br/>os.dup2(fd, fd2);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 要被复制的文件描述符</p></li><li><p><b>fd2</b> -- 复制的文件描述符</p></li></ul><h3>返回值</h3><p>没有返回值。</p><h3>实例</h3><p>以下实例演示了 dup2() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 文件描述符为 1000<br/>fd2 = 1000<br/>os.dup2(fd, fd2);<br/><br/># 在新的文件描述符上插入数据<br/>os.lseek(fd2, 0, 0)<br/>str = os.read(fd2, 100)<br/>print ("读取的字符串是 : ", str)<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符串是 :  This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
PythonFileflush()方法	flush() 方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区写入。
	<div class="article-body"><div class="article-intro" id="content"><h1>Python File flush() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>flush()</b> 方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区写入。</p><p>一般情况下，文件关闭后会自动刷新缓冲区，但有时你需要在关闭前刷新它，这时就可以使用 flush() 方法。</p><h3>语法</h3><p>flush() 方法语法如下：</p><pre><br/>fileObject.flush();<br/></pre><h3>参数</h3><ul><li><p><b>无</b></p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 flush() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("runoob.txt", "wb")<br/>print "文件名为: ", fo.name<br/><br/># 刷新缓冲区<br/>fo.flush()<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/></pre><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p></div></div>
Pythonos.lseek()方法	os.lseek() 方法用于设置文件描述符 fd 当前位置为 pos, how 方式修改。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.lseek() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lseek() 方法用于设置文件描述符 fd 当前位置为 pos, how 方式修改。</p><p>在Unix，Windows中有效。</p><h3>语法</h3><p><b>lseek()</b>方法语法格式如下：</p><pre><br/>os.lseek(fd, pos, how)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> --  文件描述符。</p></li><li><p><b>pos</b> --  这是相对于给定的参数 how 在文件中的位置。。</p></li><li><p><b>how</b> --  文件内参考位置。SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lseek() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 所有 fsync() 方法<br/>os.fsync(fd)<br/><br/># 从开始位置读取字符串<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print "Read String is : ", str<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python循环语句		<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1">循环语句</span></h1><p>本章节将向大家介绍Python的循环语句，程序在一般情况下是按顺序执行的。</p><p>编程语言提供了各种控制结构，允许更复杂的执行路径。</p><p>循环语句允许我们执行一个语句或语句组多次，下面是在大多数编程语言中的循环语句的一般形式：</p><img alt="loop_architecture" height="348" src="_loop_architecture.jpg" width="304"/><p>Python提供了for循环和while循环（在Python中没有do..while循环）:</p><table class="reference"><tbody><tr><th style="width:30%">循环类型</th><th>描述</th></tr><tr><td><a href="python-while-loop.html" title="Python WHILE 循环">while 循环</a></td><td>在给定的判断条件为 true 时执行循环体，否则退出循环体。</td></tr><tr><td><a href="python-for-loop.html" title=" Python FOR 循环">for 循环</a></td><td>重复执行语句</td></tr><tr><td><a href="python-nested-loops.html" title="Python 循环全套">嵌套循环</a></td><td>你可以在while循环体中嵌套for循环</td></tr></tbody></table><br/><hr/><h2>循环控制语句</h2><p>循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：</p><table class="reference"><tbody><tr><th style="width:30%">控制语句</th><th>描述</th></tr><tr><td><a href="python-break-statement.html" title="Python break 语句">break 语句</a></td><td>在语句块执行过程中终止循环，并且跳出整个循环</td></tr><tr><td><a href="python-continue-statement.html" title="Python  语句">continue 语句</a></td><td>在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</td></tr><tr><td><a href="python-pass-statement.html" title="Python pass 语句">pass 语句</a></td><td>pass是空语句，是为了保持程序结构的完整性。</td></tr></tbody></table></div></div>
PythonListmin()方法	min() 方法返回列表元素中的最小值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List min()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>min() 方法返回列表元素中的最小值。</p><h2>语法</h2><p>min()方法语法：</p><pre><br/>min(list)<br/></pre><h2>参数</h2><ul><li>list -- 要返回最小值的列表。</li></ul><h2>返回值</h2><p>返回列表元素中的最小值。</p><h2>实例</h2><p>以下实例展示了 min()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>list1, list2 = [123, 'xyz', 'zara', 'abc'], [456, 700, 200]<br/><br/>print "min value element : ", min(list1);<br/>print "min value element : ", min(list2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>min value element :  123<br/>min value element :  200<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Pythonrjust()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python rjust()方法</h1><hr/><h2>描述</h2><p>Python rjust() 返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串。</p><h2>语法</h2><p>rjust()方法语法：</p><pre><br/>str.rjust(width[, fillchar])<br/></pre><h2>参数</h2><ul><li>width -- 指定填充指定字符后中字符串的总长度.</li><li>fillchar -- 填充的字符，默认为空格。</li></ul><h2>返回值</h2><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串</p><h2>实例</h2><p>以下实例展示了rjust()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/><br/>print str.rjust(50, '0');<br/></pre><p>以上实例输出结果如下：</p><pre><br/>000000000000000000this is string example....wow!!!<br/></pre></div></div>
Pythonmodf()函数	modf() 方法返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> modf() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>modf() 方法返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</p><hr/><h2>语法</h2><p>以下是 modf() 方法的语法:</p><pre><br/>import math<br/><br/>math.modf( x )<br/></pre><p><strong>注意：</strong>modf()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回x的整数部分与小数部分，<hr/><h2>实例</h2><p>以下展示了使用 modf() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # This will import math module<br/><br/>print "math.modf(100.12) : ", math.modf(100.12)<br/>print "math.modf(100.72) : ", math.modf(100.72)<br/>print "math.modf(119L) : ", math.modf(119L)<br/>print "math.modf(math.pi) : ", math.modf(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.modf(100.12) :  (0.12000000000000455, 100.0)<br/>math.modf(100.72) :  (0.71999999999999886, 100.0)<br/>math.modf(119L) :    (0.0, 119.0)<br/>math.modf(math.pi) :  (0.14159265358979312, 3.0)<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python获取最大值函数	执行以上代码输出结果为：	<div class="article-body"><div class="article-intro" id="content"><h1>Python 获取最大值函数</h1><p><a href="http://www.runoob.com/python3/python3-examples.html"><img alt="Document 对象参考手册" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 实例</a></p><p>以下实例中我们使用max()方法求最大值：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-comment"># Filename : test.py</span><span class="hl-code"></span><span class="hl-comment"># author by : www.runoob.com</span><span class="hl-code"></span><span class="hl-comment"># 最简单的</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 也可以对列表和元组使用</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 更多实例</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">80, 100, 1000 最大值为: </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-number">80</span><span class="hl-code">, </span><span class="hl-number">100</span><span class="hl-code">, </span><span class="hl-number">1000</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">-20, 100, 400最大值为: </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">20</span><span class="hl-code">, </span><span class="hl-number">100</span><span class="hl-code">, </span><span class="hl-number">400</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">-80, -20, -10最大值为: </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">80</span><span class="hl-code">, -</span><span class="hl-number">20</span><span class="hl-code">, -</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">0, 100, -400最大值为:</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">max</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">100</span><span class="hl-code">, -</span><span class="hl-number">400</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>执行以上代码输出结果为：</p><pre><br/>2<br/>b<br/>2<br/>2<br/>80, 100, 1000 最大值为:  1000<br/>-20, 100, 400最大值为:  400<br/>-80, -20, -10最大值为:  -10<br/>0, 100, -400最大值为: 100<br/></pre><p>max() 函数介绍：<a href="../python/func-number-max.html">Python max()</a>函数。</p><p><a href="http://www.runoob.com/python3/python3-examples.html"><img alt="Document 对象参考手册" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 实例</a></p></div></div>
Pythonrandrange()函数	 randrange() 方法返回指定递增基数集合中的一个随机数，基数缺省值为1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> randrange() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>randrange()</b> 方法返回指定递增基数集合中的一个随机数，基数缺省值为1。</p><hr/><h2>语法</h2><p>以下是 randrange() 方法的语法:</p><pre><br/>import random<br/><br/>random.randrange ([start,] stop [,step])<br/></pre><p><strong>注意：</strong>randrange()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>start  -- 指定范围内的开始值，包含在范围内。</li><li>stop  -- 指定范围内的结束值，不包含在范围内。</li><li>step  -- 指定递增基数。</li></ul><hr/><h2>返回值</h2>从给定的范围返回随机项。<hr/><h2>实例</h2><p>以下展示了使用 randrange() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import random<br/><br/># 输出 100 &lt;= number &lt; 1000 间的偶数<br/>print "randrange(100, 1000, 2) : ", random.randrange(100, 1000, 2)<br/><br/># 输出 100 &lt;= number &lt; 1000 间的其他数<br/>print "randrange(100, 1000, 3) : ", random.randrange(100, 1000, 3)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>randrange(100, 1000, 2) :  976<br/>randrange(100, 1000, 3) :  520<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonround()函数	 round() 方法返回浮点数x的四舍五入值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> round() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>round()</b> 方法返回浮点数x的四舍五入值。</p><hr/><h2>语法</h2><p>以下是 round() 方法的语法:</p><pre><br/>round( x [, n]  )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>n -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回浮点数x的四舍五入值。<hr/><h2>实例</h2><p>以下展示了使用 round() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>print "round(80.23456, 2) : ", round(80.23456, 2)<br/>print "round(100.000056, 3) : ", round(100.000056, 3)<br/>print "round(-100.000056, 3) : ", round(-100.000056, 3)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>round(80.23456, 2) :  80.23<br/>round(100.000056, 3) :  100.0<br/>round(-100.000056, 3) :  -100.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3isalpha()方法	Python isalpha() 方法检测字符串是否只由字母组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isalpha()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python isalpha() 方法检测字符串是否只由字母组成。</p><h2>语法</h2><p>isalpha()方法语法：</p><pre><br/>str.isalpha()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Pythonexec内置语句	exec 执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的 Python 代码。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> exec 内置语句</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>exec 执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的 Python 代码。</p><blockquote><p>需要说明的是在 Python2 中exec不是函数，而是一个内置语句(statement)，但是Python 2中有一个 execfile() 函数。可以理解为 Python 3 把 exec 这个 statement 和 execfile() 函数的功能够整合到一个新的 exec() 函数中去了。</p></blockquote></div></div>
Pythonbool()函数	bool() 函数用于将给定参数转换为布尔类型，如果没有参数，返回 False。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> bool() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>bool()</b> 函数用于将给定参数转换为布尔类型，如果没有参数，返回 False。</p><p>bool 是 int 的子类。</p><h3>语法</h3><p>以下是 bool() 方法的语法:</p><pre><br/>class bool([x])<br/></pre><h3>参数</h3><ul><li>x --  要进行转换的参数。</li></ul><h3>返回值</h3><p>返回 Ture 或 False。</p><hr/><h2>实例</h2><p>以下展示了使用 bool 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">bool</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">bool</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">bool</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">bool</span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">issubclass</span><span class="hl-brackets">(</span><span class="hl-identifier">bool</span><span class="hl-code">, </span><span class="hl-identifier">int</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># bool 是 int 子类</span><span class="hl-code"></span><span class="hl-reserved">True</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythontimelocaltime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time localtime()方法</h1><hr/><h2>描述</h2><p>Python time localtime() 函数类似gmtime()，作用是格式化时间戳为本地的时间。如果sec参数未输入，则以当前时间为转换标准。    DST (Daylight Savings Time) flag (-1, 0 or 1) 是否是夏令时。</p><h2>语法</h2><p>localtime()方法语法：</p><pre><br/>time.localtime([ sec ])<br/></pre><h2>参数</h2><ul><li>sec -- 转换为time.struct_time类型的对象的秒数。</li></ul><h2>返回值</h2><p>该函数没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 localtime() 函数的使用方法：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">time</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">time.localtime() : %s</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">localtime</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>time.localtime() : time.struct_time(tm_year=2016, tm_mon=11, tm_mday=27, tm_hour=10, tm_min=26, tm_sec=5, tm_wday=6, tm_yday=332, tm_isdst=0)<br/></pre></div></div>
Python3Listsort()方法	sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List sort()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p><h2>语法</h2><p>sort()方法语法：</p><pre><br/>list.sort([func])<br/></pre><h2>参数</h2><ul><li>func -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li></ul><h2>返回值</h2><p>该方法没有返回值，但是会对列表的对象进行排序。</p><h2>实例</h2><p>以下实例展示了 sort()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao', 'Baidu']<br/>list1.sort()<br/>print ("列表排序后 : ", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表排序后 :  ['Baidu', 'Google', 'Runoob', 'Taobao']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
PythonFiletruncate()方法	truncate() 方法用于截断文件，如果指定了可选参数 size，则表示截断文件为 size 个字符。
如果没有指定 size，则从当前位置起截断；截断之后 size 后面的所有字符被删除。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File truncate() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>truncate()</b> 方法用于截断文件，如果指定了可选参数 size，则表示截断文件为 size 个字符。如果没有指定 size，则从当前位置起截断；截断之后 size 后面的所有字符被删除。</p><h3>语法</h3><p>truncate() 方法语法如下：</p><pre><br/>fileObject.truncate( [ size ])<br/></pre><h3>参数</h3><ul><li><p><b>size</b> -- 可选，如果存在则文件截断为 size 字节。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 truncate() 方法的使用：</p><p>文件 runoob.txt 的内容如下：</p><pre><br/>1:www.runoob.com<br/>2:www.runoob.com<br/>3:www.runoob.com<br/>4:www.runoob.com<br/>5:www.runoob.com<br/></pre><p>循环读取文件的内容：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("runoob.txt", "r+")<br/>print "文件名为: ", fo.name<br/><br/>line = fo.readline()<br/>print "读取第一行: %s" % (line)<br/><br/># 截断剩下的字符串<br/>fo.truncate()<br/><br/># 尝试再次读取数据<br/>line = fo.readline()<br/>print "读取数据: %s" % (line)<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/>读取第一行: 1:www.runoob.com<br/><br/>读取数据:<br/></pre><p>以下实例截取 runoob.txt 文件的10个字节：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("runoob.txt", "r+")<br/>print "文件名为: ", fo.name<br/><br/># 截取10个字节<br/>fo.truncate(10)<br/><br/>str = fo.read()<br/>print "读取数据: %s" % (str)<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/>读取数据: 1:www.runo<br/></pre><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p></div></div>
Pythontimetzset()方法	标准TZ环境变量格式：	<div class="article-body"><div class="article-intro" id="content"><h1>Python time tzset()方法</h1><hr/><h2>描述</h2><p>Python time tzset() 根据环境变量TZ重新初始化时间相关设置。</p><p>标准TZ环境变量格式：</p><pre><br/>std offset [dst [offset [,start[/time], end[/time]]]]<br/></pre><h2>参数</h2><ul><li><b>std 和 dst:</b>三个或者多个时间的缩写字母。传递给 time.tzname.</li><li><b>offset:</b> 距UTC的偏移，格式： [+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}。</li><li><b>start[/time], end[/time]:</b> DST 开始生效时的日期。格式为 m.w.d — 代表日期的月份、周数和日期。w=1 指月份中的第一周，而 w=5 指月份的最后一周。'start' 和 'end' 可以是以下格式之一：<ul><li><b>Jn:</b> 儒略日 n (1 &lt;= n &lt;= 365)。闰年日（2月29）不计算在内。</li><li><b>n:</b> 儒略日 (0 &lt;= n &lt;= 365)。 闰年日（2月29）计算在内</li><li><b>Mm.n.d:</b> 日期的月份、周数和日期。w=1 指月份中的第一周，而 w=5 指月份的最后一周。</li><li><b>time:</b>（可选）DST 开始生效时的时间（24 小时制）。默认值为 02:00（指定时区的本地时间）。</li></ul></li></ul><h2>语法</h2><pre><br/>time.tzset()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数没有返回值。</p><h2>实例</h2><p>以下实例展示了 tzset() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/>import os<br/><br/>os.environ['TZ'] = 'EST+05EDT,M4.1.0,M10.5.0'<br/>time.tzset()<br/>print time.strftime('%X %x %Z')<br/><br/>os.environ['TZ'] = 'AEST-10AEDT-11,M10.5.0,M3.5.0'<br/>time.tzset()<br/>print time.strftime('%X %x %Z')<br/></pre><p>以上实例输出结果为：</p><pre><br/>13:00:40 02/17/09 EST<br/>05:00:40 02/18/09 AEDT<br/></pre></div></div>
Python3字典values()方法	Python 字典 values() 方法以列表返回字典中的所有值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 values() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 values() 方法以列表返回字典中的所有值。</p><h2>语法</h2><p>values()方法语法：</p><pre><br/>dict.values()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回字典中的所有值。</p><h2>实例</h2><p>以下实例展示了 values() 方法的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>dict = {'Sex': 'female', 'Age': 7, 'Name': 'Zara'}<br/><br/>print ("字典所有值为 : ",  list(dict.values()))<br/></pre><p>以上实例输出结果为：</p><pre><br/>字典所有值为 :  ['female', 'Zara', 7]<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Python字典(Dictionary)copy()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) copy()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) copy() 函数返回一个字典的浅复制。</p><h2>语法</h2><p>copy()方法语法：</p><pre><br/>dict.copy()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回一个字典的浅复制。</p><h2>实例</h2><p>以下实例展示了 copy()函数的使用方法：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-code"> = {</span><span class="hl-quotes">'</span><span class="hl-string">Name</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">Zara</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Age</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">7</span><span class="hl-code">}; </span><span class="hl-identifier">dict2</span><span class="hl-code"> = </span><span class="hl-identifier">dict1</span><span class="hl-code">.</span><span class="hl-identifier">copy</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">New Dictinary : %s</span><span class="hl-quotes">"</span><span class="hl-code"> %  </span><span class="hl-builtin">str</span><span class="hl-brackets">(</span><span class="hl-identifier">dict2</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>New Dictinary : {'Age': 7, 'Name': 'Zara'}<br/></pre><hr/><h2>直接赋值和 copy 的区别</h2><p>可以通过以下实例说明：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-code"> =  {</span><span class="hl-quotes">'</span><span class="hl-string">user</span><span class="hl-quotes">'</span><span class="hl-code">:</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-quotes">'</span><span class="hl-string">num</span><span class="hl-quotes">'</span><span class="hl-code">:</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-code">} </span><span class="hl-identifier">dict2</span><span class="hl-code"> = </span><span class="hl-identifier">dict1</span><span class="hl-code"> </span><span class="hl-comment"># 浅拷贝: 引用对象</span><span class="hl-code"></span><span class="hl-identifier">dict3</span><span class="hl-code"> = </span><span class="hl-identifier">dict1</span><span class="hl-code">.</span><span class="hl-identifier">copy</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 浅拷贝：深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span><span class="hl-code"></span><span class="hl-comment"># 修改 data 数据</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">user</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">root</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">dict1</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">num</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">.</span><span class="hl-identifier">remove</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 输出结果</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">dict1</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">dict2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">dict3</span><span class="hl-brackets">)</span></div></div></div><p>实例中 dict2 其实是 dict1 的引用（别名），所以输出结果都是一致的，dict3 父对象进行了深拷贝，不会随dict1 修改而修改，子对象是浅拷贝所以随 dict1 的修改而修改。</p><pre><br/>{'num': [2, 3], 'user': 'root'}<br/>{'num': [2, 3], 'user': 'root'}<br/>{'num': [2, 3], 'user': 'runoob'}<br/></pre><h3>知识扩展</h3><p><a href="../w3cnote/python-understanding-dict-copy-shallow-or-deep.html" target="_blank">Python 直接赋值、浅拷贝和深度拷贝解析</a></p></div></div>
Pythonopen()函数	函数语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python open() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python open() 函数用于打开一个文件，创建一个 <span class="marked">file</span> 对象，相关的方法才可以调用它进行读写。</p><p>更多文件操作可参考：<a href="http://www.runoob.com/python/python-files-io.html" target="_blank">Python 文件I/O</a>。</p><h3>函数语法</h3><pre><br/>open(name[, mode[, buffering]])<br/></pre><p>参数说明：</p><ul><li><p>name : 一个包含了你要访问的文件名称的字符串值。</p></li><li><p>mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</p></li><li><p>buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</p></li></ul><p>不同模式打开文件的完全列表：</p><table class="reference"><tbody><tr><th style="width:10%">模式</th><th>描述</th></tr><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h3>file 对象方法</h3><p><strong>file.read([size])</strong> size未指定则返回整个文件,如果文件大小&gt;2倍内存则有问题.f.read()读到文件尾时返回""(空字串)</p><p><strong>file.readline()</strong> 返回一行</p><p><strong>file.readlines([size]) </strong>返回包含size行的列表,size 未指定则返回全部行</p><p><strong>for line in f: print line </strong>#通过迭代器访问</p><p><strong>f.write("hello\n")</strong> #如果要写入字符串以外的数据,先将他转换为字符串.</p><p><strong>f.tell()</strong> 返回一个整数,表示当前文件指针的位置(就是到文件头的比特数).</p><p><strong>f.seek(偏移量,[起始位置])</strong> 用来移动文件指针.</p><ul><li>偏移量:单位:比特,可正可负</li><li>起始位置:0-文件头,默认值;1-当前位置;2-文件尾</li></ul></div></div>
Pythoncompile()函数	compile() 函数将一个字符串编译为字节代码。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> compile() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>compile() 函数将一个字符串编译为字节代码。</p><h3>语法</h3><p>以下是 compile() 方法的语法:</p><pre><br/>compile(source, filename, mode[, flags[, dont_inherit]])<br/></pre><h3>参数</h3><ul><li>source -- 字符串或者AST（Abstract Syntax Trees）对象。。</li><li>filename -- 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。</li><li>mode -- 指定编译代码的种类。可以指定为 exec, eval, single。</li><li>flags -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。</li><li>flags和dont_inherit是用来控制编译源码时的标志</li></ul><h3>返回值</h3><p>返回表达式执行结果。</p><hr/><h2>实例</h2><p>以下展示了使用 compile 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">str</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">for i in range(0,10): print(i)</span><span class="hl-quotes">"</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">c</span><span class="hl-code"> = </span><span class="hl-builtin">compile</span><span class="hl-brackets">(</span><span class="hl-identifier">str</span><span class="hl-code">,</span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-quotes">'</span><span class="hl-string">exec</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 编译为字节代码对象 </span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">c</span><span class="hl-code">&lt;</span><span class="hl-identifier">code</span><span class="hl-code"> </span><span class="hl-identifier">object</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt; </span><span class="hl-identifier">at</span><span class="hl-code"> </span><span class="hl-number">0</span><span class="hl-identifier">x10141e0b0</span><span class="hl-code">, </span><span class="hl-identifier">file</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-identifier">exec</span><span class="hl-brackets">(</span><span class="hl-identifier">c</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code"></span><span class="hl-number">4</span><span class="hl-code"></span><span class="hl-number">5</span><span class="hl-code"></span><span class="hl-number">6</span><span class="hl-code"></span><span class="hl-number">7</span><span class="hl-code"></span><span class="hl-number">8</span><span class="hl-code"></span><span class="hl-number">9</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">str</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">3 * 4 + 5</span><span class="hl-quotes">"</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">compile</span><span class="hl-brackets">(</span><span class="hl-identifier">str</span><span class="hl-code">,</span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-quotes">'</span><span class="hl-string">eval</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">eval</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">17</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.fstat()方法	os.fstat() 方法用于返回文件描述符fd的状态，类似 stat()。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fstat() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fstat() 方法用于返回文件描述符fd的状态，类似 stat()。</p><p>Unix，Windows上可用。</p><p>fstat 方法返回的结构:</p><ul><li><p><b>st_dev:</b> 设备信息 </p></li><li><p><b>st_ino:</b> 文件的i-node值 </p></li><li><p><b>st_mode:</b>  文件信息的掩码，包含了文件的权限信息，文件的类型信息(是普通文件还是管道文件，或者是其他的文件类型) </p></li><li><p><b>st_nlink:</b> 硬连接数 </p></li><li><p><b>st_uid:</b> 用户ID </p></li><li><p><b>st_gid:</b> 用户组 ID</p></li><li><p><b>st_rdev:</b> 设备 ID (如果指定文件) </p></li><li><p><b>st_size:</b> 文件大小，以byte为单位 </p></li><li><p><b>st_blksize:</b> 系统 I/O 块大小</p></li><li><p><b>st_blocks:</b> 文件的是由多少个 512 byte 的块构成的 </p></li><li><p><b>st_atime:</b> 文件最近的访问时间 </p></li><li><p><b>st_mtime:</b> 文件最近的修改时间 </p></li><li><p><b>st_ctime:</b> 文件状态信息的修改时间（不是文件内容的修改时间） </p></li></ul><h3>语法</h3><p><b>fstat()</b>方法语法格式如下：</p><pre><br/>os.fstat(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li></ul><h3>返回值</h3><p>返回文件描述符fd的状态。</p><h3>实例</h3><p>以下实例演示了 fstat() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 获取元组<br/>info = os.fstat(fd)<br/><br/>print ("文件信息 :", info)<br/><br/># 获取文件 uid<br/>print ("文件 UID :%d" % info.st_uid)<br/><br/># 获取文件 gid<br/>print ("文件 GID  :%d" % info.st_gid)<br/><br/># 关闭文件<br/>os.close( fd)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>文件信息 : (33261, 3753776L, 103L, 1, 0, 0, <br/>            102L, 1238783197, 1238786767, 1238786767)<br/>文件 UID :0<br/>文件 GID :0<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonisinstance()函数	isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。 	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> isinstance() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。 </p><blockquote><p>isinstance() 与 type() 区别：</p><ul><li><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p></li><li><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p></li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p></blockquote><h3>语法</h3><p>以下是 isinstance() 方法的语法:</p><pre><br/>isinstance(object, classinfo)<br/></pre><h3>参数</h3><ul><li>object -- 实例对象。</li><li>classinfo -- 可以是直接或间接类名、基本类型或者有它们组成的元组。</li></ul><h3>返回值</h3><p>如果对象的类型与参数二的类型（classinfo）相同则返回 True，否则返回 False。。</p><hr/><h2>实例</h2><p>以下展示了使用 isinstance 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-number">2</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">isinstance</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">,</span><span class="hl-identifier">int</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">isinstance</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">,</span><span class="hl-identifier">str</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">isinstance</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">,</span><span class="hl-brackets">(</span><span class="hl-identifier">str</span><span class="hl-code">,</span><span class="hl-identifier">int</span><span class="hl-code">,</span><span class="hl-identifier">list</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 是元组中的一个返回 True</span><span class="hl-code"></span><span class="hl-reserved">True</span></div></div></div><div class="example"><h2 class="example">type() 与 isinstance()区别：</h2><div class="example_code"><div class="hl-main"><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-code">:    </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-builtin">isinstance</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># returns True</span><span class="hl-code"></span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> == </span><span class="hl-identifier">A</span><span class="hl-code"> </span><span class="hl-comment"># returns True</span><span class="hl-code"></span><span class="hl-builtin">isinstance</span><span class="hl-brackets">(</span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># returns True</span><span class="hl-code"></span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> == </span><span class="hl-identifier">A</span><span class="hl-code"> </span><span class="hl-comment"># returns False</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3isnumeric()方法	isnumeric() 方法检测字符串是否只由数字组成。这种方法是只针对unicode对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isnumeric()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>isnumeric() 方法检测字符串是否只由数字组成。这种方法是只针对unicode对象。</p><p><strong>注：</strong>定义一个字符串为Unicode，只需要在字符串前添加 'u' 前缀即可，具体可以查看本章节例子。</p><h2>语法</h2><p>isnumeric()方法语法：</p><pre><br/>str.isnumeric()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Pythonrange()函数用法	range(start, stop[, step])	<div class="article-body"><div class="article-intro" id="content"><h1>Python range() 函数用法</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python range() 函数可创建一个整数列表，一般用在 for 循环中。</p><h3>函数语法</h3><pre><br/>range(start, stop[, step])<br/></pre><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>end: 计数到 end 结束，但不包括 end。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h3>实例</h3><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 从 0 开始到 10</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">11</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 从 1 开始到 11</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">30</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 步长为 5</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-code">, </span><span class="hl-number">15</span><span class="hl-code">, </span><span class="hl-number">20</span><span class="hl-code">, </span><span class="hl-number">25</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 步长为 3</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, -</span><span class="hl-number">10</span><span class="hl-code">, -</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 负数</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, -</span><span class="hl-number">1</span><span class="hl-code">, -</span><span class="hl-number">2</span><span class="hl-code">, -</span><span class="hl-number">3</span><span class="hl-code">, -</span><span class="hl-number">4</span><span class="hl-code">, -</span><span class="hl-number">5</span><span class="hl-code">, -</span><span class="hl-number">6</span><span class="hl-code">, -</span><span class="hl-number">7</span><span class="hl-code">, -</span><span class="hl-number">8</span><span class="hl-code">, -</span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">]</span></div></div></div><p>以下是 range 在 for 中的使用，循环出runoob 的每个字母:</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-builtin">len</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> :...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">... </span><span class="hl-identifier">r</span><span class="hl-code"></span><span class="hl-identifier">u</span><span class="hl-code"></span><span class="hl-identifier">n</span><span class="hl-code"></span><span class="hl-identifier">o</span><span class="hl-code"></span><span class="hl-identifier">o</span><span class="hl-code"></span><span class="hl-identifier">b</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonint()函数	int() 函数用于将一个字符串或数字转换为整型。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> int() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>int() 函数用于将一个字符串或数字转换为整型。</p><h3>语法</h3><p>以下是 int() 方法的语法:</p><pre><br/>class int(x, base=10)<br/></pre><h3>参数</h3><ul><li>x -- 字符串或数字。</li><li>base -- 进制数，默认十进制。</li></ul><h3>返回值</h3><p>返回整型数据。</p><hr/><h2>实例</h2><p>以下展示了使用 int() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 不传入参数时，得到结果0</span><span class="hl-code"></span><span class="hl-number">0</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-number">3.6</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">12</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">16</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制</span><span class="hl-code"></span><span class="hl-number">18</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">0xa</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">16</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">10</span><span class="hl-code">  &gt;&gt;&gt; </span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">10</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">8</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">8</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.rename()方法	os.rename() 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.rename() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.rename() 方法用于命名文件或目录，从 src 到 dst,如果dst是一个存在的目录, 将抛出OSError。</p><h3>语法</h3><p><b>rename()</b>方法语法格式如下：</p><pre><br/>os.rename(src, dst)<br/></pre><h3>参数</h3><ul><li><p><b>src</b> -- 要修改的目录名</p></li><li><p><b>dst</b> -- 修改后的目录名</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 rename() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 列出目录<br/>print ("目录为: %s"%os.listdir(os.getcwd()))<br/><br/># 重命名<br/>os.rename("test","test2")<br/><br/>print ("重命名成功。")<br/><br/># 列出重命名后的目录<br/>print ("目录为: %s" %os.listdir(os.getcwd()))<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py','test' ]<br/>重命名成功。<br/>[  'a1.txt','resume.doc','a3.py','test2' ]<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3rstrip()方法	rstrip() 删除 string 字符串末尾的指定字符（默认为空格）.	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 rstrip()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>rstrip() 删除 string 字符串末尾的指定字符（默认为空格）.</p><h2>语法</h2><p>rstrip()方法语法：</p><pre><br/>str.rstrip([chars])<br/></pre><h2>参数</h2><ul><li>chars -- 指定删除的字符（默认为空格）</li></ul><h2>返回值</h2><p>返回删除 string 字符串末尾的指定字符后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了rstrip()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "     this is string example....wow!!!     "<br/>print (str.rstrip())<br/>str = "*****this is string example....wow!!!*****"<br/>print (str.rstrip('*'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>     this is string example....wow!!!<br/>*****this is string example....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythongetattr()函数	getattr() 函数用于返回一个对象属性值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python getattr() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>getattr()</b> 函数用于返回一个对象属性值。</p><h2>语法</h2><p>getattr 语法：</p><pre><br/>getattr(object, name[, default])<br/></pre><h2>参数</h2><ul><li>object -- 对象。</li><li>name -- 字符串，对象属性。</li><li>default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li></ul><h2>返回值</h2><p>返回对象属性值。</p><h2>实例</h2><p>以下实例展示了 getattr 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">bar</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 获取属性 bar 值</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar2</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 属性 bar2 不存在，触发异常</span><span class="hl-code"></span><span class="hl-identifier">Traceback</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">most</span><span class="hl-code"> </span><span class="hl-identifier">recent</span><span class="hl-code"> </span><span class="hl-identifier">call</span><span class="hl-code"> </span><span class="hl-identifier">last</span><span class="hl-brackets">)</span><span class="hl-code">:  </span><span class="hl-identifier">File</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">&lt;stdin&gt;</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt;</span><span class="hl-reserved">AttributeError</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">A</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-identifier">object</span><span class="hl-code"> </span><span class="hl-identifier">has</span><span class="hl-code"> </span><span class="hl-identifier">no</span><span class="hl-code"> </span><span class="hl-identifier">attribute</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">bar2</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar2</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 属性 bar2 不存在，但设置了默认值</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonbasestring()函数	basestring() 方法是 str 和 unicode 的超类（父类），也是抽象类，因此不能被调用和实例化，但可以被用来判断一个对象是否为 str 或者 unicode 的实例，isinstance(obj, basestring) 等价于 isinstance(obj, (str, unicode))。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> basestring() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>basestring()</b> 方法是 str 和 unicode 的超类（父类），也是抽象类，因此不能被调用和实例化，但可以被用来判断一个对象是否为 str 或者 unicode 的实例，isinstance(obj, basestring) 等价于 isinstance(obj, (str, unicode))。</p><h3>语法</h3><p>以下是 basestring() 方法的语法:</p><pre><br/>basestring()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>无。</p><hr/><h2>实例</h2><p>以下展示了使用 basestring 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">isinstance</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Hello world</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">str</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">isinstance</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Hello world</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">basestring</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">True</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonhex()函数	hex() 函数用于将10进制整数转换成16进制，以字符串形式表示。	<div class="article-body"><div class="article-intro" id="content"><h1>Python hex() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>hex()</b> 函数用于将10进制整数转换成16进制，以字符串形式表示。</p><h2>语法</h2><p>hex 语法：</p><pre><br/>hex(x)<br/></pre><p>参数说明：</p><ul><li>x --  10进制整数</li></ul><h2>返回值</h2><p>返回16进制数，以字符串形式表示。</p><h2>实例</h2><p>以下实例展示了 hex 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">hex</span><span class="hl-brackets">(</span><span class="hl-number">255</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">0xff</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">hex</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">42</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">-0x2a</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">hex</span><span class="hl-brackets">(</span><span class="hl-number">1L</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">0x1L</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">hex</span><span class="hl-brackets">(</span><span class="hl-number">12</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">0xc</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-builtin">hex</span><span class="hl-brackets">(</span><span class="hl-number">12</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;      </span><span class="hl-comment"># 字符串</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.major()方法	os.major() 方法用于从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.major() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.major() 方法用于从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</p><h3>语法</h3><p><b>major()</b>方法语法格式如下：</p><pre><br/>os.major(device)<br/></pre><h3>参数</h3><ul><li><p><b>device</b> --  原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</p></li></ul><h3>返回值</h3><p>返回设备major号码。</p><h3>实例</h3><p>以下实例演示了 major() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/>path = "/var/www/html/foo.txt"<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/># 获取 major 和 minor 设备号<br/>major_dnum = os.major(info.st_dev)<br/>minor_dnum = os.minor(info.st_dev)<br/><br/>print "Major 设备号 :", major_dnum<br/>print "Minor 设备号 :", minor_dnum<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Major 设备号 : 0<br/>Minor 设备号 : 103<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythoninput()函数	
注意：input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。
除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。
注意：python3 里 input() 默认接收到的是 str 类型。	<div class="article-body"><div class="article-intro" id="content"><h1>Python input() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python input() 相等于 <span class="marked">eval(raw_input(prompt))</span> ，用来获取控制台的输入。</p><p>raw_input() 将所有输入作为字符串看待，返回字符串类型。而 input() 在对待纯数字输入时具有自己的特性，它返回所输入的数字的类型（ int, float ）。</p><blockquote><p><strong>注意：</strong>input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。</p><p>除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。</p><p><strong>注意：</strong>python3 里 input() 默认接收到的是 str 类型。</p></blockquote><h3>函数语法</h3><pre><br/>input([prompt])<br/></pre><p>参数说明：</p><ul><li>无</li></ul><h3>实例</h3><div class="example"><h2 class="example">input() 需要输入 python 表达式</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-number">123</span><span class="hl-code"> </span><span class="hl-comment"># 输入整数</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">int</span><span class="hl-quotes">'</span><span class="hl-code">&gt;               </span><span class="hl-comment"># 整型</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-quotes">"</span><span class="hl-string">runoob</span><span class="hl-quotes">"</span><span class="hl-code"> </span><span class="hl-comment"># 正确，字符串表达式</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;             </span><span class="hl-comment"># 字符串</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-identifier">runoob</span><span class="hl-code"> </span><span class="hl-comment"># 报错，不是表达式</span><span class="hl-code"></span><span class="hl-identifier">Traceback</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">most</span><span class="hl-code"> </span><span class="hl-identifier">recent</span><span class="hl-code"> </span><span class="hl-identifier">call</span><span class="hl-code"> </span><span class="hl-identifier">last</span><span class="hl-brackets">)</span><span class="hl-code">:  </span><span class="hl-identifier">File</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">&lt;stdin&gt;</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt;  </span><span class="hl-identifier">File</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">&lt;string&gt;</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt;</span><span class="hl-reserved">NameError</span><span class="hl-code">: </span><span class="hl-identifier">name</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-reserved">is</span><span class="hl-code"> </span><span class="hl-reserved">not</span><span class="hl-code"> </span><span class="hl-identifier">defined</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;</span></div></div></div><div class="example"><h2 class="example">raw_input() 将所有输入作为字符串看待</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">raw_input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-number">123</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;              </span><span class="hl-comment"># 字符串</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">raw_input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-identifier">runoob</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;              </span><span class="hl-comment"># 字符串</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonisspace()方法	Python isspace() 方法检测字符串是否只由空格组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isspace()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isspace() 方法检测字符串是否只由空格组成。</p><h2>语法</h2><p>isspace()方法语法：</p><pre><br/>str.isspace()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3Listlen()方法	len() 方法返回列表元素个数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List len()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>len() 方法返回列表元素个数。</p><h2>语法</h2><p>len()方法语法：</p><pre><br/>len(list)<br/></pre><h2>参数</h2><ul><li>list -- 要计算元素个数的列表。</li></ul><h2>返回值</h2><p>返回列表元素个数。</p><h2>实例</h2><p>以下实例展示了 len()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao']<br/>print (len(list1))<br/>list2=list(range(5)) # 创建一个 0-4 的列表<br/>print (len(list2))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>3<br/>5<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3log10()函数	log10() 方法返回以10为基数的x对数，x>0。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> log10() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>log10() 方法返回以10为基数的x对数，x&gt;0。</p><hr/><h2>语法</h2><p>以下是 log10() 方法的语法:</p><pre><br/>import math<br/><br/>math.log10( x )<br/></pre><p><strong>注意：</strong>log10()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回以10为基数的x对数，x&gt;0。<hr/><h2>实例</h2><p>以下展示了使用 log10() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.log10(100.12) : ", math.log10(100.12))<br/>print ("math.log10(100.72) : ", math.log10(100.72))<br/>print ("math.log10(119) : ", math.log10(119))<br/>print ("math.log10(math.pi) : ", math.log10(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.log10(100.12) :  2.0005208409361854<br/>math.log10(100.72) :  2.003115717099806<br/>math.log10(119) :  2.075546961392531<br/>math.log10(math.pi) :  0.4971498726941338<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3timetzset()方法	标准TZ环境变量格式：	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 time tzset()方法</h1><hr/><h2>描述</h2><p>Python time tzset() 根据环境变量TZ重新初始化时间相关设置。</p><p>标准TZ环境变量格式：</p><pre><br/>std offset [dst [offset [,start[/time], end[/time]]]]<br/></pre><h2>参数</h2><ul><li><b>std 和 dst:</b>三个或者多个时间的缩写字母。传递给 time.tzname.</li><li><b>offset:</b> 距UTC的偏移，格式： [+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}。</li><li><b>start[/time], end[/time]:</b> DST 开始生效时的日期。格式为 m.w.d — 代表日期的月份、周数和日期。w=1 指月份中的第一周，而 w=5 指月份的最后一周。'start' 和 'end' 可以是以下格式之一：<ul><li><b>Jn:</b> 儒略日 n (1 &lt;= n &lt;= 365)。闰年日（2月29）不计算在内。</li><li><b>n:</b> 儒略日 (0 &lt;= n &lt;= 365)。 闰年日（2月29）计算在内</li><li><b>Mm.n.d:</b> 日期的月份、周数和日期。w=1 指月份中的第一周，而 w=5 指月份的最后一周。</li><li><b>time:</b>（可选）DST 开始生效时的时间（24 小时制）。默认值为 02:00（指定时区的本地时间）。</li></ul></li></ul><h2>语法</h2><pre><br/>time.tzset()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数没有返回值。</p><h2>实例</h2><p>以下实例展示了 tzset() 函数的使用方法：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">time</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">os</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">environ</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">TZ</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">EST+05EDT,M4.1.0,M10.5.0</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">tzset</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">strftime</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">%X %x %Z</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">environ</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">TZ</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">AEST-10AEDT-11,M10.5.0,M3.5.0</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">tzset</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">strftime</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">%X %x %Z</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>23:25:45 04/06/16 EDT<br/>13:25:45 04/07/16 AEST<br/></pre></div></div>
Python3modf()函数	modf() 方法返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> modf() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>modf() 方法返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</p><hr/><h2>语法</h2><p>以下是 modf() 方法的语法:</p><pre><br/>import math<br/><br/>math.modf( x )<br/></pre><p><strong>注意：</strong>modf()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回x的整数部分与小数部分，<hr/><h2>实例</h2><p>以下展示了使用 modf() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.modf(100.12) : ", math.modf(100.12))<br/>print ("math.modf(100.72) : ", math.modf(100.72))<br/>print ("math.modf(119) : ", math.modf(119))<br/>print ("math.modf(math.pi) : ", math.modf(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.modf(100.12) :  (0.12000000000000455, 100.0)<br/>math.modf(100.72) :  (0.7199999999999989, 100.0)<br/>math.modf(119) :  (0.0, 119.0)<br/>math.modf(math.pi) :  (0.14159265358979312, 3.0)<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonshuffle()函数	 shuffle() 方法将序列的所有元素随机排序。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> shuffle() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>shuffle()</b> 方法将序列的所有元素随机排序。</p><hr/><h2>语法</h2><p>以下是 shuffle() 方法的语法:</p><pre><br/>import random<br/><br/>random.shuffle (lst )<br/></pre><p><strong>注意：</strong>shuffle()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>lst -- 可以是一个序列或者元组。 </li></ul><hr/><h2>返回值</h2><p>返回随机排序后的序列。</p><hr/><h2>实例</h2><p>以下展示了使用 shuffle() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import random<br/><br/>list = [20, 16, 10, 5];<br/>random.shuffle(list)<br/>print "随机排序列表 : ",  list<br/><br/>random.shuffle(list)<br/>print "随机排序列表 : ",  list<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>随机排序列表 :  [16, 5, 10, 20]<br/>随机排序列表 :  [16, 5, 20, 10]<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3os.lstat()方法	os.lstat() 方法用于类似 stat() 返回文件的信息,但是没有符号链接。在某些平台上，这是fstat的别名，例如 Windows。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.lstat() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lstat() 方法用于类似 stat() 返回文件的信息,但是没有符号链接。在某些平台上，这是fstat的别名，例如 Windows。</p><h3>语法</h3><p><b>lstat()</b>方法语法格式如下：</p><pre><br/>os.lstat(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  要返回信息的文件。</p></li></ul><h3>返回值</h3><p>返回文件信息。</p><h3>实例</h3><p>以下实例演示了 lstat() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭打开的文件<br/>os.close( fd )<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/>print ("文件信息 :", info)<br/><br/># 获取文件 uid<br/>print ("文件 UID  :%d" % info.st_uid)<br/><br/># 获取文件 gid<br/>print ("文件 GID :%d" % info.st_gid)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>文件信息 : (33261, 3450178L, 103L, 1, 500, 500, 0L, <br/>             1238866944, 1238866944, 1238948312)<br/>文件 UID :500<br/>文件 GID :500<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.renames()方法	os.renames() 方法用于递归重命名目录或文件。类似rename()。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.renames() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.renames() 方法用于递归重命名目录或文件。类似rename()。</p><h3>语法</h3><p><b>renames()</b>方法语法格式如下：</p><pre><br/>os.renames(old, new)<br/></pre><h3>参数</h3><ul><li><p><b>old</b> -- 要重命名的目录</p></li><li><p><b>new</b> --文件或目录的新名字。甚至可以是包含在目录中的文件，或者完整的目录树。</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 renames() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/>print ("当前目录为: %s" %os.getcwd())<br/><br/># 列出目录<br/>print ("目录为: %s"%os.listdir(os.getcwd()))<br/><br/># 重命名 "aa1.txt"<br/>os.renames("aa1.txt","newdir/aanew.txt")<br/><br/>print ("重命名成功。")<br/><br/># 列出重命名的文件 "aa1.txt"<br/>print ("目录为: %s" %os.listdir(os.getcwd()))<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前目录为: /tmp<br/>目录为:<br/> [  'a1.txt','resume.doc','a3.py','aa1.txt','Administrator','newdir','amrood.admin' ]<br/>重命名成功。<br/>目录为:<br/> [  'a1.txt','resume.doc','a3.py','Administrator','newdir','amrood.admin' ]<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonlog()函数	log() 方法返回x的自然对数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> log() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>log() 方法返回x的自然对数。</p><hr/><h2>语法</h2><p>以下是 log() 方法的语法:</p><pre><br/>import math<br/><br/>math.log( x )<br/></pre><p><strong>注意：</strong>log()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回x的自然对数，x&gt;0。<hr/><h2>实例</h2><p>以下展示了使用 log() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # This will import math module<br/><br/>print "math.log(100.12) : ", math.log(100.12)<br/>print "math.log(100.72) : ", math.log(100.72)<br/>print "math.log(119L) : ", math.log(119L)<br/>print "math.log(math.pi) : ", math.log(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.log(100.12) :  4.60636946656<br/>math.log(100.72) :  4.61234438974<br/>math.log(119L) :  4.77912349311<br/>math.log(math.pi) :  1.14472988585<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3Listremove()方法	remove() 函数用于移除列表中某个值的第一个匹配项。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List remove()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>remove() 函数用于移除列表中某个值的第一个匹配项。</p><h2>语法</h2><p>remove()方法语法：</p><pre><br/>list.remove(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 列表中要移除的对象。</li></ul><h2>返回值</h2><p>该方法没有返回值但是会移除两种中的某个值的第一个匹配项。</p><h2>实例</h2><p>以下实例展示了 remove()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao', 'Baidu']<br/>list1.remove('Taobao')<br/>print ("列表现在为 : ", list1)<br/>list1.remove('Baidu')<br/>print ("列表现在为 : ", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表现在为 :  ['Google', 'Runoob', 'Baidu']<br/>列表现在为 :  ['Google', 'Runoob']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Pythonos.unlink()方法	os.unlink() 方法用于删除文件,如果文件是一个目录则返回一个错误。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.unlink() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.unlink() 方法用于删除文件,如果文件是一个目录则返回一个错误。</p><h3>语法</h3><p><b>unlink()</b>方法语法格式如下：</p><pre><br/>os.unlink(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 删除的文件路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 unlink() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 列出目录<br/>print "目录为: %s" %os.listdir(os.getcwd())<br/><br/>os.unlink("aa.txt")<br/><br/># 删除后的目录<br/>print "删除后的目录为 : %s" %os.listdir(os.getcwd())<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/> [ 'a1.txt','aa.txt','resume.doc']<br/>删除后的目录为 : <br/>[ 'a1.txt','resume.doc' ]<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3reversed函数	reversed 函数返回一个反转的迭代器。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> reversed 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p>reversed 函数返回一个反转的迭代器。</p></div></div>
Python3islower()方法	islower() 方法检测字符串是否由小写字母组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 islower()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>islower() 方法检测字符串是否由小写字母组成。</p><h2>语法</h2><p>islower()方法语法：</p><pre><br/>str.islower()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3max()函数	max() 方法返回给定参数的最大值，参数可以为序列。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> max() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>max() 方法返回给定参数的最大值，参数可以为序列。</p><hr/><h2>语法</h2><p>以下是 max() 方法的语法:</p><pre><br/>max( x, y, z, .... )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回给定参数的最大值。<hr/><h2>实例</h2><p>以下展示了使用 max() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>print ("max(80, 100, 1000) : ", max(80, 100, 1000))<br/>print ("max(-20, 100, 400) : ", max(-20, 100, 400))<br/>print ("max(-80, -20, -10) : ", max(-80, -20, -10))<br/>print ("max(0, 100, -400) : ", max(0, 100, -400))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>max(80, 100, 1000) :  1000<br/>max(-20, 100, 400) :  400<br/>max(-80, -20, -10) :  -10<br/>max(0, 100, -400) :  100<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3Listappend()方法	append() 方法用于在列表末尾添加新的对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List append()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>append() 方法用于在列表末尾添加新的对象。</p><h2>语法</h2><p>append()方法语法：</p><pre><br/>list.append(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 添加到列表末尾的对象。</li></ul><h2>返回值</h2><p>该方法无返回值，但是会修改原来的列表。</p><h2>实例</h2><p>以下实例展示了 append()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao']<br/>list1.append('Baidu')<br/>print ("更新后的列表 : ", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>更新后的列表 :  ['Google', 'Runoob', 'Taobao', 'Baidu']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Pythonabs()函数	abs() 函数返回数字的绝对值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> abs() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>abs() 函数返回数字的绝对值。</p><hr/><h2>语法</h2><p>以下是 abs() 方法的语法:</p><pre><br/>abs( x )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>函数返回x（数字）的绝对值。<hr/><h2>实例</h2><p>以下展示了使用 abs() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">abs(-45) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">abs</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">45</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">abs(100.12) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">abs</span><span class="hl-brackets">(</span><span class="hl-number">100.12</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">abs(119L) : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-builtin">abs</span><span class="hl-brackets">(</span><span class="hl-number">119L</span><span class="hl-brackets">)</span></div></div></div><p>以上实例运行后输出结果为：</p><pre><br/>abs(-45) :  45<br/>abs(100.12) :  100.12<br/>abs(119L) :  119<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonsqrt()函数	 sqrt() 方法返回数字x的平方根。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> sqrt() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>sqrt()</b> 方法返回数字x的平方根。</p><hr/><h2>语法</h2><p>以下是 sqrt() 方法的语法:</p><pre><br/>import math<br/><br/>math.sqrt( x )<br/></pre><p><strong>注意：</strong>sqrt()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回数字x的平方根。<hr/><h2>实例</h2><p>以下展示了使用 sqrt() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # This will import math module<br/><br/>print "math.sqrt(100) : ", math.sqrt(100)<br/>print "math.sqrt(7) : ", math.sqrt(7)<br/>print "math.sqrt(math.pi) : ", math.sqrt(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.sqrt(100) :  10.0<br/>math.sqrt(7) :  2.64575131106<br/>math.sqrt(math.pi) :  1.77245385091<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3Filereadlines()方法	readlines() 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for... in ... 结构进行处理。
如果碰到结束符 EOF 则返回空字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File readlines() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>readlines()</b> 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for... in ... 结构进行处理。如果碰到结束符 EOF 则返回空字符串。</p><p>如果碰到结束符 EOF 则返回空字符串。</p></div></div>
Python3rindex()方法	rindex() 返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 rindex()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>rindex() 返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常，你可以指定可选参数[beg:end]设置查找的区间。</p><h2>语法</h2><p>rindex()方法语法：</p><pre><br/>str.rindex(str, beg=0 end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 查找的字符串</li><li>beg -- 开始查找的位置，默认为0</li><li>end -- 结束查找位置，默认为字符串的长度。</li></ul><h2>返回值</h2><p>返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常。</p><h2>实例</h2><p>以下实例展示了rindex()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/>str1 = "this is really a string example....wow!!!"<br/>str2 = "is"<br/><br/>print (str1.rindex(str2))<br/>print (str1.rindex(str2,10))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>5<br/>Traceback (most recent call last):<br/>  File "test.py", line 6, in &lt;module&gt;<br/>    print (str1.rindex(str2,10))<br/>ValueError: substring not found<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3endswith()方法	endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 endswith()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。</p><h2>语法</h2><p>endswith()方法语法：</p><pre><br/>str.endswith(suffix[, start[, end]])<br/></pre><h2>参数</h2><ul><li>suffix -- 该参数可以是一个字符串或者是一个元素。</li><li>start -- 字符串中的开始位置。</li><li>end -- 字符中结束位置。</li></ul><h2>返回值</h2><p>如果字符串含有指定的后缀返回True，否则返回False。</p><h2>实例</h2><p>以下实例展示了endswith()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>Str='Runoob example....wow!!!'<br/>suffix='!!'<br/>print (Str.endswith(suffix))<br/>print (Str.endswith(suffix,20))<br/>suffix='run'<br/>print (Str.endswith(suffix))<br/>print (Str.endswith(suffix, 0, 19))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>True<br/>True<br/>False<br/>False<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonfloor()函数	floor() 返回数字的下舍整数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> floor() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>floor() 返回数字的下舍整数。</p><hr/><h2>语法</h2><p>以下是 floor() 方法的语法:</p><pre><br/>import math<br/><br/>math.floor( x )<br/></pre><p><strong>注意：</strong>floor()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回数字的下舍整数。<hr/><h2>实例</h2><p>以下展示了使用 floor() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # This will import math module<br/><br/>print "math.floor(-45.17) : ", math.floor(-45.17)<br/>print "math.floor(100.12) : ", math.floor(100.12)<br/>print "math.floor(100.72) : ", math.floor(100.72)<br/>print "math.floor(119L) : ", math.floor(119L)<br/>print "math.floor(math.pi) : ", math.floor(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.floor(-45.17) :  -46.0<br/>math.floor(100.12) :  100.0<br/>math.floor(100.72) :  100.0<br/>math.floor(119L) :  119.0<br/>math.floor(math.pi) :  3.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonos.lchown()方法	os.lchown() 方法用于更改文件所有者，类似 chown，但是不追踪链接。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.lchown() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lchown() 方法用于更改文件所有者，类似 chown，但是不追踪链接。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>lchown()</b>方法语法格式如下：</p><pre><br/>os.lchown(path, uid, gid)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置权限的文件路径</p></li><li><p><b>uid</b> -- 所属用户 ID </p></li><li><p><b>gid</b> -- 所属用户组 ID </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchown() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭打开的文件<br/>os.close( fd )<br/><br/># 修改文件权限<br/># 设置文件所属用户 ID<br/>os.lchown( path, 500, -1)<br/><br/># 设置文件所属用户组 ID<br/>os.lchown( path, -1, 500)<br/><br/>print "修改权限成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.fstatvfs()方法	os.fstatvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息，类似 statvfs()。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fstatvfs() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fstatvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息，类似 statvfs()。</p><p>Unix上可用。</p><p>fstatvfs 方法返回的结构:</p><ul><li><p><b>f_bsize:</b> 文件系统块大小 </p></li><li><p><b>f_frsize:</b> 分栈大小 </p></li><li><p><b>f_blocks:</b> 文件系统数据块总数</p></li><li><p><b>f_bfree:</b> 可用块数</p></li><li><p><b>f_bavail:</b>非超级用户可获取的块数</p></li><li><p><b>f_files:</b> 文件结点总数 </p></li><li><p><b>f_ffree:</b> 可用文件结点数 </p></li><li><p><b>f_favail:</b> 非超级用户的可用文件结点数 </p></li><li><p><b>f_fsid:</b> 文件系统标识 ID</p></li><li><p><b>f_flag:</b> 挂载标记</p></li><li><p><b>f_namemax:</b> 最大文件长度 </p></li></ul><h3>语法</h3><p><b>fstatvfs()</b>方法语法格式如下：</p><pre><br/>os.fstatvfs(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li></ul><h3>返回值</h3><p>返回包含文件描述符fd的文件的文件系统的信息。</p><h3>实例</h3><p>以下实例演示了 fstatvfs() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 获取元组<br/>info = os.fstatvfs(fd)<br/><br/>print "文件信息 :", info<br/><br/># 获取文件名最大长度<br/>print "文件名最大长度 :%d" % info.f_namemax<br/><br/># 获取可用块数<br/>print "可用块数 :%d" % info.f_bfree<br/><br/># 关闭文件<br/>os.close( fd)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>文件信息 : (4096, 4096, 2621440L, 1113266L, 1113266L, <br/>             8929602L, 8764252L, 8764252L, 0, 255)<br/>文件名最大长度 :255<br/>可用块数 :1113266<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.getcwd()方法	os.getcwd() 方法用于返回当前工作目录。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.getcwd() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.getcwd() 方法用于返回当前工作目录。</p><h3>语法</h3><p><b>getcwd()</b>方法语法格式如下：</p><pre><br/>os.getcwd()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>返回当前进程的工作目录。</p><h3>实例</h3><p>以下实例演示了 getcwd() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 切换到 "/var/www/html" 目录<br/>os.chdir("/var/www/html" )<br/><br/># 打印当前目录<br/>print "当前工作目录 : %s" % os.getcwd()<br/><br/># 打开 "/tmp"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 使用 os.fchdir() 方法修改目录<br/>os.fchdir(fd)<br/><br/># 打印当前目录<br/>print "当前工作目录 : %s" % os.getcwd()<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录 : /var/www/html<br/>当前工作目录 : /tmp<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3len()方法	Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 len()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。</p><h2>语法</h2><p>len()方法语法：</p><pre><br/>len( s )<br/></pre><h2>参数</h2><ul><li>s -- 对象。</li></ul></div></div>
Python3random()函数	 random() 方法返回随机生成的一个实数，它在[0,1)范围内。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> random() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>random()</b> 方法返回随机生成的一个实数，它在[0,1)范围内。</p><hr/><h2>语法</h2><p>以下是 random() 方法的语法:</p><pre><br/>import random<br/><br/>random.random()<br/></pre><p><strong>注意：</strong>random()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>无</li></ul><hr/><h2>返回值</h2>返回随机生成的一个实数，它在[0,1)范围内。<hr/><h2>实例</h2><p>以下展示了使用 random() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import random<br/><br/># 第一个随机数<br/>print ("random() : ", random.random())<br/><br/># 第二个随机数<br/>print ("random() : ", random.random())<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>random() :  0.09690599908884856<br/>random() :  0.8732120512570916<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python__import__()函数	__import__() 函数用于动态加载类和函数 。	<div class="article-body"><div class="article-intro" id="content"><h1>Python __import__() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>__import__()</b> 函数用于动态加载类和函数 。</p><p>如果一个模块经常变化就可以使用 __import__() 来动态载入。</p><h2>语法</h2><p>__import__ 语法：</p><pre><br/>__import__(name[, globals[, locals[, fromlist[, level]]]])<br/></pre><p>参数说明：</p><ul><li>name -- 模块名</li></ul><h2>返回值</h2><p>返回元组列表。</p><h2>实例</h2><p>以下实例展示了 __import__ 的使用方法：</p><div class="example"><h2 class="example">a.py 文件代码：</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/env python    </span><span class="hl-code"></span><span class="hl-comment">#encoding: utf-8  </span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">os</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">在 a.py 文件中 %s</span><span class="hl-quotes">'</span><span class="hl-code"> % </span><span class="hl-builtin">id</span><span class="hl-brackets">(</span><span class="hl-identifier">os</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><div class="example"><h2 class="example">test.py 文件代码：</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/env python    </span><span class="hl-code"></span><span class="hl-comment">#encoding: utf-8  </span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">sys</span><span class="hl-code"></span><span class="hl-builtin">__import__</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 导入 a.py 模块</span></div></div></div><p>执行 test.py  文件，输出结果为：</p><pre><br/>在 a.py 文件中 4394716136</pre><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonatan2()函数	 atan2() 返回给定的 X 及 Y 坐标值的反正切值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> atan2() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>atan2()</b> 返回给定的 X 及 Y 坐标值的反正切值。</p><hr/><h2>语法</h2><p>以下是 atan2() 方法的语法:</p><pre><br/>import math<br/><br/>math.atan2(y, x)<br/></pre><p><strong>注意：</strong>atan2()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li><li>y -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回给定的 X 及 Y 坐标值的反正切值。</p><hr/><h2>实例</h2><p>以下展示了使用 atan2() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "atan2(-0.50,-0.50) : ",  math.atan2(-0.50,-0.50)<br/>print "atan2(0.50,0.50) : ",  math.atan2(0.50,0.50)<br/>print "atan2(5,5) : ",  math.atan2(5,5)<br/>print "atan2(-10,10) : ",  math.atan2(-10,10)<br/>print "atan2(10,20) : ",  math.atan2(10,20)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>atan2(-0.50,-0.50) :  -2.35619449019<br/>atan2(0.50,0.50) :  0.785398163397<br/>atan2(5,5) :  0.785398163397<br/>atan2(-10,10) :  -0.785398163397<br/>atan2(10,20) :  0.463647609001<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3enumerate()函数	enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> enumerate() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><h3>语法</h3><p>以下是 enumerate() 方法的语法:</p><pre><br/>enumerate(sequence, [start=0])<br/></pre><h3>参数</h3><ul><li>sequence -- 一个序列、迭代器或其他支持迭代对象。</li><li>start -- 下标起始位置。</li></ul><h3>返回值</h3><p>返回 enumerate(枚举) 对象。</p><hr/><h2>实例</h2><p>以下展示了使用 enumerate() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">seasons</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">Spring</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Summer</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Fall</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Winter</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">enumerate</span><span class="hl-brackets">(</span><span class="hl-identifier">seasons</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Spring</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Summer</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Fall</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Winter</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">enumerate</span><span class="hl-brackets">(</span><span class="hl-identifier">seasons</span><span class="hl-code">, </span><span class="hl-identifier">start</span><span class="hl-code">=</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 小标从 1 开始</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Spring</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Summer</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Fall</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Winter</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span></div></div></div><div class="example"><h2 class="example">普通的 for 循环</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">i</span><span class="hl-code"> = </span><span class="hl-number">0</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">seq</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">element</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-identifier">seq</span><span class="hl-code">:...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">seq</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">...     </span><span class="hl-identifier">i</span><span class="hl-code"> += </span><span class="hl-number">1</span><span class="hl-code">... </span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-identifier">one</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">two</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"> </span><span class="hl-identifier">three</span></div></div></div><div class="example"><h2 class="example">for 循环使用 enumerate</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">seq</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">element</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">enumerate</span><span class="hl-brackets">(</span><span class="hl-identifier">seq</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">seq</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">... </span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-identifier">one</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">two</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"> </span><span class="hl-identifier">three</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p></div></div>
Python3os.link()方法	os.link() 方法用于创建硬链接，名为参数 dst，指向参数 src。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.link() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.link() 方法用于创建硬链接，名为参数 dst，指向参数 src。</p><p>该方法对于创建一个已存在文件的拷贝是非常有用的。</p><p>只支持在 Unix, Windows 下使用。</p><h3>语法</h3><p><b>link()</b>方法语法格式如下：</p><pre><br/>os.link(src, dst)<br/></pre><h3>参数</h3><ul><li><p><b>src</b> --  用于创建硬连接的源地址</p></li><li><p><b>dst</b> -- 用于创建硬连接的目标地址 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 link() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/># 创建以上文件的拷贝<br/>dst = "/tmp/foo.txt"<br/>os.link( path, dst)<br/><br/>print ("创建硬链接成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>创建硬链接成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonmin()函数	min() 方法返回给定参数的最小值，参数可以为序列。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> min() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>min() 方法返回给定参数的最小值，参数可以为序列。</p><hr/><h2>语法</h2><p>以下是 min() 方法的语法:</p><pre><br/>min( x, y, z, .... )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回给定参数的最小值。<hr/><h2>实例</h2><p>以下展示了使用 min() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>print "min(80, 100, 1000) : ", min(80, 100, 1000)<br/>print "min(-20, 100, 400) : ", min(-20, 100, 400)<br/>print "min(-80, -20, -10) : ", min(-80, -20, -10)<br/>print "min(0, 100, -400) : ", min(0, 100, -400)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>min(80, 100, 1000) :  80<br/>min(-20, 100, 400) :  -20<br/>min(-80, -20, -10) :  -80<br/>min(0, 100, -400) :  -400<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3istitle()方法	istitle() 方法检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 istitle()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>istitle() 方法检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。</p><h2>语法</h2><p>istitle()方法语法：</p><pre><br/>str.istitle()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
PythonFilereadline()方法	readline() 方法用于从文件读取整行，包括 "\n" 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 "\n" 字符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File readline() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>readline()</b> 方法用于从文件读取整行，包括 "\n" 字符。如果指定了一个非负数的参数，则返回指定大小的字节数，包括 "\n" 字符。</p></div></div>
Python字典(Dictionary)update()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) update()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) update() 函数把字典dict2的键/值对更新到dict里。</p><h2>语法</h2><p>update()方法语法：</p><pre><br/>dict.update(dict2)<br/></pre><h2>参数</h2><ul><li>dict2 -- 添加到指定字典dict里的字典。</li></ul><h2>返回值</h2><p>该方法没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 update()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7}<br/>dict2 = {'Sex': 'female' }<br/><br/>dict.update(dict2)<br/>print "Value : %s" %  dict<br/></pre><p>以上实例输出结果为：</p><pre><br/>Value : {'Age': 7, 'Name': 'Zara', 'Sex': 'female'}<br/></pre></div></div>
Python3Listreverse()方法	reverse() 函数用于反向列表中元素。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List reverse()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>reverse() 函数用于反向列表中元素。</p><h2>语法</h2><p>reverse()方法语法：</p><pre><br/>list.reverse()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该方法没有返回值，但是会对列表的元素进行反向排序。</p><h2>实例</h2><p>以下实例展示了 reverse()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao', 'Baidu']<br/>list1.reverse()<br/>print ("列表反转后: ", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表反转后:  ['Baidu', 'Taobao', 'Runoob', 'Google']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3字典setdefault()方法	Python 字典 setdefault() 方法和get()方法类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 setdefault() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 setdefault() 方法和<a href="python3-att-dictionary-get.html">get()方法</a>类似, 如果键不已经存在于字典中，将会添加键并将值设为默认值。</p><h2>语法</h2><p>setdefault()方法语法：</p><pre><br/>dict.setdefault(key, default=None)<br/></pre><h2>参数</h2><ul><li>key -- 查找的键值。</li><li>default -- 键不存在时，设置的默认键值。</li></ul><h2>返回值</h2><p>如果 key 在 字典中，返回对应的值。如果不在字典中，则插入 key 及设置的默认值 default，并返回 default ，default 默认值为 None。</p><h2>实例</h2><p>以下实例展示了 setdefault() 方法的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>dict = {'Name': 'Runoob', 'Age': 7}<br/><br/>print ("Age 键的值为 : %s" %  dict.setdefault('Age', None))<br/>print ("Sex 键的值为 : %s" %  dict.setdefault('Sex', None))<br/>print ("新字典为：", dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>Age 键的值为 : 7<br/>Sex 键的值为 : None<br/>新字典为： {'Age': 7, 'Name': 'Runoob', 'Sex': None}<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Python3startswith()方法	startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 startswith()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。</p><h2>语法</h2><p>startswith()方法语法：</p><pre><br/>str.startswith(str, beg=0,end=len(string));<br/></pre><h2>参数</h2><ul><li>str -- 检测的字符串。</li><li>strbeg -- 可选参数用于设置字符串检测的起始位置。</li><li>strend -- 可选参数用于设置字符串检测的结束位置。</li></ul><h2>返回值</h2><p>如果检测到字符串则返回True，否则返回False。</p><h2>实例</h2><p>以下实例展示了startswith()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example....wow!!!"<br/>print (str.startswith( 'this' ))<br/>print (str.startswith( 'string', 8 ))<br/>print (str.startswith( 'this', 2, 4 ))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>True<br/>True<br/>False<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3Filetell()方法	tell() 方法返回文件的当前位置，即文件指针当前位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File tell() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>tell()</b> 方法返回文件的当前位置，即文件指针当前位置。</p></div></div>
Pythonchr()函数	chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> chr() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p><h3>语法</h3><p>以下是 chr() 方法的语法:</p><pre><br/>chr(i)<br/></pre><h3>参数</h3><ul><li>i -- 可以是10进制也可以是16进制的形式的数字。</li></ul><h3>返回值</h3><p>返回值是当前整数对应的ascii字符。</p><hr/><h2>实例</h2><p>以下展示了使用 chr() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-builtin">chr</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-identifier">x30</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-builtin">chr</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-identifier">x31</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-builtin">chr</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-identifier">x61</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 十六进制</span><span class="hl-code"></span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">a</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-builtin">chr</span><span class="hl-brackets">(</span><span class="hl-number">48</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-builtin">chr</span><span class="hl-brackets">(</span><span class="hl-number">49</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-builtin">chr</span><span class="hl-brackets">(</span><span class="hl-number">97</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 十进制</span><span class="hl-code"></span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">a</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
PythonListremove()方法	remove() 函数用于移除列表中某个值的第一个匹配项。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List remove()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>remove() 函数用于移除列表中某个值的第一个匹配项。</p><h2>语法</h2><p>remove()方法语法：</p><pre><br/>list.remove(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 列表中要移除的对象。</li></ul><h2>返回值</h2><p>该方法没有返回值但是会移除列表中的某个值的第一个匹配项。</p><h2>实例</h2><p>以下实例展示了 remove()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc', 'xyz'];<br/><br/>aList.remove('xyz');<br/>print "List : ", aList;<br/>aList.remove('abc');<br/>print "List : ", aList;<br/></pre><p>以上实例输出结果如下：</p><pre><br/>List :  [123, 'zara', 'abc', 'xyz']<br/>List :  [123, 'zara', 'xyz']<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Pythoncapitalize()方法	Python capitalize()将字符串的第一个字母变成大写,其他字母变小写。对于 8 位字节编码需要根据本地环境。	<div class="article-body"><div class="article-intro" id="content"><h1>Python capitalize()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python capitalize()将字符串的第一个字母变成大写,其他字母变小写。对于 8 位字节编码需要根据本地环境。</p><h2>语法</h2><p>capitalize()方法语法：</p><pre><br/>str.capitalize()<br/></pre><h2>参数</h2><ul><li>无。</li></ul><h2>返回值</h2><p>该方法返回一个首字母大写的字符串。</p><h2>实例</h2><p>以下实例展示了capitalize()方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">s</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">a, B</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">s</span><span class="hl-code">.</span><span class="hl-identifier">capitalize</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">A, b</span><span class="hl-quotes">'</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">s</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string"> a, B</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-comment"># a 前面有空格</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">s</span><span class="hl-code">.</span><span class="hl-identifier">capitalize</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string"> a, b</span><span class="hl-quotes">'</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">s</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">a, BCD</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">s</span><span class="hl-code">.</span><span class="hl-identifier">capitalize</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">A, bcd</span><span class="hl-quotes">'</span></div></div></div><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonos.write()方法	os.write() 方法用于写入字符串到文件描述符 fd 中. 返回实际写入的字符串长度。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.write() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.write() 方法用于写入字符串到文件描述符 fd 中. 返回实际写入的字符串长度。</p><p>在Unix中有效。</p><h3>语法</h3><p><b>write()</b>方法语法格式如下：</p><pre><br/>os.write(fd, str)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li><li><p><b>str</b> -- 写入的字符串。</p></li></ul><h3>返回值</h3><p>该方法返回写入的实际位数。</p><h3>实例</h3><p>以下实例演示了 write() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open("f1.txt",os.O_RDWR|os.O_CREAT)<br/><br/># 写入字符串<br/>ret = os.write(fd,"This is runoob.com site")<br/><br/># 输入返回值<br/>print "写入的位数为: "<br/>print  ret<br/><br/>print "写入成功"<br/><br/># 关闭文件<br/>os.close(fd)<br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>写入的位数为: <br/>23<br/>写入成功<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonsorted()函数	sorted() 函数对所有可迭代的对象进行排序操作。	<div class="article-body"><div class="article-intro" id="content"><h1>Python sorted() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>sorted()</b> 函数对所有可迭代的对象进行排序操作。</p><blockquote><p><strong>sort 与 sorted 区别：</strong></p><p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p><p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p></blockquote><h2>语法</h2><p>sorted 语法：</p><pre><br/>sorted(iterable[, cmp[, key[, reverse]]])<br/></pre><p>参数说明：</p><ul><li>iterable --  可迭代对象。</li><li>cmp --  比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li><li>key --  主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse --  排序规则，reverse = True  降序 ， reverse = False 升序（默认）。</li></ul><h2>返回值</h2><p>返回重新排序的列表。</p><h2>实例</h2><p>以下实例展示了 sorted 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">5</span><span class="hl-code">,</span><span class="hl-number">7</span><span class="hl-code">,</span><span class="hl-number">6</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"> = </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 保留原列表</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-brackets">]</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">L</span><span class="hl-code">=</span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code">,</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">,</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code">,</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">L</span><span class="hl-code">, </span><span class="hl-identifier">cmp</span><span class="hl-code">=</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">,</span><span class="hl-identifier">y</span><span class="hl-code">:</span><span class="hl-builtin">cmp</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-code">,</span><span class="hl-identifier">y</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 利用cmp函数</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">L</span><span class="hl-code">, </span><span class="hl-identifier">key</span><span class="hl-code">=</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">:</span><span class="hl-identifier">x</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 利用key</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">  &gt;&gt;&gt; </span><span class="hl-identifier">students</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">john</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">A</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">15</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">jane</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">12</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">dave</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">students</span><span class="hl-code">, </span><span class="hl-identifier">key</span><span class="hl-code">=</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">s</span><span class="hl-code">: </span><span class="hl-identifier">s</span><span class="hl-brackets">[</span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 按年龄排序</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">dave</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">jane</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">12</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">john</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">A</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">15</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">sorted</span><span class="hl-brackets">(</span><span class="hl-identifier">students</span><span class="hl-code">, </span><span class="hl-identifier">key</span><span class="hl-code">=</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">s</span><span class="hl-code">: </span><span class="hl-identifier">s</span><span class="hl-brackets">[</span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-code">, </span><span class="hl-identifier">reverse</span><span class="hl-code">=</span><span class="hl-reserved">True</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 按降序</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">john</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">A</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">15</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">jane</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">12</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">dave</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">B</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3log()函数	log() 方法返回x的自然对数，x > 0。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> log() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>log() 方法返回x的自然对数，x &gt; 0。</p><hr/><h2>语法</h2><p>以下是 log() 方法的语法:</p><pre><br/>import math<br/><br/>math.log( x )<br/></pre><p><strong>注意：</strong>log()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回x的自然对数，x&gt;0。<hr/><h2>实例</h2><p>以下展示了使用 log() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.log(100.12) : ", math.log(100.12))<br/>print ("math.log(100.72) : ", math.log(100.72))<br/>print ("math.log(math.pi) : ", math.log(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.log(100.12) :  4.6063694665635735<br/>math.log(100.72) :  4.612344389736092<br/>math.log(math.pi) :  1.1447298858494002<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonpass语句	pass	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> pass  语句</span></h1><p>Python pass是空语句，是为了保持程序结构的完整性。</p><p>pass 不做任何事情，一般用做占位语句。</p><p><strong>Python 语言 pass 语句语法格式如下：</strong></p><pre><br/>pass<br/></pre><p><strong>实例：</strong></p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*- <br/><br/># 输出 Python 的每个字母<br/>for letter in 'Python':<br/>   if letter == 'h':<br/>      pass<br/>      print '这是 pass 块'<br/>   print '当前字母 :', letter<br/><br/>print "Good bye!"<br/></pre><p>以上实例执行结果：</p><pre><br/>当前字母 : P<br/>当前字母 : y<br/>当前字母 : t<br/>这是 pass 块<br/>当前字母 : h<br/>当前字母 : o<br/>当前字母 : n<br/>Good bye!<br/></pre></div></div>
Pythonxrange()函数	xrange() 函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。	<div class="article-body"><div class="article-intro" id="content"><h1>Python xrange() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>xrange()</b> 函数用法与 <a href="pytho-func-range.html" target="_blank">range</a> 完全相同，所不同的是生成的不是一个数组，而是一个生成器。</p><h2>语法</h2><p>xrange 语法：</p><pre><br/>xrange(stop)<br/>xrange(start, stop[, step])<br/></pre><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>end: 计数到 end 结束，但不包括 end。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h2>返回值</h2><p>返回生成器。</p><h2>实例</h2><p>以下实例展示了 xrange 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">8</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">8</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">8</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">8</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># range 使用</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 使用 range</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">,</span><span class="hl-number">6</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 步长为 2</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">xrange</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">,</span><span class="hl-number">6</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.utime()方法	os.utime() 方法用于设置指定路径文件最后的修改和访问时间。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.utime() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.utime() 方法用于设置指定路径文件最后的修改和访问时间。</p><p>在Unix，Windows中有效。</p><h3>语法</h3><p><b>utime()</b>方法语法格式如下：</p><pre><br/>os.utime(path, times)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 文件路径</p></li><li><p><b>times</b> -- 如果时间是 None, 则文件的访问和修改设为当前时间 。 否则, 时间是一个 2-tuple数字, (atime, mtime) 用来分别作为访问和修改的时间。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 utime() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示文件的 stat 信息<br/>stinfo = os.stat('a2.py')<br/>print stinfo<br/><br/># 使用 os.stat 来接收文件的访问和修改时间<br/>print "a2.py 的访问时间: %s" %stinfo.st_atime<br/>print "a2.py 的修改时间: %s" %stinfo.st_mtime<br/><br/># 修改访问和修改时间<br/>os.utime("a2.py",(1330712280, 1330712292))<br/>print "done!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.stat_result(st_mode=33188, st_ino=3940649674337682L, st_dev=277923425L, st<br/>_nlink=1, st_uid=400, st_gid=401, st_size=335L, st_atime=1330498070, st_mtime=13<br/>30498074, st_ctime=1330498065)<br/>a2.py 的访问时间: 1330498070<br/>a2.py 的修改时间: 1330498074<br/>done!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3Fileflush()方法	flush() 方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区写入。
	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File flush() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>flush()</b> 方法是用来刷新缓冲区的，即将缓冲区中的数据立刻写入文件，同时清空缓冲区，不需要是被动的等待输出缓冲区写入。</p><p>一般情况下，文件关闭后会自动刷新缓冲区，但有时你需要在关闭前刷新它，这时就可以使用 flush() 方法。</p><h3>语法</h3><p>flush() 方法语法如下：</p><pre><br/>fileObject.flush();<br/></pre><h3>参数</h3><ul><li><p><b>无</b></p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 flush() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/># 打开文件<br/>fo = open("runoob.txt", "wb")<br/>print ("文件名为: ", fo.name)<br/><br/># 刷新缓冲区<br/>fo.flush()<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p></div></div>
Python3os.minor()方法	os.minor() 方法用于从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.minor() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.minor() 方法用于从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</p><h3>语法</h3><p><b>minor()</b>方法语法格式如下：</p><pre><br/>os.minor(device)<br/></pre><h3>参数</h3><ul><li><p><b>device</b> --  原始的设备(使用stat中的st_dev或者st_rdev field )</p></li></ul><h3>返回值</h3><p>返回设备 minor 号。</p><h3>实例</h3><p>以下实例演示了 minor() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/>path = "/var/www/html/foo.txt"<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/># 获取 major 和 minor 设备号<br/>major_dnum = os.major(info.st_dev)<br/>minor_dnum = os.minor(info.st_dev)<br/><br/>print ("Major 设备号 :", major_dnum)<br/>print ("Minor 设备号 :", minor_dnum)<br/><br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Major 设备号 : 0<br/>Minor 设备号 : 103<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3字典popitem()方法	Python 字典 popitem() 方法随机返回并删除字典中的一对键和值(一般删除末尾对)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 popitem() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 popitem() 方法随机返回并删除字典中的一对键和值(一般删除末尾对)。</p><p>如果字典已经为空，却调用了此方法，就报出KeyError异常。</p><h2>语法</h2><p>popitem()方法语法：</p><pre><br/>popitem()<br/></pre><h2>参数</h2><ul><li>无</li></ul><h2>返回值</h2><p>返回一个键值对(key,value)形式。</p><h2>实例</h2><p>以下实例展示了 popitem() 方法的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>site= {'name': '菜鸟教程', 'alexa': 10000, 'url': 'www.runoob.com'}<br/>pop_obj=site.popitem()<br/>print(pop_obj)   <br/>print(site)<br/></pre><p>输出结果为：</p><pre><br/>('url', 'www.runoob.com')<br/>{'name': '菜鸟教程', 'alexa': 10000}<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Pythonmax()函数	max() 方法返回给定参数的最大值，参数可以为序列。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> max() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>max() 方法返回给定参数的最大值，参数可以为序列。</p><hr/><h2>语法</h2><p>以下是 max() 方法的语法:</p><pre><br/>max( x, y, z, .... )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回给定参数的最大值。<hr/><h2>实例</h2><p>以下展示了使用 max() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>print "max(80, 100, 1000) : ", max(80, 100, 1000)<br/>print "max(-20, 100, 400) : ", max(-20, 100, 400)<br/>print "max(-80, -20, -10) : ", max(-80, -20, -10)<br/>print "max(0, 100, -400) : ", max(0, 100, -400)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>max(80, 100, 1000) :  1000<br/>max(-20, 100, 400) :  400<br/>max(-80, -20, -10) :  -10<br/>max(0, 100, -400) :  100<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python字典(Dictionary)values()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) values()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) values() 函数以列表返回字典中的所有值。</p><h2>语法</h2><p>values()方法语法：</p><pre><br/>dict.values()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回字典中的所有值。</p><h2>实例</h2><p>以下实例展示了 values()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7}<br/><br/>print "Value : %s" %  dict.values()<br/></pre><p>以上实例输出结果为：</p><pre><br/>Value : [7, 'Zara']<br/></pre></div></div>
Python字典popitem()方法	Python 字典 popitem() 方法随机返回并删除字典中的一对键和值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典 popitem() 方法</h1><p><a href="http://www.runoob.com/python/python-dictionary.html"><img alt="Python 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字典</a></p><hr/><h2>描述</h2><p>Python 字典 popitem() 方法随机返回并删除字典中的一对键和值。</p><p>如果字典已经为空，却调用了此方法，就报出KeyError异常。</p><h2>语法</h2><p>popitem()方法语法：</p><pre><br/>popitem()<br/></pre><h2>参数</h2><ul><li>无</li></ul><h2>返回值</h2><p>返回一个键值对(key,value)形式。</p><h2>实例</h2><p>以下实例展示了 popitem() 方法的使用方法：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>site= {'name': '菜鸟教程', 'alexa': 10000, 'url': 'www.runoob.com'}<br/>pop_obj=site.popitem()<br/>print(pop_obj)<br/>print(site)<br/></pre><p>输出结果为：</p><pre><br/>('url', 'www.runoob.com')<br/>{'alexa': 10000, 'name': '\xe8\x8f\x9c\xe9\xb8\x9f\xe6\x95\x99\xe7\xa8\x8b'}<br/></pre><hr/><p><a href="http://www.runoob.com/python/python-dictionary.html"><img alt="Python 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字典</a></p></div></div>
Python3abs()函数	abs() 函数返回数字的绝对值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> abs() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>abs() 函数返回数字的绝对值。</p><hr/><h2>语法</h2><p>以下是 abs() 方法的语法:</p><pre><br/>abs( x )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式，可以是整数，浮点数，复数。</li></ul><hr/><h2>返回值</h2>函数返回 x（数字）的绝对值，如果参数是一个复数，则返回它的大小。<hr/><h2>实例</h2><p>以下展示了使用 abs() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>print ("abs(-40) : ", abs(-40))<br/>print ("abs(100.10) : ", abs(100.10))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>abs(-40) :  40<br/>abs(100.10) :  100.1<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
PythonListappend()方法	append() 方法用于在列表末尾添加新的对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List append()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>append() 方法用于在列表末尾添加新的对象。</p><h2>语法</h2><p>append()方法语法：</p><pre><br/>list.append(obj)<br/></pre><h2>参数</h2><ul><li>obj -- 添加到列表末尾的对象。</li></ul><h2>返回值</h2><p>该方法无返回值，但是会修改原来的列表。</p><h2>实例</h2><p>以下实例展示了 append()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc'];<br/>aList.append( 2009 );<br/>print "Updated List : ", aList;<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Updated List :  [123, 'xyz', 'zara', 'abc', 2009]<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3find()方法	find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置。如果不包含索引值，返回-1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 find()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置。如果不包含索引值，返回-1。</p><h2>语法</h2><p>find()方法语法：</p><pre><br/>str.find(str, beg=0, end=len(string))<br/></pre><h2>参数</h2><ul><li>str -- 指定检索的字符串</li><li>beg -- 开始索引，默认为0。</li><li>end -- 结束索引，默认为字符串的长度。</li></ul></div></div>
Pythonos.lchmod()方法	os.lchmod() 方法用于修改连接文件权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.lchmod() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lchmod() 方法用于修改连接文件权限。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>lchmod()</b>方法语法格式如下：</p><pre><br/>os.lchmod(path, mode)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置标记的文件路径</p></li><li><p><b>mode</b> -- 可以是以下一个或多个组成，多个使用 "|" 隔开：</p> <ul> <li><p><b>stat.S_ISUID:</b>设置 UID 位</p></li> <li><p><b>stat.S_ISGID:</b> 设置组 ID 位 </p></li> <li><p><b>stat.S_ENFMT:</b> 系统文件锁定的执法行动</p></li> <li><p><b>stat.S_ISVTX:</b> 在执行之后保存文字和图片</p></li> <li><p><b>stat.S_IREAD:</b> 对于拥有者读的权限</p></li> <li><p><b>stat.S_IWRITE:</b> 对于拥有者写的权限</p></li> <li><p><b>stat.S_IEXEC:</b> 对于拥有者执行的权限</p></li> <li><p><b>stat.S_IRWXU:</b>对于拥有者读、写、执行的权限</p></li> <li><p><b>stat.S_IRUSR:</b> 对于拥有者读的权限</p></li> <li><p><b>stat.S_IWUSR:</b> 对于拥有者写的权限</p></li> <li><p><b>stat.S_IXUSR:</b> 对于拥有者执行的权限</p></li> <li><p><b>stat.S_IRWXG:</b> 对于同组的人读写执行的权限 </p></li> <li><p><b>stat.S_IRGRP:</b> 对于同组读的权限 </p></li> <li><p><b>stat.S_IWGRP:</b>对于同组写的权限</p></li> <li><p><b>stat.S_IXGRP:</b> 对于同组执行的权限</p></li> <li><p><b>stat.S_IRWXO:</b> 对于其他组读写执行的权限</p></li> <li><p><b>stat.S_IROTH:</b> 对于其他组读的权限</p></li> <li><p><b>stat.S_IWOTH:</b> 对于其他组写的权限</p></li> <li><p><b>stat.S_IXOTH:</b>对于其他组执行的权限</p></li> </ul> </li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchmod() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/># 修改文件权限<br/># 设置文件可以通过组执行<br/>os.lchmod( path, stat.S_IXGRP)<br/><br/># 设置文件可以被其他用户写入<br/>os.lchmod("/tmp/foo.txt", stat.S_IWOTH)<br/><br/>print "修改权限成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.pathconf()方法	os.pathconf() 方法用于返回一个打开的文件的系统配置信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.pathconf() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.pathconf() 方法用于返回一个打开的文件的系统配置信息。</p><p>Unix 平台下可用。</p><h3>语法</h3><p><b>fpathconf()</b>方法语法格式如下：</p><pre><br/>os.fpathconf(fd, name)<br/></pre><h3>参数</h3><ul><li><p><b>name</b> -- 文件描述符</p></li></ul></div></div>
Python3swapcase()方法	swapcase() 方法用于对字符串的大小写字母进行转换。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 swapcase()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>swapcase() 方法用于对字符串的大小写字母进行转换。</p><h2>语法</h2><p>swapcase()方法语法：</p><pre><br/>str.swapcase();<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回大小写字母转换后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了swapcase()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example....wow!!!"<br/>print (str.swapcase())<br/><br/>str = "This Is String Example....WOW!!!"<br/>print (str.swapcase())<br/></pre><p>以上实例输出结果如下：</p><pre><br/>THIS IS STRING EXAMPLE....WOW!!!<br/>tHIS iS sTRING eXAMPLE....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonos.listdir()方法	os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。这个列表以字母顺序。 它不包括 '.' 和'..' 即使它在文件夹中。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.listdir() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。这个列表以字母顺序。 它不包括 '.' 和'..' 即使它在文件夹中。</p><p>只支持在 Unix, Windows 下使用。</p><h3>语法</h3><p><b>listdir()</b>方法语法格式如下：</p><pre><br/>os.listdir(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  需要列出的目录路径</p></li></ul><h3>返回值</h3><p>返回指定路径下的文件和文件夹列表。</p><h3>实例</h3><p>以下实例演示了 listdir() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/"<br/>dirs = os.listdir( path )<br/><br/># 输出所有文件和文件夹<br/>for file in dirs:<br/>   print file<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>test.htm<br/>stamp<br/>faq.htm<br/>_vti_txt<br/>robots.txt<br/>itemlisting<br/>resumelisting<br/>writing_effective_resume.htm<br/>advertisebusiness.htm<br/>papers<br/>resume<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythondict()函数	dict() 函数用于创建一个字典。	<div class="article-body"><div class="article-intro" id="content"><h1>Python dict() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>dict()</b> 函数用于创建一个字典。</p><h2>语法</h2><p>dict 语法：</p><pre><br/>class dict(**kwarg)<br/>class dict(mapping, **kwarg)<br/>class dict(iterable, **kwarg)<br/></pre><p>参数说明：</p><ul><li>**kwargs --  关键字</li><li>mapping --  元素的容器。</li><li>iterable --  可迭代对象。</li></ul><h2>返回值</h2><p>返回一个字典。</p><h2>实例</h2><p>以下实例展示了 dict 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">dict</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 创建空字典</span><span class="hl-code">{}&gt;&gt;&gt; </span><span class="hl-builtin">dict</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">b</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">t</span><span class="hl-code">=</span><span class="hl-quotes">'</span><span class="hl-string">t</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 传入关键字</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">t</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">t</span><span class="hl-quotes">'</span><span class="hl-code">}&gt;&gt;&gt; </span><span class="hl-builtin">dict</span><span class="hl-brackets">(</span><span class="hl-builtin">zip</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 映射函数方式来构造字典</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">1</span><span class="hl-code">} &gt;&gt;&gt; </span><span class="hl-builtin">dict</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 可迭代对象方式来构造字典</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">1</span><span class="hl-code">}&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3hypot()函数	 hypot() 返回欧几里德范数 sqrt(x*x + y*y)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> hypot() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>hypot()</b> 返回欧几里德范数 sqrt(x*x + y*y)。</p><hr/><h2>语法</h2><p>以下是 hypot() 方法的语法:</p><pre><br/>import math<br/><br/>math.hypot(x, y)<br/></pre><p><strong>注意：</strong>hypot()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li><li>y -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回欧几里德范数 sqrt(x*x + y*y)。</p><hr/><h2>实例</h2><p>以下展示了使用 hypot() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("hypot(3, 2) : ",  math.hypot(3, 2))<br/>print ("hypot(-3, 3) : ",  math.hypot(-3, 3))<br/>print ("hypot(0, 2) : ",  math.hypot(0, 2))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>hypot(3, 2) :  3.605551275463989<br/>hypot(-3, 3) :  4.242640687119285<br/>hypot(0, 2) :  2.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonslice()函数	slice() 函数实现切片对象，主要用在切片操作函数里的参数传递。	<div class="article-body"><div class="article-intro" id="content"><h1>Python slice() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>slice()</b> 函数实现切片对象，主要用在切片操作函数里的参数传递。</p><h2>语法</h2><p>slice 语法：</p><pre><br/>class slice(stop)<br/>class slice(start, stop[, step])<br/></pre><p>参数说明：</p><ul><li>start --  起始位置</li><li>stop --  结束位置</li><li>step --  间距</li></ul><h2>返回值</h2><p>返回一个切片对象。</p><h2>实例</h2><p>以下实例展示了 slice 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">myslice</span><span class="hl-code"> = </span><span class="hl-builtin">slice</span><span class="hl-brackets">(</span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 设置截取5个元素的切片</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">myslice</span><span class="hl-code"></span><span class="hl-builtin">slice</span><span class="hl-brackets">(</span><span class="hl-reserved">None</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-reserved">None</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">arr</span><span class="hl-code"> = </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">arr</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">arr</span><span class="hl-brackets">[</span><span class="hl-identifier">myslice</span><span class="hl-brackets">]</span><span class="hl-code"> </span><span class="hl-comment"># 截取 5 个元素</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonsum()函数	sum() 方法对系列进行求和计算。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> sum() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>sum()</b> 方法对系列进行求和计算。</p><h3>语法</h3><p>以下是 sum() 方法的语法:</p><pre><br/>sum(iterable[, start])<br/></pre><h3>参数</h3><ul><li>iterable -- 可迭代对象，如列表。</li><li>start -- 指定相加的参数，如果没有设置这个值，默认为0。</li></ul><h3>返回值</h3><p>返回计算结果。</p><hr/><h2>实例</h2><p>以下展示了使用 sum 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">sum</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">,</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code">  &gt;&gt;&gt; </span><span class="hl-builtin">sum</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组计算总和后再加 1</span><span class="hl-code"></span><span class="hl-number">10</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">sum</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">,</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表计算总和后再加 2</span><span class="hl-code"></span><span class="hl-number">12</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3ceil()函数	ceil(x) 函数返回一个大于或等于 x 的的最小整数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> ceil() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>ceil(x) 函数返回一个大于或等于 x 的的最小整数。</p><hr/><h2>语法</h2><p>以下是 ceil() 方法的语法:</p><pre><br/>import math<br/><br/>math.ceil( x )<br/></pre><p><strong>注意：</strong>ceil()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2>x -- 数值表达式。<hr/><h2>返回值</h2>函数返回返回一个大于或等于 x 的的最小整数。<hr/><h2>实例</h2><p>以下展示了使用 ceil() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.ceil(-45.17) : ", math.ceil(-45.17))<br/>print ("math.ceil(100.12) : ", math.ceil(100.12))<br/>print ("math.ceil(100.72) : ", math.ceil(100.72))<br/>print ("math.ceil(math.pi) : ", math.ceil(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.ceil(-45.17) :  -45<br/>math.ceil(100.12) :  101<br/>math.ceil(100.72) :  101<br/>math.ceil(math.pi) :  4<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonstaticmethod()函数	class C(object):    @staticmethod    def f(arg1, arg2, ...):        ...	<div class="article-body"><div class="article-intro" id="content"><h1>Python staticmethod() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python staticmethod 返回函数的静态方法。</p><p>该方法不强制要求传递参数，如下声明一个静态方法：</p><pre>class C(object):<br/>    @staticmethod<br/>    def f(arg1, arg2, ...):<br/>        ...<br/></pre><p>以上实例声明了静态方法 f，类可以不用实例化就可以调用该方法 C.f()，当然也可以实例化后调用 C().f()。</p><h3>函数语法</h3><pre><br/>staticmethod(function)<br/></pre><p>参数说明：</p><ul><li>无</li></ul><h3>实例</h3><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">C</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:    @</span><span class="hl-identifier">staticmethod</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">f</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">; </span><span class="hl-identifier">C</span><span class="hl-code">.</span><span class="hl-identifier">f</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;          </span><span class="hl-comment"># 静态方法无需实例化</span><span class="hl-code"></span><span class="hl-identifier">cobj</span><span class="hl-code"> = </span><span class="hl-identifier">C</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">cobj</span><span class="hl-code">.</span><span class="hl-identifier">f</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 也可以实例化后调用</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonupper()方法	Python upper() 方法将字符串中的小写字母转为大写字母。	<div class="article-body"><div class="article-intro" id="content"><h1>Python upper()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python upper() 方法将字符串中的小写字母转为大写字母。</p><h2>语法</h2><p>upper()方法语法：</p><pre><br/>str.upper()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回小写字母转为大写字母的字符串。</p><h2>实例</h2><p>以下实例展示了 upper()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/><br/>print "str.upper() : ", str.upper()<br/></pre><p>以上实例输出结果如下：</p><pre><br/>str.upper() :  THIS IS STRING EXAMPLE....WOW!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3min()函数	min() 方法返回给定参数的最小值，参数可以为序列。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> min() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>min() 方法返回给定参数的最小值，参数可以为序列。</p><hr/><h2>语法</h2><p>以下是 min() 方法的语法:</p><pre><br/>min( x, y, z, .... )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li><li>z -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回给定参数的最小值。<hr/><h2>实例</h2><p>以下展示了使用 min() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>print ("min(80, 100, 1000) : ", min(80, 100, 1000))<br/>print ("min(-20, 100, 400) : ", min(-20, 100, 400))<br/>print ("min(-80, -20, -10) : ", min(-80, -20, -10))<br/>print ("min(0, 100, -400) : ", min(0, 100, -400))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>min(80, 100, 1000) :  80<br/>min(-20, 100, 400) :  -20<br/>min(-80, -20, -10) :  -80<br/>min(0, 100, -400) :  -400<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3os.dup()方法	os.dup() 方法用于复制文件描述符 fd。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.dup() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.dup() 方法用于复制文件描述符 fd。</p><h3>语法</h3><p><b>dup()</b>方法语法格式如下：</p><pre><br/>os.dup(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>返回复制的文件描述符。</p><h3>实例</h3><p>以下实例演示了 dup() 方法的使用：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">os</span><span class="hl-code">, </span><span class="hl-identifier">sys</span><span class="hl-code"></span><span class="hl-comment"># 打开文件</span><span class="hl-code"></span><span class="hl-identifier">fd</span><span class="hl-code"> = </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-builtin">open</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">foo.txt</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">O_RDWR</span><span class="hl-code">|</span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">O_CREAT</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 复制文件描述符</span><span class="hl-code"></span><span class="hl-identifier">d_fd</span><span class="hl-code"> = </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">dup</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">fd</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 使用复制的文件描述符写入文件</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">write</span><span class="hl-brackets">(</span><span class="hl-identifier">d_fd</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">This is test</span><span class="hl-quotes">"</span><span class="hl-code">.</span><span class="hl-identifier">encode</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 关闭文件</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">closerange</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">fd</span><span class="hl-code">, </span><span class="hl-identifier">d_fd</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">关闭所有文件成功!!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上程序输出结果为：</p><pre>关闭所有文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonzip()函数	zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。	<div class="article-body"><div class="article-intro" id="content"><h1>Python zip() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>zip()</b> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</p><h2>语法</h2><p>zip 语法：</p><pre><br/>zip([iterable, ...])<br/></pre><p>参数说明：</p><ul><li>iterabl -- 一个或多个迭代器;</li></ul><h2>返回值</h2><p>返回元组列表。</p><h2>实例</h2><p>以下实例展示了 zip 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-code">,</span><span class="hl-number">6</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">c</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-code">,</span><span class="hl-number">6</span><span class="hl-code">,</span><span class="hl-number">7</span><span class="hl-code">,</span><span class="hl-number">8</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">zipped</span><span class="hl-code"> = </span><span class="hl-builtin">zip</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">,</span><span class="hl-identifier">b</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 打包为元组的列表</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">zip</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">,</span><span class="hl-identifier">c</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元素个数与最短的列表一致</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">zip</span><span class="hl-brackets">(</span><span class="hl-code">*</span><span class="hl-identifier">zipped</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 与 zip 相反，可理解为解压，返回二维矩阵式</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonenumerate()函数	enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> enumerate() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><p>Python 2.3. 以上版本可用，2.6 添加 start 参数。</p><h3>语法</h3><p>以下是 enumerate() 方法的语法:</p><pre><br/>enumerate(sequence, [start=0])<br/></pre><h3>参数</h3><ul><li>sequence -- 一个序列、迭代器或其他支持迭代对象。</li><li>start -- 下标起始位置。</li></ul><h3>返回值</h3><p>返回 enumerate(枚举) 对象。</p><hr/><h2>实例</h2><p>以下展示了使用 enumerate() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">seasons</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">Spring</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Summer</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Fall</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Winter</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">enumerate</span><span class="hl-brackets">(</span><span class="hl-identifier">seasons</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Spring</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Summer</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Fall</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Winter</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">enumerate</span><span class="hl-brackets">(</span><span class="hl-identifier">seasons</span><span class="hl-code">, </span><span class="hl-identifier">start</span><span class="hl-code">=</span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 小标从 1 开始</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Spring</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Summer</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Fall</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-brackets">(</span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Winter</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">]</span></div></div></div><div class="example"><h2 class="example">普通的 for 循环</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">i</span><span class="hl-code"> = </span><span class="hl-number">0</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">seq</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">element</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-identifier">seq</span><span class="hl-code">:...     </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">seq</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-code">...     </span><span class="hl-identifier">i</span><span class="hl-code"> +=</span><span class="hl-number">1</span><span class="hl-code">... </span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-identifier">one</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">two</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"> </span><span class="hl-identifier">three</span></div></div></div><div class="example"><h2 class="example">for 循环使用 enumerate</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">seq</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">one</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">two</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">three</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">element</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">enumerate</span><span class="hl-brackets">(</span><span class="hl-identifier">seq</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">seq</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-code">... </span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-identifier">one</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">two</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"> </span><span class="hl-identifier">three</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythongetattr()函数	getattr() 函数用于返回一个对象属性值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python getattr() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>getattr()</b> 函数用于返回一个对象属性值。</p><h2>语法</h2><p>getattr 语法：</p><pre><br/>getattr(object, name[, default])<br/></pre><h2>参数</h2><ul><li>object -- 对象。</li><li>name -- 字符串，对象属性。</li><li>default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li></ul><h2>返回值</h2><p>返回对象属性值。</p><h2>实例</h2><p>以下实例展示了 getattr 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">bar</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 获取属性 bar 值</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar2</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 属性 bar2 不存在，触发异常</span><span class="hl-code"></span><span class="hl-identifier">Traceback</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">most</span><span class="hl-code"> </span><span class="hl-identifier">recent</span><span class="hl-code"> </span><span class="hl-identifier">call</span><span class="hl-code"> </span><span class="hl-identifier">last</span><span class="hl-brackets">)</span><span class="hl-code">:  </span><span class="hl-identifier">File</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">&lt;stdin&gt;</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt;</span><span class="hl-reserved">AttributeError</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">A</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-identifier">object</span><span class="hl-code"> </span><span class="hl-identifier">has</span><span class="hl-code"> </span><span class="hl-identifier">no</span><span class="hl-code"> </span><span class="hl-identifier">attribute</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">bar2</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar2</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 属性 bar2 不存在，但设置了默认值</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3字典get()方法	Python 字典 get() 函数返回指定键的值，如果值不在字典中返回默认值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 get() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 get() 函数返回指定键的值，如果值不在字典中返回默认值。</p><h2>语法</h2><p>get()方法语法：</p><pre><br/>dict.get(key, default=None)<br/></pre><h2>参数</h2><ul><li>key -- 字典中要查找的键。</li><li>default -- 如果指定键的值不存在时，返回该默认值值。</li></ul><h2>返回值</h2><p>返回指定键的值，如果值不在字典中返回默认值 None。</p><h2>实例</h2><p>以下实例展示了 get()函数的使用方法：</p><pre><br/>#!/usr/bin/python3 <br/><br/>dict = {'Name': 'Runoob', 'Age': 27}<br/><br/>print ("Age 值为 : %s" %  dict.get('Age'))<br/>print ("Sex 值为 : %s" %  dict.get('Sex', "NA"))<br/></pre><p>以上实例输出结果为：</p><pre><br/>Age 值为 : 27<br/>Sex 值为 : NA<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Python3os.chflags()方法	os.chflags() 方法用于设置路径的标记为数字标记。多个标记可以使用 OR 来组合起来。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.chflags() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chflags() 方法用于设置路径的标记为数字标记。多个标记可以使用 OR 来组合起来。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>chflags()</b>方法语法格式如下：</p><pre><br/>os.chflags(path, flags)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 文件名路径或目录路径。 </p></li><li><p><b>flags</b> -- 可以是以下值： </p><ul><li><b>stat.UF_NODUMP:</b>  非转储文件</li><li><b>stat.UF_IMMUTABLE:</b>  文件是只读的</li><li><b>stat.UF_APPEND:</b>     文件只能追加内容 </li><li><b>stat.UF_NOUNLINK:</b>   文件不可删除</li><li><b>stat.UF_OPAQUE:</b>    目录不透明，需要通过联合堆栈查看</li><li><b>stat.SF_ARCHIVED:</b>   可存档文件(超级用户可设) </li><li><b>stat.SF_IMMUTABLE:</b>  文件是只读的(超级用户可设)</li><li><b>stat.SF_APPEND:</b>      文件只能追加内容(超级用户可设) </li><li><b>stat.SF_NOUNLINK:</b>    文件不可删除(超级用户可设) </li><li><b>stat.SF_SNAPSHOT:</b>    快照文件(超级用户可设)</li></ul></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 chflags() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os,stat<br/><br/>path = "/tmp/foo.txt"<br/><br/># 为文件设置标记，使得它不能被重命名和删除<br/>flags = stat.SF_NOUNLINK<br/>retval = os.chflags( path, flags )<br/>print ("返回值: %s" % retval)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>返回值: None<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.tcgetpgrp()方法	os.tcgetpgrp() 方法用于回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.tcgetpgrp() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tcgetpgrp() 方法用于回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组。</p><h3>语法</h3><p><b>tcgetpgrp()</b>方法语法格式如下：</p><pre><br/>os.tcgetpgrp(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li></ul><h3>返回值</h3><p>该方法返回进程组。</p><h3>实例</h3><p>以下实例演示了 tcgetpgrp() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示当前目录<br/>print "当前目录 :%s" %os.getcwd()<br/><br/># 修改目录到 /dev/tty<br/>fd = os.open("/dev/tty",os.O_RDONLY)<br/><br/>f = os.tcgetpgrp(fd)<br/><br/># 显示进程组<br/>print "相关进程组: "<br/>print f<br/><br/>os.close(fd)<br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre>当前目录 :/tmp<br/>相关进程组:<br/>2670<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.isatty()方法	os.isatty() 方法用于判断如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.isatty() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.isatty() 方法用于判断如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</p><h3>语法</h3><p><b>isatty()</b>方法语法格式如下：</p><pre><br/>os.isatty()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。</p><h3>实例</h3><p>以下实例演示了 isatty() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 使用 isatty() 查看文件<br/>ret = os.isatty(fd)<br/><br/>print "返回值: ", ret<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>返回值:  False<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythondegrees()函数	 degrees() 将弧度转换为角度。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> degrees() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>degrees()</b> 将弧度转换为角度。</p><hr/><h2>语法</h2><p>以下是 degrees() 方法的语法:</p><pre><br/>import math<br/><br/>math.degrees(x)<br/></pre><p><strong>注意：</strong>degrees()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回一个角度值。</p><hr/><h2>实例</h2><p>以下展示了使用 degrees() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "degrees(3) : ",  math.degrees(3)<br/>print "degrees(-3) : ",  math.degrees(-3)<br/>print "degrees(0) : ",  math.degrees(0)<br/>print "degrees(math.pi) : ",  math.degrees(math.pi)<br/>print "degrees(math.pi/2) : ",  math.degrees(math.pi/2)<br/>print "degrees(math.pi/4) : ",  math.degrees(math.pi/4)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>degrees(3) :  171.887338539<br/>degrees(-3) :  -171.887338539<br/>degrees(0) :  0.0<br/>degrees(math.pi) :  180.0<br/>degrees(math.pi/2) :  90.0<br/>degrees(math.pi/4) :  45.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3os.popen()方法	os.popen() 方法用于从一个命令打开一个管道。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.popen() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.popen() 方法用于从一个命令打开一个管道。</p><p>在Unix，Windows中有效</p><h3>语法</h3><p><b>popen()</b>方法语法格式如下：</p><pre><br/>os.popen(command[, mode[, bufsize]])<br/></pre><h3>参数</h3><ul><li><p><b>command</b> -- 使用的命令。</p></li><li><p><b>mode</b> -- 模式权限可以是 'r'(默认) 或 'w'。</p></li><li><p><b>bufsize</b> -- 指明了文件需要的缓冲大小：0意味着无缓冲；1意味着行缓冲；其它正值表示使用参数大小的缓冲（大概值，以字节为单位）。负的bufsize意味着使用系统的默认值，一般来说，对于tty设备，它是行缓冲；对于其它文件，它是全缓冲。如果没有改参数，使用系统的默认值。</p></li></ul><h3>返回值</h3><p>返回一个文件描述符号为fd的打开的文件对象 </p><h3>实例</h3><p>以下实例演示了 popen() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 使用 mkdir 命令<br/>a = 'mkdir nwdir'<br/><br/>b = os.popen(a,'r',1)<br/><br/>print (b)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>open file 'mkdir nwdir', mode 'r' at 0x81614d0<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.close()方法	os.close() 方法用于关闭指定的文件描述符 fd。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.close() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.close() 方法用于关闭指定的文件描述符 fd。</p><h3>语法</h3><p><b>close()</b>方法语法格式如下：</p><pre><br/>os.close(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 close() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/>#  写入字符串<br/>os.write(fd, "This is test")<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.fdopen()方法	os.fdopen() 方法用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fdopen() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fdopen() 方法用于通过文件描述符 fd 创建一个文件对象，并返回这个文件对象。</p><p>该方法是内置函数 <a href="../python/python-func-open.html" rel="noopener" target="_blank">open()</a> 的别名，可以接收一样的参数，唯一的区别是 fdopen() 的第一个参数必须是整型。</p><h3>语法</h3><p><b>fdopen()</b>方法语法格式如下：</p><pre><br/>os.fdopen(fd, [, mode[, bufsize]]);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 打开的文件的描述符，在Unix下，描述符是一个小整数。</p></li><li><p><b>mode</b> -- 可选，和 Python 内建的 open 函数一样，mode参数可以指定『r,w,a,r+,w+,a+,b』等，表示文件的是只读的还是可以读写的，以及打开文件是以二进制还是文本形式打开。这些参数和C语言中的&lt;stdio.h&gt;中fopen函数中指定的mode参数类似。</p></li><li><p><b>bufsize</b> -- 可选，指定返回的文件对象是否带缓冲：bufsize=0，表示没有带缓冲；bufsize=1，表示该文件对象是行缓冲的；bufsize=正数，表示使用一个指定大小的缓冲冲，单位为byte，但是这个大小不是精确的；bufsize=负数，表示使用一个系统默认大小的缓冲，对于tty字元设备一般是行缓冲，而对于其他文件则一般是全缓冲。如果这个参数没有制定，则使用系统默认的缓冲设定。</p></li></ul><h3>返回值</h3><p>通过文件描述符返回的文件对象。</p><h3>实例</h3><p>以下实例演示了 fdopen() 方法的使用：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">os</span><span class="hl-code">, </span><span class="hl-identifier">sys</span><span class="hl-code"></span><span class="hl-comment"># 打开文件</span><span class="hl-code"></span><span class="hl-identifier">fd</span><span class="hl-code"> = </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-builtin">open</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">foo.txt</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">O_RDWR</span><span class="hl-code">|</span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">O_CREAT</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 获取以上文件的对象</span><span class="hl-code"></span><span class="hl-identifier">fo</span><span class="hl-code"> = </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">fdopen</span><span class="hl-brackets">(</span><span class="hl-identifier">fd</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">w+</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 获取当前文章</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Current I/O pointer position :%d</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-identifier">fo</span><span class="hl-code">.</span><span class="hl-identifier">tell</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 写入字符串</span><span class="hl-code"></span><span class="hl-identifier">fo</span><span class="hl-code">.</span><span class="hl-identifier">write</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Python is a great language.</span><span class="hl-special">\n</span><span class="hl-string">Yeah its great!!</span><span class="hl-special">\n</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code">; </span><span class="hl-comment"># 读取内容</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">lseek</span><span class="hl-brackets">(</span><span class="hl-identifier">fd</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">str</span><span class="hl-code"> = </span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">read</span><span class="hl-brackets">(</span><span class="hl-identifier">fd</span><span class="hl-code">, </span><span class="hl-number">100</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Read String is : </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">str</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 获取当前位置</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Current I/O pointer position :%d</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-identifier">fo</span><span class="hl-code">.</span><span class="hl-identifier">tell</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 关闭文件</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">close</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-identifier">fd</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">关闭文件成功!!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上程序输出结果为：</p><pre><br/>Current I/O pointer position :0<br/>Read String is :  This is testPython is a great language.<br/>Yeah its great!!<br/><br/>Current I/O pointer position :45<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonstr()函数	str() 函数将对象转化为适于人阅读的形式。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> str() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>str() 函数将对象转化为适于人阅读的形式。</p><h3>语法</h3><p>以下是 str() 方法的语法:</p><pre><br/>class str(object='')<br/></pre><h3>参数</h3><ul><li>object -- 对象。</li></ul><h3>返回值</h3><p>返回一个对象的string格式。</p><hr/><h2>实例</h2><p>以下展示了使用 str() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">s</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">RUNOOB</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">str</span><span class="hl-brackets">(</span><span class="hl-identifier">s</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">RUNOOB</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">dict</span><span class="hl-code"> = {</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">runoob.com</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">google</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">google.com</span><span class="hl-quotes">'</span><span class="hl-code">};&gt;&gt;&gt; </span><span class="hl-builtin">str</span><span class="hl-brackets">(</span><span class="hl-identifier">dict</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">"</span><span class="hl-string">{'google': 'google.com', 'runoob': 'runoob.com'}</span><span class="hl-quotes">"</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.openpty()方法	os.openpty() 方法用于打开一个新的伪终端对。返回 pty 和 tty的文件描述符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.openpty() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.openpty() 方法用于打开一个新的伪终端对。返回 pty 和 tty的文件描述符。</p><h3>语法</h3><p><b>openpty()</b>方法语法格式如下：</p><pre><br/>os.openpty()<br/></pre><h3>参数</h3><ul><li>无</li></ul></div></div>
Python3Filenext()方法	Python 3 中的 File 对象不支持 next() 方法。 Python 3 的内置函数 next() 通过迭代器调用 __next__() 方法返回下一项。 在循环中，next()方法会在每次循环中调用，该方法返回文件的下一行，如果到达结尾(EOF),则触发 StopIteration	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File next() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p>Python 3 中的 File 对象不支持 <b>next()</b> 方法。 Python 3 的内置函数 next() 通过迭代器调用 __next__() 方法返回下一项。 在循环中，next()方法会在每次循环中调用，该方法返回文件的下一行，如果到达结尾(EOF),则触发 <i>StopIteration</i></p></div></div>
Python3os.statvfs()方法	os.statvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.statvfs() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.statvfs() 方法用于返回包含文件描述符fd的文件的文件系统的信息。</p><h3>语法</h3><p><b>statvfs()</b>方法语法格式如下：</p><pre><br/>os.statvfs([path])<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  文件路径。</p></li></ul><h3>返回值</h3><p>返回的结构:</p><ul><li><p><b>f_bsize:</b> 文件系统块大小 </p></li><li><p><b>f_frsize:</b> 分栈大小 </p></li><li><p><b>f_blocks:</b> 文件系统数据块总数</p></li><li><p><b>f_bfree:</b> 可用块数</p></li><li><p><b>f_bavail:</b>非超级用户可获取的块数</p></li><li><p><b>f_files:</b> 文件结点总数 </p></li><li><p><b>f_ffree:</b> 可用文件结点数 </p></li><li><p><b>f_favail:</b> 非超级用户的可用文件结点数 </p></li><li><p><b>f_fsid:</b> 文件系统标识 ID</p></li><li><p><b>f_flag:</b> 挂载标记</p></li><li><p><b>f_namemax:</b> 最大文件长度 </p></li></ul><h3>实例</h3><p>以下实例演示了 statvfs() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 显示 "a1.py" 文件的 statvfs 信息<br/>stinfo = os.statvfs('a1.py')<br/><br/>print (stinfo)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.statvfs_result(f_bsize=4096, f_frsize=4096, f_blocks=1909350L, f_bfree=1491513L,<br/>f_bavail=1394521L, f_files=971520L, f_ffree=883302L, f_fvail=883302L, f_flag=0,<br/>f_namemax=255)<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.stat()方法	os.stat() 方法用于在给定的路径上执行一个系统 stat 的调用。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.stat() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.stat() 方法用于在给定的路径上执行一个系统 stat 的调用。</p><h3>语法</h3><p><b>stat()</b>方法语法格式如下：</p><pre><br/>os.stat(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 指定路径</p></li></ul><h3>返回值</h3><p>stat 结构:</p><ul><li><b>st_mode: </b>inode 保护模式</li><li><b>st_ino: </b>inode 节点号。</li><li><b>st_dev: </b>inode 驻留的设备。</li><li><b>st_nlink: </b>inode 的链接数。</li><li><b>st_uid: </b>所有者的用户ID。</li><li><b>st_gid: </b>所有者的组ID。</li><li><b>st_size: </b>普通文件以字节为单位的大小；包含等待某些特殊文件的数据。</li><li><b>st_atime: </b>上次访问的时间。</li><li><b>st_mtime: </b>最后一次修改的时间。</li><li><b>st_ctime: </b>由操作系统报告的"ctime"。在某些系统上（如Unix）是最新的元数据更改的时间，在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）。</li></ul><h3>实例</h3><p>以下实例演示了 stat() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示文件 "a2.py" 信息<br/>statinfo = os.stat('a2.py')<br/><br/>print statinfo<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.stat_result(st_mode=33188, st_ino=3940649674337682L, st_dev=277923425L, st<br/>_nlink=1, st_uid=400, st_gid=401, st_size=335L, st_atime=1330498089, st_mtime=13<br/>30498089, st_ctime=1330498089)<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.read()方法	os.read() 方法用于从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.read() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.read() 方法用于从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</p><p>在Unix，Windows中有效</p><h3>语法</h3><p><b>read()</b>方法语法格式如下：</p><pre><br/>os.read(fd,n)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li><li><p><b>n</b> -- 读取的字节。</p></li></ul><h3>返回值</h3><p>返回包含读取字节的字符串 </p><h3>实例</h3><p>以下实例演示了 read() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/># 打开文件<br/>fd = os.open("f1.txt",os.O_RDWR)<br/>   <br/># 读取文本<br/>ret = os.read(fd,12)<br/>print (ret)<br/><br/># 关闭文件<br/>os.close(fd)<br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3encode()方法	encode() 方法以指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 encode()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>encode() 方法以指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。</p><h2>语法</h2><p>encode()方法语法：</p><pre><br/>str.encode(encoding='UTF-8',errors='strict')<br/></pre><h2>参数</h2><ul><li>encoding -- 要使用的编码，如: UTF-8。</li><li>errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。</li></ul><h2>返回值</h2><p>该方法返回编码后的字符串，它是一个 bytes 对象。</p><h2>实例</h2><p>以下实例展示了encode()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "菜鸟教程";<br/>str_utf8 = str.encode("UTF-8")<br/>str_gbk = str.encode("GBK")<br/><br/>print(str)<br/><br/>print("UTF-8 编码：", str_utf8)<br/>print("GBK 编码：", str_gbk)<br/><br/>print("UTF-8 解码：", str_utf8.decode('UTF-8','strict'))<br/>print("GBK 解码：", str_gbk.decode('GBK','strict'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>菜鸟教程<br/>UTF-8 编码： b'\xe8\x8f\x9c\xe9\xb8\x9f\xe6\x95\x99\xe7\xa8\x8b'<br/>GBK 编码： b'\xb2\xcb\xc4\xf1\xbd\xcc\xb3\xcc'<br/>UTF-8 解码： 菜鸟教程<br/>GBK 解码： 菜鸟教程<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3os.mkdir()方法	os.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.mkdir() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。</p><h3>语法</h3><p><b>mkdir()</b>方法语法格式如下：</p><pre><br/>os.mkdir(path[, mode])<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  要创建的目录</p></li><li><p><b>mode</b> --  要为目录设置的权限数字模式</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 mkdir() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 创建的目录<br/>path = "/tmp/home/monthly/daily/hourly"<br/><br/>os.mkdir( path, 0755 )<br/><br/>print ("目录已创建")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录已创建<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonmaketrans()方法	Python maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。	<div class="article-body"><div class="article-intro" id="content"><h1>Python maketrans()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</p><p><strong>注：</strong>两个字符串的长度必须相同，为一一对应的关系。</p><h2>语法</h2><p>maketrans()方法语法：</p><pre><br/>str.maketrans(intab, outtab)<br/></pre><h2>参数</h2><ul><li>intab -- 字符串中要替代的字符组成的字符串。</li><li>outtab -- 相应的映射字符的字符串。</li></ul><h2>返回值</h2><p>返回字符串转换后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了使用maketrans() 方法将所有元音字母转换为指定的数字：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>from string import maketrans   # 必须调用 maketrans 函数。<br/><br/>intab = "aeiou"<br/>outtab = "12345"<br/>trantab = maketrans(intab, outtab)<br/><br/>str = "this is string example....wow!!!";<br/>print str.translate(trantab);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>th3s 3s str3ng 2x1mpl2....w4w!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python3字典update()方法	Python 字典 update() 函数把字典dict2的键/值对更新到dict里。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 update() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 update() 函数把字典dict2的键/值对更新到dict里。</p><h2>语法</h2><p>update()方法语法：</p><pre><br/>dict.update(dict2)<br/></pre><h2>参数</h2><ul><li>dict2 -- 添加到指定字典dict里的字典。</li></ul><h2>返回值</h2><p>该方法没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 update()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>dict = {'Name': 'Runoob', 'Age': 7}<br/>dict2 = {'Sex': 'female' }<br/><br/>dict.update(dict2)<br/>print ("更新字典 dict : ", dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>更新字典 dict :  {'Sex': 'female', 'Age': 7, 'Name': 'Runoob'}<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Python3os.mkfifo()方法	os.mkfifo() 方法用于创建指令路径的管道，并设置权限模式。默认的模式为 0666 (八进制)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.mkfifo() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.mkfifo() 方法用于创建指令路径的管道，并设置权限模式。默认的模式为 0666 (八进制)。</p><h3>语法</h3><p><b>mkfifo()</b>方法语法格式如下：</p><pre><br/>os.mkfifo(path[, mode])<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  要创建的目录</p></li><li><p><b>mode</b> --  要为目录设置的权限数字模式</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 mkfifo() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 创建的目录<br/>path = "/tmp/hourly"<br/><br/>os.mkfifo( path, 0644 )<br/><br/>print ("路径被创建")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>路径被创建<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3lstrip()方法	lstrip() 方法用于截掉字符串左边的空格或指定字符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 lstrip()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>lstrip() 方法用于截掉字符串左边的空格或指定字符。</p><h2>语法</h2><p>lstrip()方法语法：</p><pre><br/>str.lstrip([chars])<br/></pre><h2>参数</h2><ul><li>chars --指定截取的字符。</li></ul><h2>返回值</h2><p>返回截掉字符串左边的空格或指定字符后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了lstrip()的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "     this is string example....wow!!!     ";<br/>print( str.lstrip() );<br/>str = "88888888this is string example....wow!!!8888888";<br/>print( str.lstrip('8') );<br/></pre><p>以上实例输出结果如下：</p><pre><br/>this is string example....wow!!!     <br/>this is string example....wow!!!8888888<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
PythonFileclose()方法	close() 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作，
否则会触发 ValueError 错误。 
 close() 方法允许调用多次。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File close() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>close()</b> 方法用于关闭一个已打开的文件。关闭后的文件不能再进行读写操作，否则会触发 <i>ValueError</i> 错误。  close() 方法允许调用多次。</p><p>当 file 对象，被引用到操作另外一个文件时，Python 会自动关闭之前的 file 对象。使用 close() 方法关闭文件是一个好的习惯。</p><h3>语法</h3><p>close() 方法语法如下：</p><pre><br/>fileObject.close();<br/></pre><h3>参数</h3><ul><li><p><b>无</b></p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 close() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("runoob.txt", "wb")<br/>print "文件名为: ", fo.name<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/></pre><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p></div></div>
Pythonissubclass()函数	issubclass() 方法用于判断参数 class 是否是类型参数 classinfo 的子类。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> issubclass() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>issubclass()</b> 方法用于判断参数 class 是否是类型参数 classinfo 的子类。</p><h3>语法</h3><p>以下是 issubclass() 方法的语法:</p><pre><br/>issubclass(class, classinfo)<br/></pre><h3>参数</h3><ul><li>class -- 类。</li><li>classinfo -- 类。</li></ul><h3>返回值</h3><p>如果 class 是 classinfo 的子类返回 True，否则返回 False。</p><hr/><h2>实例</h2><p>以下展示了使用 basestring 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-code">:    </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">issubclass</span><span class="hl-brackets">(</span><span class="hl-identifier">B</span><span class="hl-code">,</span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 返回 True</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythontimestrftime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time strftime()方法</h1><hr/><h2>描述</h2><p>Python time strftime() 函数接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数format决定。</p><h2>语法</h2><p>strftime()方法语法：</p><pre><br/>time.strftime(format[, t])<br/></pre><h2>参数</h2><ul><li>format -- 格式字符串。</li><li>t -- 可选的参数t是一个struct_time对象。</li></ul><h2>返回值</h2><p>返回以可读字符串表示的当地时间。</p><h2>说明</h2><p>python中时间日期格式化符号：</p><ul><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12）</li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身</li></ul><h2>实例</h2><p>以下实例展示了 strftime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>t = (2009, 2, 17, 17, 3, 38, 1, 48, 0)<br/>t = time.mktime(t)<br/>print time.strftime("%b %d %Y %H:%M:%S", time.gmtime(t))<br/></pre><p>以上实例输出结果为：</p><pre><br/>Feb 17 2009 09:03:38<br/></pre></div></div>
Pythontimetime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time time()方法</h1><hr/><h2>描述</h2><p>Python time time() 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</p><h2>语法</h2><p>time()方法语法：</p><pre><br/>time.time()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回当前时间的时间戳（1970纪元后经过的浮点秒数）。</p><h2>实例</h2><p>以下实例展示了 time() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>print "time.time(): %f " %  time.time()<br/>print time.localtime( time.time() )<br/>print time.asctime( time.localtime(time.time()) )<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.time(): 1234892919.655932<br/>(2009, 2, 17, 10, 48, 39, 1, 48, 0)<br/>Tue Feb 17 10:48:39 2009<br/></pre></div></div>
Python3os.write()方法	os.write() 方法用于写入字符串到文件描述符 fd 中. 返回实际写入的字符串长度。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.write() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.write() 方法用于写入字符串到文件描述符 fd 中. 返回实际写入的字符串长度。</p><p>在Unix中有效。</p><h3>语法</h3><p><b>write()</b>方法语法格式如下：</p><pre><br/>os.write(fd, str)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li><li><p><b>str</b> -- 写入的字符串。</p></li></ul><h3>返回值</h3><p>该方法返回写入的实际位数。</p><h3>实例</h3><p>以下实例演示了 write() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open("f1.txt",os.O_RDWR|os.O_CREAT)<br/><br/># 写入字符串<br/>str = "This is runoob.com site"<br/>ret = os.write(fd,bytes(str, 'UTF-8'))<br/><br/># 输入返回值<br/>print ("写入的位数为: ")<br/>print (ret)<br/><br/>print ("写入成功")<br/><br/># 关闭文件<br/>os.close(fd)<br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>写入的位数为: <br/>23<br/>写入成功<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.utime()方法	os.utime() 方法用于设置指定路径文件最后的修改和访问时间。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.utime() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.utime() 方法用于设置指定路径文件最后的修改和访问时间。</p><p>在Unix，Windows中有效。</p><h3>语法</h3><p><b>utime()</b>方法语法格式如下：</p><pre><br/>os.utime(path, times)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 文件路径</p></li><li><p><b>times</b> -- 如果时间是 None, 则文件的访问和修改设为当前时间 。 否则, 时间是一个 2-tuple数字, (atime, mtime) 用来分别作为访问和修改的时间。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 utime() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示文件的 stat 信息<br/>stinfo = os.stat('a2.py')<br/>print (stinfo)<br/><br/># 使用 os.stat 来接收文件的访问和修改时间<br/>print ("a2.py 的访问时间: %s" %stinfo.st_atime)<br/>print ("a2.py 的修改时间: %s" %stinfo.st_mtime)<br/><br/># 修改访问和修改时间<br/>os.utime("a2.py",(1330712280, 1330712292))<br/>print ("done!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.stat_result(st_mode=33188, st_ino=3940649674337682L, st_dev=277923425L, st<br/>_nlink=1, st_uid=400, st_gid=401, st_size=335L, st_atime=1330498070, st_mtime=13<br/>30498074, st_ctime=1330498065)<br/>a2.py 的访问时间: 1330498070<br/>a2.py 的修改时间: 1330498074<br/>done!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3Listclear()方法	clear() 函数用于清空列表，类似于 del a[:]。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List clear()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>clear() 函数用于清空列表，类似于 <b>del a[:]</b>。</p><h2>语法</h2><p>clear()方法语法：</p><pre><br/>list.clear()<br/></pre><h2>参数</h2><ul><li>无。</li></ul><h2>返回值</h2><p>该方法没有返回值。</p><h2>实例</h2><p>以下实例展示了 clear()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao', 'Baidu']<br/>list1.clear()<br/>print ("列表清空后 : ", list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表清空后 :  []<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Pythondivmod()函数	函数语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python divmod() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。</p><p>在 python 2.3 版本之前不允许处理复数。</p><h3>函数语法</h3><pre><br/>divmod(a, b)<br/></pre><p>参数说明：</p><ul><li>a: 数字</li><li>b: 数字</li></ul><h3>实例</h3><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">divmod</span><span class="hl-brackets">(</span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">divmod</span><span class="hl-brackets">(</span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">divmod</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">+</span><span class="hl-number">2j</span><span class="hl-code">,</span><span class="hl-number">1</span><span class="hl-code">+</span><span class="hl-number">0.5j</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-number">1</span><span class="hl-code">+</span><span class="hl-number">0j</span><span class="hl-brackets">)</span><span class="hl-code">, </span><span class="hl-number">1.5j</span><span class="hl-brackets">)</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.tmpfile()方法	os.tmpfile() 方法用于返回一个打开的模式为(w+b)的临时文件对象，这文件对象没有文件夹入口，没有文件描述符，将会自动删除。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.tmpfile() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tmpfile() 方法用于返回一个打开的模式为(w+b)的临时文件对象，这文件对象没有文件夹入口，没有文件描述符，将会自动删除。</p><h3>语法</h3><p><b>tmpfile()</b>方法语法格式如下：</p><pre><br/>os.tmpfile<br/></pre><h3>参数</h3><ul><li><p>无</p></li></ul><h3>返回值</h3><p>返回一个临时文件对象。</p><h3>实例</h3><p>以下实例演示了 tmpfile() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os<br/><br/># 创建临时文件对象<br/>tmpfile = os.tmpfile()<br/>tmpfile.write('临时文件在这创建了.....')<br/>tmpfile.seek(0)<br/><br/>print tmpfile.read()<br/>tmpfile.close<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>临时文件在这创建了.....<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3max()方法	max() 方法返回字符串中最大的字母。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 max()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>max() 方法返回字符串中最大的字母。</p><h2>语法</h2><p>max()方法语法：</p><pre><br/>max(str)<br/></pre><h2>参数</h2><ul><li>str -- 字符串。</li></ul><h2>返回值</h2><p>返回字符串中最大的字母。</p><h2>实例</h2><p>以下实例展示了max()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "runoob"<br/>print ("最大字符: " + max(str))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>最大字符: u<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python字典(Dictionary)get()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) get()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) get() 函数返回指定键的值，如果值不在字典中返回默认值。</p><h2>语法</h2><p>get()方法语法：</p><pre><br/>dict.get(key, default=None)<br/></pre><h2>参数</h2><ul><li>key -- 字典中要查找的键。</li><li>default -- 如果指定键的值不存在时，返回该默认值值。</li></ul><h2>返回值</h2><p>返回指定键的值，如果值不在字典中返回默认值None。</p><h2>实例</h2><p>以下实例展示了 get()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 27}<br/><br/>print "Value : %s" %  dict.get('Age')<br/>print "Value : %s" %  dict.get('Sex', "Never")<br/></pre><p>以上实例输出结果为：</p><pre><br/>Value : 27<br/>Value : Never<br/></pre></div></div>
Pythonos.minor()方法	os.minor() 方法用于从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.minor() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.minor() 方法用于从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。</p><h3>语法</h3><p><b>minor()</b>方法语法格式如下：</p><pre><br/>os.minor(device)<br/></pre><h3>参数</h3><ul><li><p><b>device</b> --  原始的设备(使用stat中的st_dev或者st_rdev field )</p></li></ul><h3>返回值</h3><p>返回设备 minor 号。</p><h3>实例</h3><p>以下实例演示了 minor() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/>path = "/var/www/html/foo.txt"<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/># 获取 major 和 minor 设备号<br/>major_dnum = os.major(info.st_dev)<br/>minor_dnum = os.minor(info.st_dev)<br/><br/>print "Major 设备号 :", major_dnum<br/>print "Minor 设备号 :", minor_dnum<br/><br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Major 设备号 : 0<br/>Minor 设备号 : 103<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.readlink()方法	os.readlink() 方法用于返回软链接所指向的文件。可能返回绝对火相对路径。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.readlink() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.readlink() 方法用于返回软链接所指向的文件。可能返回绝对火相对路径。</p><p>在Unix中有效</p><h3>语法</h3><p><b>readlink()</b>方法语法格式如下：</p><pre><br/>os.readlink(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要查找的软链接路径</p></li></ul><h3>返回值</h3><p>返回软链接所指向的文件 </p><h3>实例</h3><p>以下实例演示了 readlink() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os<br/><br/>src = '/usr/bin/python'<br/>dst = '/tmp/python'<br/><br/># 创建软链接<br/>os.symlink(src, dst)<br/><br/># 使用软链接显示源链接<br/>path = os.readlink( dst )<br/>print (path)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>/usr/bin/python<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonraw_input()函数	
注意：input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。
除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。
注意：python3 里 input() 默认接收到的是 str 类型。	<div class="article-body"><div class="article-intro" id="content"><h1>Python raw_input() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><p>python raw_input() 用来获取控制台的输入。</p><p>raw_input() 将所有输入作为字符串看待，返回字符串类型。</p><blockquote><p>注意：input() 和 raw_input() 这两个函数均能接收 字符串 ，但 raw_input() 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。</p><p>除非对 input() 有特别需要，否则一般情况下我们都是推荐使用 raw_input() 来与用户交互。</p><p>注意：python3 里 input() 默认接收到的是 str 类型。</p></blockquote><h3>函数语法</h3><pre><br/>raw_input([prompt])<br/></pre><p>参数说明：</p><ul><li>a: 数字</li><li>b: 数字</li></ul><h3>实例</h3><div class="example"><h2 class="example">raw_input() 将所有输入作为字符串看待</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">raw_input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-number">123</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;              </span><span class="hl-comment"># 字符串</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">raw_input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-identifier">runoob</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;              </span><span class="hl-comment"># 字符串</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><div class="example"><h2 class="example">input() 需要输入 python 表达式</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-number">123</span><span class="hl-code"> </span><span class="hl-comment"># 输入整数</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">int</span><span class="hl-quotes">'</span><span class="hl-code">&gt;               </span><span class="hl-comment"># 整型</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-quotes">"</span><span class="hl-string">runoob</span><span class="hl-quotes">"</span><span class="hl-code"> </span><span class="hl-comment"># 正确，字符串表达式</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">type</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;             </span><span class="hl-comment"># 字符串</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">input:</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">input</span><span class="hl-code">:</span><span class="hl-identifier">runoob</span><span class="hl-code"> </span><span class="hl-comment"># 报错，不是表达式</span><span class="hl-code"></span><span class="hl-identifier">Traceback</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">most</span><span class="hl-code"> </span><span class="hl-identifier">recent</span><span class="hl-code"> </span><span class="hl-identifier">call</span><span class="hl-code"> </span><span class="hl-identifier">last</span><span class="hl-brackets">)</span><span class="hl-code">:  </span><span class="hl-identifier">File</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">&lt;stdin&gt;</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt;  </span><span class="hl-identifier">File</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">&lt;string&gt;</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">line</span><span class="hl-code"> </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">module</span><span class="hl-code">&gt;</span><span class="hl-reserved">NameError</span><span class="hl-code">: </span><span class="hl-identifier">name</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-reserved">is</span><span class="hl-code"> </span><span class="hl-reserved">not</span><span class="hl-code"> </span><span class="hl-identifier">defined</span><span class="hl-code">&lt;</span><span class="hl-identifier">type</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">str</span><span class="hl-quotes">'</span><span class="hl-code">&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonproperty()函数	property() 函数的作用是在新式类中返回属性值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> property() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>property()</b> 函数的作用是在新式类中返回属性值。</p><h3>语法</h3><p>以下是 property() 方法的语法:</p><pre><br/>class property([fget[, fset[, fdel[, doc]]]])<br/></pre><h3>参数</h3><ul><li>fget --  获取属性值的函数<li>fset  -- 设置属性值的函数</li><li>fdel -- 删除属性值函数</li><li>doc -- 属性描述信息</li></li></ul><h3>返回值</h3><p>返回新式类属性。</p><h3>实例</h3><div class="example"><h2 class="example">定义一个可控属性值 x</h2><div class="example_code"><div class="hl-main"><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">C</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">__init__</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code"> = </span><span class="hl-reserved">None</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">getx</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">setx</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-code">, </span><span class="hl-identifier">value</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code"> = </span><span class="hl-identifier">value</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">delx</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-reserved">del</span><span class="hl-code"> </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code"></span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-builtin">property</span><span class="hl-brackets">(</span><span class="hl-identifier">getx</span><span class="hl-code">, </span><span class="hl-identifier">setx</span><span class="hl-code">, </span><span class="hl-identifier">delx</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">I'm the 'x' property.</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>如果 <em>c</em> 是 <em>C</em> 的实例化, c.x 将触发 getter,c.x = value 将触发 setter ， del c.x 触发 deleter。</p><p>如果给定 doc 参数，其将成为这个属性值的 docstring，否则 property 函数就会复制 fget 函数的 docstring（如果有的话）。</p><p>将 property 函数用作装饰器可以很方便的创建只读属性：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Parrot</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">__init__</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_voltage</span><span class="hl-code"> = </span><span class="hl-number">100000</span><span class="hl-code">     @</span><span class="hl-identifier">property</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">voltage</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-quotes">"""</span><span class="hl-string">Get the current voltage.</span><span class="hl-quotes">"""</span><span class="hl-code"></span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_voltage</span></div></div></div><p>上面的代码将 voltage() 方法转化成同名只读属性的 getter 方法。</p><p>property 的 getter,setter 和 deleter 方法同样可以用作装饰器：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">C</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">__init__</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code"> = </span><span class="hl-reserved">None</span><span class="hl-code">     @</span><span class="hl-identifier">property</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-quotes">"""</span><span class="hl-string">I'm the 'x' property.</span><span class="hl-quotes">"""</span><span class="hl-code"></span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code">     @</span><span class="hl-identifier">x</span><span class="hl-code">.</span><span class="hl-identifier">setter</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-code">, </span><span class="hl-identifier">value</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span><span class="hl-code"> = </span><span class="hl-identifier">value</span><span class="hl-code">     @</span><span class="hl-identifier">x</span><span class="hl-code">.</span><span class="hl-identifier">deleter</span><span class="hl-code"></span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-reserved">del</span><span class="hl-code"> </span><span class="hl-identifier">self</span><span class="hl-code">.</span><span class="hl-identifier">_x</span></div></div></div><p>这个代码和第一个例子完全相同，但要注意这些额外函数的名字和 property 下的一样，例如这里的 x。</p><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3Listlist()方法	list() 方法用于将元组转换为列表。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List list()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>list() 方法用于将元组转换为列表。</p><p><strong>注：</strong>元组与列表是非常类似的，区别在于元组的元素值不能修改，元组是放在括号中，列表是放于方括号中。</p><h2>语法</h2><p>list()方法语法：</p><pre><br/>list( seq )<br/></pre><h2>参数</h2><ul><li>list -- 要转换为列表的元组。</li></ul><h2>返回值</h2><p>返回列表。</p><h2>实例</h2><p>以下实例展示了 list()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>aTuple = (123, 'Google', 'Runoob', 'Taobao')<br/>list1 = list(aTuple)<br/>print ("列表元素 : ", list1)<br/><br/>str="Hello World"<br/>list2=list(str)<br/>print ("列表元素 : ", list2)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表元素 :  [123, 'Google', 'Runoob', 'Taobao']<br/>列表元素 :  ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3os.fdatasync()方法	os.fdatasync() 方法用于强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。如果你需要刷新缓冲区可以使用该方法。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fdatasync() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fdatasync() 方法用于强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。如果你需要刷新缓冲区可以使用该方法。</p><p> Unix上可用。</p><h3>语法</h3><p><b>fdatasync()</b>方法语法格式如下：</p><pre><br/>os.fdatasync(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fdatasync() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件 "/tmp/foo.txt"<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 使用 fdatasync() 方法<br/>os.fdatasync(fd)<br/><br/># 读取文件<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print ("读取的字符是 : ", str)<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符是 :  This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythontimegmtime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time gmtime()方法</h1><hr/><h2>描述</h2><p>Python time gmtime() 函数将一个时间戳转换为UTC时区（0时区）的struct_time，可选的参数sec表示从1970-1-1以来的秒数。其默认值为time.time()，函数返回time.struct_time类型的对象。（struct_time是在time模块中定义的表示时间的对象）。</p><h2>语法</h2><p>gmtime()方法语法：</p><pre><br/>time.gmtime([ sec ])<br/></pre><h2>参数</h2><ul><li>sec -- 转换为time.struct_time类型的对象的秒数。</li></ul><h2>返回值</h2><p>该函数没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 gmtime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>print "time.gmtime() : %s" % time.gmtime()<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.gmtime() : time.struct_time(tm_year=2016, tm_mon=4, tm_mday=7, tm_hour=2, tm_min=55, tm_sec=45, tm_wday=3, tm_yday=98, tm_isdst=0)<br/></pre></div></div>
Pythonsin()函数	 sin() 返回的x弧度的正弦值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> sin() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>sin()</b> 返回的x弧度的正弦值。</p><hr/><h2>语法</h2><p>以下是 sin() 方法的语法:</p><pre><br/>import math<br/><br/>math.sin(x)<br/></pre><p><strong>注意：</strong>sin()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回的x弧度的正弦值，数值在 -1 到 1 之间。</p><hr/><h2>实例</h2><p>以下展示了使用 sin() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "sin(3) : ",  math.sin(3)<br/>print "sin(-3) : ",  math.sin(-3)<br/>print "sin(0) : ",  math.sin(0)<br/>print "sin(math.pi) : ",  math.sin(math.pi)<br/>print "sin(math.pi/2) : ",  math.sin(math.pi/2)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>sin(3) :  0.14112000806<br/>sin(-3) :  -0.14112000806<br/>sin(0) :  0.0<br/>sin(math.pi) :  1.22460635382e-16<br/>sin(math.pi/2) :  1<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonhypot()函数	 hypot() 返回欧几里德范数 sqrt(x*x + y*y)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> hypot() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>hypot()</b> 返回欧几里德范数 sqrt(x*x + y*y)。</p><hr/><h2>语法</h2><p>以下是 hypot() 方法的语法:</p><pre><br/>import math<br/><br/>math.hypot(x, y)<br/></pre><p><strong>注意：</strong>hypot()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li><li>y -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回欧几里德范数 sqrt(x*x + y*y)。</p><hr/><h2>实例</h2><p>以下展示了使用 hypot() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "hypot(3, 2) : ",  math.hypot(3, 2)<br/>print "hypot(-3, 3) : ",  math.hypot(-3, 3)<br/>print "hypot(0, 2) : ",  math.hypot(0, 2)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>hypot(3, 2) :  3.60555127546<br/>hypot(-3, 3) :  4.24264068712<br/>hypot(0, 2) :  2.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3isdecimal()方法	isdecimal() 方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isdecimal()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>isdecimal() 方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。</p><p><strong>注意:</strong>定义一个十进制字符串，只需要在字符串前添加 'u' 前缀即可。</p><h2>语法</h2><p>isdecimal()方法语法：</p><pre><br/>str.isdecimal()<br/></pre><h2>参数</h2><ul><li>无</li></ul><h2>返回值</h2><p>如果字符串是否只包含十进制字符返回True，否则返回False。</p><h2>实例</h2><p>以下实例展示了 isdecimal()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "runoob2016"<br/>print (str.isdecimal())<br/><br/>str = "23443434"<br/>print (str.isdecimal())<br/></pre><p>以上实例输出结果如下：</p><pre><br/>False<br/>True<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3exec函数	exec 执行储存在字符串或文件中的 Python 语句，相比于 eval，exec可以执行更复杂的 Python 代码。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> exec 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-built-in-functions.html"><img alt="Python3 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 内置函数</a></p><hr/><h2>描述</h2><p>exec 执行储存在字符串或文件中的 Python 语句，相比于 eval，exec可以执行更复杂的 Python 代码。</p></div></div>
Pythontan()函数	 tan() 返回x弧度的正弦值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> tan() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>tan()</b> 返回x弧度的正弦值。</p><hr/><h2>语法</h2><p>以下是 tan() 方法的语法:</p><pre><br/>import math<br/><br/>math.tan(x)<br/></pre><p><strong>注意：</strong>tan()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回x弧度的正弦值，数值在 -1 到 1 之间。</p><hr/><h2>实例</h2><p>以下展示了使用 tan() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "tan(3) : ",  math.tan(3)<br/>print "tan(-3) : ",  math.tan(-3)<br/>print "tan(0) : ",  math.tan(0)<br/>print "tan(math.pi) : ",  math.tan(math.pi)<br/>print "tan(math.pi/2) : ",  math.tan(math.pi/2)<br/>print "tan(math.pi/4) : ",  math.tan(math.pi/4)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>tan(3) :  -0.142546543074<br/>tan(-3) :  0.142546543074<br/>tan(0) :  0.0<br/>tan(math.pi) :  -1.22460635382e-16<br/>tan(math.pi/2) :  1.63317787284e+16<br/>tan(math.pi/4) :  1.0<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonany()函数	any() 函数用于判断给定的可迭代参数 iterable 是否全部为空对象，如果都为空、0、false，则返回 False，如果不都为空、0、false，则返回 True。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> any() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>any() 函数用于判断给定的可迭代参数 iterable 是否全部为空对象，如果都为空、0、false，则返回 False，如果不都为空、0、false，则返回 True。</p><p>函数等价于：</p><pre><br/>def any(iterable):<br/>    for element in iterable:<br/>        if element:<br/>            return True<br/>    return False<br/></pre><p>Python 2.5 以上版本可用。</p><h3>语法</h3><p>以下是 any() 方法的语法:</p><pre><br/>any(iterable)<br/></pre><h3>参数</h3><ul><li>iterable -- 元组或列表。</li></ul><h3>返回值</h3><p>如果都为空、0、false，则返回false，如果不都为空、0、false，则返回true。</p><hr/><h2>实例</h2><p>以下展示了使用 any() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表list，元素都不为空或0</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表list，存在一个为空的元素</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-reserved">False</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表list,元素全为0,'',false</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组tuple，元素都不为空或0</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组tuple，存在一个为空的元素</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-reserved">False</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组tuple，元素全为0,'',false</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">  &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 空列表</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-identifier">any</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 空元组</span><span class="hl-code"></span><span class="hl-reserved">False</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonmap()函数	map() 会根据提供的函数对指定序列做映射。	<div class="article-body"><div class="article-intro" id="content"><h1>Python map() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>map()</b> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><h2>语法</h2><p>map() 函数语法：</p><pre><br/>map(function, iterable, ...)<br/></pre><h2>参数</h2><ul><li>function -- 函数，有两个参数</li><li>iterable -- 一个或多个序列</li></ul><h2>返回值</h2><p>Python 2.x 返回列表。</p><p>Python 3.x 返回迭代器。</p><h2>实例</h2><p>以下实例展示了 map() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">square</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code"> :            </span><span class="hl-comment"># 计算平方数</span><span class="hl-code">...     </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code"> ** </span><span class="hl-number">2</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-builtin">map</span><span class="hl-brackets">(</span><span class="hl-identifier">square</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">,</span><span class="hl-number">2</span><span class="hl-code">,</span><span class="hl-number">3</span><span class="hl-code">,</span><span class="hl-number">4</span><span class="hl-code">,</span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 计算列表各个元素的平方</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-code">, </span><span class="hl-number">16</span><span class="hl-code">, </span><span class="hl-number">25</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">map</span><span class="hl-brackets">(</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">: </span><span class="hl-identifier">x</span><span class="hl-code"> ** </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 使用 lambda 匿名函数</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-code">, </span><span class="hl-number">16</span><span class="hl-code">, </span><span class="hl-number">25</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-comment"># 提供了两个列表，对相同位置的列表数据进行相加</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">map</span><span class="hl-brackets">(</span><span class="hl-reserved">lambda</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">, </span><span class="hl-identifier">y</span><span class="hl-code">: </span><span class="hl-identifier">x</span><span class="hl-code"> + </span><span class="hl-identifier">y</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">9</span><span class="hl-brackets">]</span><span class="hl-code">, </span><span class="hl-brackets">[</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">6</span><span class="hl-code">, </span><span class="hl-number">8</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">7</span><span class="hl-code">, </span><span class="hl-number">11</span><span class="hl-code">, </span><span class="hl-number">15</span><span class="hl-code">, </span><span class="hl-number">19</span><span class="hl-brackets">]</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonseed()函数	 seed() 方法改变随机数生成器的种子，可以在调用其他随机模块函数之前调用此函数。。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> seed() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>seed()</b> 方法改变随机数生成器的种子，可以在调用其他随机模块函数之前调用此函数。。</p><hr/><h2>语法</h2><p>以下是 seed() 方法的语法:</p><pre><br/>import random<br/><br/>random.seed ( [x] )<br/></pre><p><strong>注意：</strong>seed(()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</li></ul><hr/><h2>返回值</h2><p>本函数没有返回值。</p><hr/><h2>实例</h2><p>以下展示了使用 seed(() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import random<br/><br/>random.seed( 10 )<br/>print "Random number with seed 10 : ", random.random()<br/><br/># 生成同一个随机数<br/>random.seed( 10 )<br/>print "Random number with seed 10 : ", random.random()<br/><br/># 生成同一个随机数<br/>random.seed( 10 )<br/>print "Random number with seed 10 : ", random.random()<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>Random number with seed 10 :  0.57140259469<br/>Random number with seed 10 :  0.57140259469<br/>Random number with seed 10 :  0.57140259469<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonbin()函数	bin() 返回一个整数 int 或者长整数 long int 的二进制表示。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> bin() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>bin()</b> 返回一个整数 int 或者长整数 long int 的二进制表示。</p><h3>语法</h3><p>以下是 bin() 方法的语法:</p><pre><br/>bin(x)<br/></pre><h3>参数</h3><ul><li>x --  int 或者 long int 数字</li></ul><h3>返回值</h3><p>字符串。</p><hr/><h2>实例</h2><p>以下展示了使用 bin 函数的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">bin</span><span class="hl-brackets">(</span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">0b1010</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">bin</span><span class="hl-brackets">(</span><span class="hl-number">20</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">0b10100</span><span class="hl-quotes">'</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.removedirs()方法	os.removedirs() 方法用于递归删除目录。像rmdir(), 如果子文件夹成功删除, removedirs()才尝试它们的父文件夹,直到抛出一个error(它基本上被忽略,因为它一般意味着你文件夹不为空)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.removedirs() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.removedirs() 方法用于递归删除目录。像rmdir(), 如果子文件夹成功删除, removedirs()才尝试它们的父文件夹,直到抛出一个error(它基本上被忽略,因为它一般意味着你文件夹不为空)。</p><h3>语法</h3><p><b>removedirs()</b>方法语法格式如下：</p><pre><br/>os.removedirs(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要移除的目录路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 removedirs() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 列出目录<br/>print "目录为: %s" %os.listdir(os.getcwd())<br/><br/># 移除<br/>os.removedirs("/test")<br/><br/># 列出移除后的目录<br/>print "移除后目录为:" %os.listdir(os.getcwd())<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[  'a1.txt','resume.doc','a3.py','test' ]<br/>移除后目录为:<br/>[  'a1.txt','resume.doc','a3.py' ]<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonendswith()方法	Python endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python endswith()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数"start"与"end"为检索字符串的开始与结束位置。</p><h2>语法</h2><p>endswith()方法语法：</p><pre><br/>str.endswith(suffix[, start[, end]])<br/></pre><h2>参数</h2><ul><li>suffix -- 该参数可以是一个字符串或者是一个元素。</li><li>start -- 字符串中的开始位置。</li><li>end -- 字符中结束位置。</li></ul><h2>返回值</h2><p>如果字符串含有指定的后缀返回True，否则返回False。</p><h2>实例</h2><p>以下实例展示了endswith()方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/><br/>suffix = "wow!!!";<br/>print str.endswith(suffix);<br/>print str.endswith(suffix,20);<br/><br/>suffix = "is";<br/>print str.endswith(suffix, 2, 4);<br/>print str.endswith(suffix, 2, 6);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>True<br/>True<br/>True<br/>False<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonreplace()方法	Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。	<div class="article-body"><div class="article-intro" id="content"><h1>Python replace()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p><h2>语法</h2><p>replace()方法语法：</p><pre><br/>str.replace(old, new[, max])<br/></pre><h2>参数</h2><ul><li>old -- 将被替换的子字符串。</li><li>new  -- 新字符串，用于替换old子字符串。</li><li>max -- 可选字符串, 替换不超过 max 次</li></ul><h2>返回值</h2><p>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。</p><h2>实例</h2><p>以下实例展示了replace()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!! this is really string";<br/>print str.replace("is", "was");<br/>print str.replace("is", "was", 3);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>thwas was string example....wow!!! thwas was really string<br/>thwas was string example....wow!!! thwas is really string<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Pythonatan()函数	 atan() 返回x的反正切弧度值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> atan() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>atan()</b> 返回x的反正切弧度值。</p><hr/><h2>语法</h2><p>以下是 atan() 方法的语法:</p><pre><br/>import math<br/><br/>math.atan(x)<br/></pre><p><strong>注意：</strong>atan()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回x的反正切弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 atan() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "atan(0.64) : ",  math.atan(0.64)<br/>print "atan(0) : ",  math.atan(0)<br/>print "atan(10) : ",  math.atan(10)<br/>print "atan(-1) : ",  math.atan(-1)<br/>print "atan(1) : ",  math.atan(1)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>atan(0.64) :  0.569313191101<br/>atan(0) :  0.0<br/>atan(10) :  1.4711276743<br/>atan(-1) :  -0.785398163397<br/>atan(1) :  0.785398163397<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
PythonFilewritelines()方法	writelines() 方法用于向文件中写入一序列的字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File writelines() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>writelines()</b> 方法用于向文件中写入一序列的字符串。</p><p>这一序列字符串可以是由迭代对象产生的，如一个字符串列表。</p><p>换行需要制定换行符 \n。</p><h3>语法</h3><p>writelines() 方法语法如下：</p><pre><br/>fileObject.writelines( [ str ])<br/></pre><h3>参数</h3><ul><li><p><b>str</b> -- 要写入文件的字符串序列。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 writelines() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("test.txt", "w")<br/>print "文件名为: ", fo.name<br/>seq = ["菜鸟教程 1\n", "菜鸟教程 2"]<br/>fo.writelines( seq )<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  test.txt<br/></pre><p>查看文件内容：</p><pre><br/>$ cat test.txt <br/>菜鸟教程 1<br/>菜鸟教程 2<br/></pre><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p></div></div>
Python3os.fpathconf()方法	os.fpathconf() 方法用于返回一个打开的文件的系统配置信息。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.fpathconf() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fpathconf() 方法用于返回一个打开的文件的系统配置信息。</p><p>Unix上可用。</p><h3>语法</h3><p><b>fpathconf()</b>方法语法格式如下：</p><pre><br/>os.fpathconf(fd, name)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 打开的文件的描述符。</p></li><li><p><b>name</b> -- 可选，和buffersize参数和Python内建的open函数一样，mode参数可以指定『r,w,a,r+,w+,a+,b』等，表示文件的是只读的还是可以读写的，以及打开文件是以二进制还是文本形式打开。这些参数和C语言中的&lt;stdio.h&gt;中fopen函数中指定的mode参数类似。</p></li><li><p><b>bufsize</b> -- 检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。一些平台也定义了一些额外的名字。这些名字在主操作系统上pathconf_names的字典中。对于不在pathconf_names中的配置变量，传递一个数字作为名字，也是可以接受的。</p></li></ul><h3>返回值</h3><p>返回一个打开的文件的系统配置信息。</p><h3>实例</h3><p>以下实例演示了 fpathconf() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/>print ("%s" % os.pathconf_names)<br/><br/># 获取最大文件连接数<br/>no = os.fpathconf(fd, 'PC_LINK_MAX')<br/>print ("文件最大连接数为 :%d" % no)<br/><br/># 获取文件名最大长度<br/>no = os.fpathconf(fd, 'PC_NAME_MAX')<br/>print ("文件名最大长度为 :%d" % no)<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>{'PC_MAX_INPUT': 2, 'PC_VDISABLE': 8, 'PC_SYNC_IO': 9, <br/>'PC_SOCK_MAXBUF': 12, 'PC_NAME_MAX': 3, 'PC_MAX_CANON': 1, <br/>'PC_PRIO_IO': 11, 'PC_CHOWN_RESTRICTED': 6, 'PC_ASYNC_IO': 10, <br/>'PC_NO_TRUNC': 7, 'PC_FILESIZEBITS': 13, 'PC_LINK_MAX': 0, <br/>'PC_PIPE_BUF': 5, 'PC_PATH_MAX': 4}<br/><br/>文件最大连接数为 :127<br/>文件名最大长度为 :255<br/>Closed the file successfully!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3os.makedev()方法	os.makedev() 方法用于以major和minor设备号组成一个原始设备号。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.makedev() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.makedev() 方法用于以major和minor设备号组成一个原始设备号。</p><h3>语法</h3><p><b>makedev()</b>方法语法格式如下：</p><pre><br/>os.makedev(major, minor)<br/></pre><h3>参数</h3><ul><li><p><b>major</b> --  Major 设备号。</p></li><li><p><b>minor</b> --  inor 设备号。</p></li></ul><h3>返回值</h3><p>返回设备号。</p><h3>实例</h3><p>以下实例演示了 makedev() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/>path = "/var/www/html/foo.txt"<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/># 获取 major 和 minor 设备号<br/>major_dnum = os.major(info.st_dev)<br/>minor_dnum = os.minor(info.st_dev)<br/><br/>print ("Major 设备号 :", major_dnum)<br/>print ("Minor 设备号 :", minor_dnum)<br/><br/># 生成设备号<br/>dev_num = os.makedev(major_dnum, minor_dnum)<br/>print ("设备号 :", dev_num)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Major 设备号 : 0<br/>Minor 设备号 : 103<br/>设备号 : 103<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3capitalize()方法	Python capitalize()将字符串的第一个字母变成大写,其他字母变小写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 capitalize()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python capitalize()将字符串的第一个字母变成大写,其他字母变小写。</p><h2>语法</h2><p>capitalize()方法语法：</p><pre><br/>str.capitalize()<br/></pre><h2>参数</h2><ul><li>无。</li></ul><h2>返回值</h2><p>该方法返回一个首字母大写的字符串。</p><h2>实例</h2><p>以下实例展示了capitalize()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example from runoob....wow!!!"<br/><br/>print ("str.capitalize() : ", str.capitalize())<br/></pre><p>以上实例输出结果如下：</p><pre><br/>str.capitalize() :  This is string example from runoob....wow!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonos.popen()方法	os.popen() 方法用于从一个命令打开一个管道。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.popen() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.popen() 方法用于从一个命令打开一个管道。</p><p>在Unix，Windows中有效</p><h3>语法</h3><p><b>popen()</b>方法语法格式如下：</p><pre><br/>os.popen(command[, mode[, bufsize]])<br/></pre><h3>参数</h3><ul><li><p><b>command</b> -- 使用的命令。</p></li><li><p><b>mode</b> -- 模式权限可以是 'r'(默认) 或 'w'。</p></li><li><p><b>bufsize</b> -- 指明了文件需要的缓冲大小：0意味着无缓冲；1意味着行缓冲；其它正值表示使用参数大小的缓冲（大概值，以字节为单位）。负的bufsize意味着使用系统的默认值，一般来说，对于tty设备，它是行缓冲；对于其它文件，它是全缓冲。如果没有改参数，使用系统的默认值。</p></li></ul><h3>返回值</h3><p>返回一个文件描述符号为fd的打开的文件对象 </p><h3>实例</h3><p>以下实例演示了 popen() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 使用 mkdir 命令<br/>a = 'mkdir nwdir'<br/><br/>b = os.popen(a,'r',1)<br/><br/>print b<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>open file 'mkdir nwdir', mode 'r' at 0x81614d0<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3字典fromkeys()方法	Python 字典 fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 fromkeys()方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。</p><h2>语法</h2><p>fromkeys()方法语法：</p><pre><br/>dict.fromkeys(seq[, value]))<br/></pre><h2>参数</h2><ul><li>seq -- 字典键值列表。</li><li>value -- 可选参数, 设置键序列（seq）的值。</li></ul><h2>返回值</h2><p>该方法返回列表。</p><h2>实例</h2><p>以下实例展示了 fromkeys()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>seq = ('name', 'age', 'sex')<br/><br/>dict = dict.fromkeys(seq)<br/>print ("新的字典为 : %s" %  str(dict))<br/><br/>dict = dict.fromkeys(seq, 10)<br/>print ("新的字典为 : %s" %  str(dict))<br/></pre><p>以上实例输出结果为：</p><pre><br/>新的字典为 : {'age': None, 'name': None, 'sex': None}<br/>新的字典为 : {'age': 10, 'name': 10, 'sex': 10}<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
PythonListpop()方法	pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List pop()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p><h2>语法</h2><p>pop()方法语法：</p><pre><br/>list.pop(obj=list[-1])<br/></pre><h2>参数</h2><ul><li>obj -- 可选参数，要移除列表元素的对象。</li></ul><h2>返回值</h2><p>该方法返回从列表中移除的元素对象。</p><h2>实例</h2><p>以下实例展示了 pop()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc'];<br/><br/>print "A List : ", aList.pop();<br/>print "B List : ", aList.pop(2);<br/></pre><p>以上实例输出结果如下：</p><pre><br/>A List :  abc<br/>B List :  zara<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3Listinsert()方法	insert() 函数用于将指定对象插入列表的指定位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List insert()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>insert() 函数用于将指定对象插入列表的指定位置。</p><h2>语法</h2><p>insert()方法语法：</p><pre><br/>list.insert(index, obj)<br/></pre><h2>参数</h2><ul><li>index -- 对象obj需要插入的索引位置。</li><li>obj -- 要插入列表中的对象。</li></ul><h2>返回值</h2><p>该方法没有返回值，但会在列表指定位置插入对象。</p><h2>实例</h2><p>以下实例展示了 insert()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1 = ['Google', 'Runoob', 'Taobao']<br/>list1.insert(1, 'Baidu')<br/>print ('列表插入元素后为 : ', list1)<br/></pre><p>以上实例输出结果如下：</p><pre><br/>列表插入元素后为 :  ['Google', 'Baidu', 'Runoob', 'Taobao']<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3Listmax()方法	max() 方法返回列表元素中的最大值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List max()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>max() 方法返回列表元素中的最大值。</p><h2>语法</h2><p>max()方法语法：</p><pre><br/>max(list)<br/></pre><h2>参数</h2><ul><li>list -- 要返回最大值的列表。</li></ul><h2>返回值</h2><p>返回列表元素中的最大值。</p><h2>实例</h2><p>以下实例展示了 max()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1, list2 = ['Google', 'Runoob', 'Taobao'], [456, 700, 200]<br/><br/>print ("list1 最大元素值 : ", max(list1))<br/>print ("list2 最大元素值 : ", max(list2))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>list1 最大元素值 :  Taobao<br/>list2 最大元素值 :  700<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3字典keys()方法	Python 字典 keys() 方法以列表返回一个字典所有的键。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 字典 keys() 方法</h1><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p><hr/><h2>描述</h2><p>Python 字典 keys() 方法以列表返回一个字典所有的键。</p><h2>语法</h2><p>keys()方法语法：</p><pre><br/>dict.keys()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回一个字典所有的键。</p><h2>实例</h2><p>以下实例展示了 keys() 方法的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>dict = {'Name': 'Runoob', 'Age': 7}<br/><br/>print ("字典所有的键为 : %s" %  dict.keys())<br/></pre><p>以上实例输出结果为：</p><pre><br/>字典所有的键为 : dict_keys(['Age', 'Name'])<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-dictionary.html"><img alt="Python3 字典" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字典</a></p></div></div>
Pythonos.close()方法	os.close() 方法用于关闭指定的文件描述符 fd。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.close() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.close() 方法用于关闭指定的文件描述符 fd。</p><h3>语法</h3><p><b>close()</b>方法语法格式如下：</p><pre><br/>os.close(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 close() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/>#  写入字符串<br/>os.write(fd, "This is test")<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythoncontinue语句	Python 语言 continue 语句语法格式如下：	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> continue  语句</span></h1><p>Python continue 语句跳出本次循环，而break跳出整个循环。</p><p>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。</p><p>continue语句用在while和for循环中。</p><p><strong>Python 语言 continue 语句语法格式如下：</strong></p><pre><br/>continue<br/></pre><p><strong>流程图：</strong></p><img alt="cpp_continue_statement" class="alignnone size-full wp-image-4027" height="331" sizes="(max-width: 285px) 100vw, 285px" src="_cpp_continue_statement.jpg" srcset="http://www.runoob.com/wp-content/uploads/2013/11/cpp_continue_statement.jpg 285w, http://www.runoob.com/wp-content/uploads/2013/11/cpp_continue_statement-258x300.jpg 258w" width="285"/><p><strong>实例：</strong></p><div class="example"><h2 class="example">实例(Python 2.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">Python</span><span class="hl-quotes">'</span><span class="hl-code">:     </span><span class="hl-comment"># 第一个实例</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> == </span><span class="hl-quotes">'</span><span class="hl-string">h</span><span class="hl-quotes">'</span><span class="hl-code">:      </span><span class="hl-reserved">continue</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前字母 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">letter</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code"> </span><span class="hl-comment"># 第二个实例</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> &gt; </span><span class="hl-number">0</span><span class="hl-code">:                 </span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-identifier">var</span><span class="hl-code"> -</span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> == </span><span class="hl-number">5</span><span class="hl-code">:      </span><span class="hl-reserved">continue</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前变量值 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">var</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span></div></div></div><p>以上实例执行结果：</p><pre><br/>当前字母 : P<br/>当前字母 : y<br/>当前字母 : t<br/>当前字母 : o<br/>当前字母 : n<br/>当前变量值 : 9<br/>当前变量值 : 8<br/>当前变量值 : 7<br/>当前变量值 : 6<br/>当前变量值 : 4<br/>当前变量值 : 3<br/>当前变量值 : 2<br/>当前变量值 : 1<br/>当前变量值 : 0<br/>Good bye!<br/></pre></div></div>
Pythonos.read()方法	os.read() 方法用于从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.read() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.read() 方法用于从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。</p><p>在Unix，Windows中有效</p><h3>语法</h3><p><b>read()</b>方法语法格式如下：</p><pre><br/>os.read(fd,n)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li><li><p><b>n</b> -- 读取的字节。</p></li></ul><h3>返回值</h3><p>返回包含读取字节的字符串 </p><h3>实例</h3><p>以下实例演示了 read() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/># 打开文件<br/>fd = os.open("f1.txt",os.O_RDWR)<br/>    <br/># 读取文本<br/>ret = os.read(fd,12)<br/>print ret<br/><br/># 关闭文件<br/>os.close(fd)<br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>This is test<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
PythonFileisatty()方法	isatty() 方法检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False。
	<div class="article-body"><div class="article-intro" id="content"><h1>Python File isatty() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>isatty()</b> 方法检测文件是否连接到一个终端设备，如果是返回 True，否则返回 False。</p><h3>语法</h3><p>isatty() 方法语法如下：</p><pre><br/>fileObject.isatty(); <br/></pre><h3>参数</h3><ul><li><p><b>无</b></p></li></ul><h3>返回值</h3><p>如果连接到一个终端设备返回 True，否则返回 False。</p><h3>实例</h3><p>以下实例演示了 isatty() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/># 打开文件<br/>fo = open("runoob.txt", "wb")<br/>print "文件名为: ", fo.name<br/><br/>ret = fo.isatty()<br/>print "返回值 : ", ret<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  runoob.txt<br/>返回值 :  False<br/></pre><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p></div></div>
Pythontimemktime()方法	如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python time mktime()方法</h1><hr/><h2>描述</h2><p>Python time mktime() 函数执行与gmtime(), localtime()相反的操作，它接收struct_time对象作为参数，返回用秒数来表示时间的浮点数。</p><p>如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。</p><h2>语法</h2><p>mktime()方法语法：</p><pre><br/>time.mktime(t)<br/></pre><h2>参数</h2><ul><li>t -- 结构化的时间或者完整的9位元组元素。</li></ul><h2>返回值</h2><p>返回用秒数来表示时间的浮点数。</p><h2>实例</h2><p>以下实例展示了 mktime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>t = (2009, 2, 17, 17, 3, 38, 1, 48, 0)<br/>secs = time.mktime( t )<br/>print "time.mktime(t) : %f" %  secs<br/>print "asctime(localtime(secs)): %s" % time.asctime(time.localtime(secs))<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.mktime(t) : 1234915418.000000<br/>asctime(localtime(secs)): Tue Feb 17 17:03:38 2009<br/></pre></div></div>
Pythonos.tcsetpgrp()方法	os.tcsetpgrp() 方法用于设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.tcsetpgrp() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.tcsetpgrp() 方法用于设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。</p><h3>语法</h3><p><b>tcsetpgrp()</b>方法语法格式如下：</p><pre><br/>os.tcsetpgrp(fd, pg)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符。</p></li><li><p><b>pg</b> -- 关联的进程组。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 tcsetpgrp() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 显示当前目录<br/>print "当前目录 :%s" %os.getcwd()<br/><br/># 修改目录到 /dev/tty<br/>fd = os.open("/dev/tty",os.O_RDONLY)<br/><br/>f = os.tcgetpgrp(fd)<br/><br/># 显示进程组<br/>print "关联进程组: "<br/>print f<br/><br/># 设置进程组<br/>os.tcsetpgrp(fd,2672)<br/>print "done"<br/><br/>os.close(fd)<br/>print "关闭文件成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前目录 :/tmp<br/>关联进程组:<br/>2672<br/>done<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python字典(Dictionary)setdefault()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) setdefault()方法</h1><hr/><h2>描述</h2><p>Python 字典 setdefault() 函数和<a href="att-dictionary-get.html" target="_balnk">get() 方法</a>类似, 如果键不存在于字典中，将会添加键并将值设为默认值。</p><h2>语法</h2><p>setdefault()方法语法：</p><pre><br/>dict.setdefault(key, default=None)<br/></pre><h2>参数</h2><ul><li>key -- 查找的键值。</li><li>default -- 键不存在时，设置的默认键值。</li></ul><h2>返回值</h2><p>如果字典中包含有给定键，则返回该键对应的值，否则返回为该键设置的值。</p><h2>实例</h2><p>以下实例展示了 setdefault() 函数的使用方法：</p><div class="example"><h2 class="example">实例(Python 2.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-identifier">dict</span><span class="hl-code"> = {</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">菜鸟教程</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">google</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">Google 搜索</span><span class="hl-quotes">'</span><span class="hl-code">} </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Value : %s</span><span class="hl-quotes">"</span><span class="hl-code"> %  </span><span class="hl-identifier">dict</span><span class="hl-code">.</span><span class="hl-identifier">setdefault</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-reserved">None</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Value : %s</span><span class="hl-quotes">"</span><span class="hl-code"> %  </span><span class="hl-identifier">dict</span><span class="hl-code">.</span><span class="hl-identifier">setdefault</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">Taobao</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">淘宝</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>Value : 菜鸟教程<br/>Value : 淘宝<br/></pre></div></div>
Pythonos.stat_float_times()方法	os.stat_float_times() 方法用于决定stat_result是否以float对象显示时间戳。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.stat_float_times() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.stat_float_times() 方法用于决定stat_result是否以float对象显示时间戳。</p><h3>语法</h3><p><b>stat_float_times()</b>方法语法格式如下：</p><pre><br/>os.stat_float_times([newvalue])<br/></pre><h3>参数</h3><ul><li><p><b>newvalue</b> --  如果为 True, 调用 stat() 返回 floats,如果 False, 调用 stat 返回 ints。如果没有该参数返回当前设置。</p></li></ul><h3>返回值</h3><p>返回 True 或 False。</p><h3>实例</h3><p>以下实例演示了 stat_float_times() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># Stat 信息<br/>statinfo = os.stat('a2.py')<br/><br/>print statinfo<br/>statinfo = os.stat_float_times()<br/>print statinfo<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.stat_result(st_mode=33188, st_ino=3940649674337682L, st_dev=277923425L, <br/>st_nlink=1, st_uid=400, st_gid=401, st_size=335L, st_atime=1330498089, st_mtime=13<br/>30498089, st_ctime=1330498089)<br/>True<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonos.fchmod()方法	os.fchmod() 方法用于改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fchmod() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fchmod() 方法用于改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。</p><p> Unix上可用。</p><h3>语法</h3><p><b>fchmod()</b>方法语法格式如下：</p><pre><br/>os.fchmod(fd, mode);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li><li><p><b>mode</b> -- 可以是以下一个或多个组成，多个使用 "|" 隔开：</p><ul><li><p><b>stat.S_ISUID:</b>设置 UID 位</p></li><li><p><b>stat.S_ISGID:</b> 设置组 ID 位 </p></li><li><p><b>stat.S_ENFMT:</b> 系统文件锁定的执法行动</p></li><li><p><b>stat.S_ISVTX:</b>   在执行之后保存文字和图片</p></li><li><p><b>stat.S_IREAD:</b> 对于拥有者读的权限</p></li><li><p><b>stat.S_IWRITE:</b> 对于拥有者写的权限</p></li><li><p><b>stat.S_IEXEC:</b> 对于拥有者执行的权限</p></li><li><p><b>stat.S_IRWXU:</b>对于拥有者读、写、执行的权限</p></li><li><p><b>stat.S_IRUSR:</b> 对于拥有者读的权限</p></li><li><p><b>stat.S_IWUSR:</b> 对于拥有者写的权限</p></li><li><p><b>stat.S_IXUSR:</b> 对于拥有者执行的权限</p></li><li><p><b>stat.S_IRWXG:</b> 对于同组的人读写执行的权限 </p></li><li><p><b>stat.S_IRGRP:</b> 对于同组读的权限 </p></li><li><p><b>stat.S_IWGRP:</b>对于同组写的权限</p></li><li><p><b>stat.S_IXGRP:</b> 对于同组执行的权限</p></li><li><p><b>stat.S_IRWXO:</b> 对于其他组读写执行的权限</p></li><li><p><b>stat.S_IROTH:</b> 对于其他组读的权限</p></li><li><p><b>stat.S_IWOTH:</b>  对于其他组写的权限</p></li><li><p><b>stat.S_IXOTH:</b>对于其他组执行的权限</p></li></ul></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fchmod() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys, stat<br/><br/># 打开文件 "/tmp/foo.txt"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 设置文件可通过组执行<br/><br/>os.fchmod( fd, stat.S_IXGRP)<br/><br/># 设置文件可被其他用户写入<br/>os.fchmod(fd, stat.S_IWOTH)<br/><br/>print "修改权限成功!!"<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonasin()函数	 asin() 返回x的反正弦弧度值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> asin() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>asin()</b> 返回x的反正弦弧度值。</p><hr/><h2>语法</h2><p>以下是 asin() 方法的语法:</p><pre><br/>import math<br/><br/>math.asin(x)<br/></pre><p><strong>注意：</strong>asin()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- -1到1之间的数值。如果x是大于1，会产生一个错误。</li></ul><hr/><h2>返回值</h2><p>返回x的反正弦弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 asin() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "asin(0.64) : ",  math.asin(0.64)<br/>print "asin(0) : ",  math.asin(0)<br/>print "asin(-1) : ",  math.asin(-1)<br/>print "asin(1) : ",  math.asin(1)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>asin(0.64) :  0.694498265627<br/>asin(0) :  0.0<br/>asin(-1) :  -1.57079632679<br/>asin(1) :  1.57079632679<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python字典(Dictionary)items()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) items()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) items() 函数以列表返回可遍历的(键, 值) 元组数组。</p><h2>语法</h2><p>items()方法语法：</p><pre><br/>dict.items()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回可遍历的(键, 值) 元组数组。</p><h2>实例</h2><p>以下实例展示了 items()函数的使用方法：</p><div class="example"><h2 class="example">实例(Python 2.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># coding=utf-8</span><span class="hl-code"></span><span class="hl-identifier">dict</span><span class="hl-code"> = {</span><span class="hl-quotes">'</span><span class="hl-string">Google</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">www.google.com</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Runoob</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">www.runoob.com</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">taobao</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">www.taobao.com</span><span class="hl-quotes">'</span><span class="hl-code">} </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">字典值 : %s</span><span class="hl-quotes">"</span><span class="hl-code"> %  </span><span class="hl-identifier">dict</span><span class="hl-code">.</span><span class="hl-identifier">items</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 遍历字典列表</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">key</span><span class="hl-code">,</span><span class="hl-identifier">values</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-identifier">dict</span><span class="hl-code">.</span><span class="hl-identifier">items</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-identifier">key</span><span class="hl-code">,</span><span class="hl-identifier">values</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>字典值 : [('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')]<br/>Google www.google.com<br/>taobao www.taobao.com<br/>Runoob www.runoob.com<br/></pre></div></div>
Pythonbreak语句	
如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。
	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> break 语句</span></h1><p>Python break语句，就像在C语言中，打破了最小封闭for或while循环。</p><p>break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。</p><p> break语句用在while和for循环中。</p><p>如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。</p><p><strong>Python语言 break 语句语法：</strong></p><pre><br/>break<br/></pre><p><strong>流程图：</strong></p><img src="_cpp_break_statement.jpg"/><div class="example"><h2 class="example">实例(Python 2.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">Python</span><span class="hl-quotes">'</span><span class="hl-code">:     </span><span class="hl-comment"># 第一个实例</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> == </span><span class="hl-quotes">'</span><span class="hl-string">h</span><span class="hl-quotes">'</span><span class="hl-code">:      </span><span class="hl-reserved">break</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前字母 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">letter</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code"> </span><span class="hl-comment"># 第二个实例</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> &gt; </span><span class="hl-number">0</span><span class="hl-code">:                 </span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">当前变量值 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">var</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-identifier">var</span><span class="hl-code"> -</span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> == </span><span class="hl-number">5</span><span class="hl-code">:   </span><span class="hl-comment"># 当变量 var 等于 5 时退出循环</span><span class="hl-code"></span><span class="hl-reserved">break</span><span class="hl-code"></span><span class="hl-reserved">print</span><span class="hl-code"> </span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span></div></div></div><p>以上实例执行结果：</p><pre><br/>当前字母 : P<br/>当前字母 : y<br/>当前字母 : t<br/>当前变量值 : 10<br/>当前变量值 : 9<br/>当前变量值 : 8<br/>当前变量值 : 7<br/>当前变量值 : 6<br/>Good bye!<br/></pre></div></div>
Python字典(Dictionary)clear()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) clear()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) clear() 函数用于删除字典内所有元素。</p><h2>语法</h2><p>clear()方法语法：</p><pre><br/>dict.clear()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 clear()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7};<br/><br/>print "Start Len : %d" %  len(dict)<br/>dict.clear()<br/>print "End Len : %d" %  len(dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>Start Len : 2<br/>End Len : 0<br/></pre></div></div>
Python3translate()方法	translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符,要过滤掉的字符放到 deletechars 参数中。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 translate()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>translate() 方法根据参数table给出的表(包含 256 个字符)转换字符串的字符,要过滤掉的字符放到 <strong>deletechars</strong> 参数中。</p><h2>语法</h2><p>translate()方法语法：</p><pre><br/>str.translate(table[, deletechars]); <br/>bytes.translate(table[, delete])    <br/>bytearray.translate(table[, delete]) <br/></pre><h2>参数</h2><ul><li>table -- 翻译表，翻译表是通过 <a href="python3-string-maketrans.html" target="_blank">maketrans()</a> 方法转换而来。</li><li>deletechars -- 字符串中要过滤的字符列表。</li></ul><h2>返回值</h2><p>返回翻译后的字符串,若给出了 delete 参数，则将原来的bytes中的属于delete的字符删除，剩下的字符要按照table中给出的映射来进行映射   。</p><h2>实例</h2><p>以下实例展示了 translate() 函数的使用方法：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-identifier">intab</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">aeiou</span><span class="hl-quotes">"</span><span class="hl-code"></span><span class="hl-identifier">outtab</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">12345</span><span class="hl-quotes">"</span><span class="hl-code"></span><span class="hl-identifier">trantab</span><span class="hl-code"> = </span><span class="hl-identifier">str</span><span class="hl-code">.</span><span class="hl-identifier">maketrans</span><span class="hl-brackets">(</span><span class="hl-identifier">intab</span><span class="hl-code">, </span><span class="hl-identifier">outtab</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 制作翻译表</span><span class="hl-code"></span><span class="hl-identifier">str</span><span class="hl-code"> = </span><span class="hl-quotes">"</span><span class="hl-string">this is string example....wow!!!</span><span class="hl-quotes">"</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">str</span><span class="hl-code">.</span><span class="hl-identifier">translate</span><span class="hl-brackets">(</span><span class="hl-identifier">trantab</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果如下：</p><pre><br/>th3s 3s str3ng 2x1mpl2....w4w!!!<br/></pre><p>以下实例演示如何过滤掉的字符 x 和 m：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># 制作翻译表</span><span class="hl-code"></span><span class="hl-identifier">bytes_tabtrans</span><span class="hl-code"> = </span><span class="hl-identifier">bytes</span><span class="hl-code">.</span><span class="hl-identifier">maketrans</span><span class="hl-brackets">(</span><span class="hl-identifier">b</span><span class="hl-quotes">'</span><span class="hl-string">abcdefghijklmnopqrstuvwxyz</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">b</span><span class="hl-quotes">'</span><span class="hl-string">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 转换为大写，并删除字母o</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">b</span><span class="hl-quotes">'</span><span class="hl-string">runoob</span><span class="hl-quotes">'</span><span class="hl-code">.</span><span class="hl-identifier">translate</span><span class="hl-brackets">(</span><span class="hl-identifier">bytes_tabtrans</span><span class="hl-code">, </span><span class="hl-identifier">b</span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果：</p><pre><br/>b'RUNB'<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Python3os.stat()方法	os.stat() 方法用于在给定的路径上执行一个系统 stat 的调用。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.stat() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.stat() 方法用于在给定的路径上执行一个系统 stat 的调用。</p><h3>语法</h3><p><b>stat()</b>方法语法格式如下：</p><pre><br/>os.stat(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 指定路径</p></li></ul><h3>返回值</h3><p>stat 结构:</p><ul><li><b>st_mode: </b>inode 保护模式</li><li><b>st_ino: </b>inode 节点号。</li><li><b>st_dev: </b>inode 驻留的设备。</li><li><b>st_nlink: </b>inode 的链接数。</li><li><b>st_uid: </b>所有者的用户ID。</li><li><b>st_gid: </b>所有者的组ID。</li><li><b>st_size: </b>普通文件以字节为单位的大小；包含等待某些特殊文件的数据。</li><li><b>st_atime: </b>上次访问的时间。</li><li><b>st_mtime: </b>最后一次修改的时间。</li><li><b>st_ctime: </b>由操作系统报告的"ctime"。在某些系统上（如Unix）是最新的元数据更改的时间，在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）。</li></ul><h3>实例</h3><p>以下实例演示了 stat() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 显示文件 "a2.py" 信息<br/>statinfo = os.stat('a2.py')<br/><br/>print (statinfo)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>posix.stat_result(st_mode=33188, st_ino=3940649674337682L, st_dev=277923425L, st<br/>_nlink=1, st_uid=400, st_gid=401, st_size=335L, st_atime=1330498089, st_mtime=13<br/>30498089, st_ctime=1330498089)<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonlocals()函数	locals() 函数会以字典类型返回当前位置的全部局部变量。	<div class="article-body"><div class="article-intro" id="content"><h1>Python locals() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>locals()</b> 函数会以字典类型返回当前位置的全部局部变量。</p><p>对于函数, 方法, lambda 函式, 类, 以及实现了 __call__ 方法的类实例, 它都返回 True。 </p><h2>语法</h2><p>locals() 函数语法：</p><pre><br/>locals()<br/></pre><h2>参数</h2><ul><li>无</li></ul><h2>返回值</h2><p>返回字典类型的局部变量。</p><h2>实例</h2><p>以下实例展示了 locals() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">runoob</span><span class="hl-brackets">(</span><span class="hl-identifier">arg</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-comment"># 两个局部变量：arg、z</span><span class="hl-code">...     </span><span class="hl-identifier">z</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">...     </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-builtin">locals</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-identifier">runoob</span><span class="hl-brackets">(</span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">z</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">arg</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">4</span><span class="hl-code">}      </span><span class="hl-comment"># 返回一个名字/值对的字典</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.mkdir()方法	os.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.mkdir() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。</p><h3>语法</h3><p><b>mkdir()</b>方法语法格式如下：</p><pre><br/>os.mkdir(path[, mode])<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  要创建的目录</p></li><li><p><b>mode</b> --  要为目录设置的权限数字模式</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 mkdir() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 创建的目录<br/>path = "/tmp/home/monthly/daily/hourly"<br/><br/>os.mkdir( path, 0755 );<br/><br/>print "目录已创建"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录已创建<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonmemoryview()函数	memoryview() 函数返回给定参数的内存查看对象(Momory view)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python memoryview() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>memoryview()</b> 函数返回给定参数的内存查看对象(Momory view)。</p><p>所谓内存查看对象，是指对支持缓冲区协议的数据进行包装，在不需要复制对象基础上允许Python代码访问。</p><h2>语法</h2><p>memoryview 语法：</p><pre><br/>memoryview(obj)<br/></pre><p>参数说明：</p><ul><li>obj -- 对象</li></ul><h2>返回值</h2><p>返回元组列表。</p><h2>实例</h2><p>以下实例展示了 memoryview 的使用方法：</p><div class="example"><h2 class="example">Python2.x 应用：</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">v</span><span class="hl-code"> = </span><span class="hl-identifier">memoryview</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">abcefg</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-code">-</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">g</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">:</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&lt;</span><span class="hl-identifier">memory</span><span class="hl-code"> </span><span class="hl-identifier">at</span><span class="hl-code"> </span><span class="hl-number">0</span><span class="hl-identifier">x77ab28</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">:</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">.</span><span class="hl-identifier">tobytes</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">bce</span><span class="hl-quotes">'</span></div></div></div><div class="example"><h2 class="example">Python3.x 应用：</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">v</span><span class="hl-code"> = </span><span class="hl-identifier">memoryview</span><span class="hl-brackets">(</span><span class="hl-identifier">bytearray</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">abcefg</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">utf-8</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">98</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-code">-</span><span class="hl-number">1</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">103</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">:</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">&lt;</span><span class="hl-identifier">memory</span><span class="hl-code"> </span><span class="hl-identifier">at</span><span class="hl-code"> </span><span class="hl-number">0</span><span class="hl-identifier">x10f543a08</span><span class="hl-code">&gt;&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">v</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">:</span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">.</span><span class="hl-identifier">tobytes</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">b</span><span class="hl-quotes">'</span><span class="hl-string">bce</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonall()函数	all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否不为 0、''、False 或者 iterable 为空，如果是返回 True，否则返回 False。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> all() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否不为 0、''、False 或者 iterable 为空，如果是返回 True，否则返回 False。</p><p>函数等价于：</p><pre><br/>def all(iterable):<br/>    for element in iterable:<br/>        if not element:<br/>            return False<br/>    return True<br/></pre><p>Python 2.5 以上版本可用。</p><h3>语法</h3><p>以下是 all() 方法的语法:</p><pre><br/>all(iterable)<br/></pre><h3>参数</h3><ul><li>iterable -- 元组或列表。</li></ul><h3>返回值</h3><p>如果iterable的所有元素不为0、''、False或者iterable为空，all(iterable)返回True，否则返回False；</p><p><strong>注意：</strong>空元组、空列表返回值为True，这里要特别注意。</p><hr/><h2>实例</h2><p>以下展示了使用 all() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表list，元素都不为空或0</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表list，存在一个为空的元素</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">，</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 列表list，存在一个为0的元素</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">   &gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组tuple，元素都不为空或0</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">d</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组tuple，存在一个为空的元素</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">，</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 元组tuple，存在一个为0的元素</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">   &gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 空列表</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">all</span><span class="hl-brackets">(</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 空元组</span><span class="hl-code"></span><span class="hl-reserved">True</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonos.makedirs()方法	os.makedirs() 方法用于递归创建目录。像 mkdir(), 但创建的所有intermediate-level文件夹需要包含子目录。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.makedirs() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.makedirs() 方法用于递归创建目录。像 mkdir(), 但创建的所有intermediate-level文件夹需要包含子目录。</p><h3>语法</h3><p><b>makedirs()</b>方法语法格式如下：</p><pre><br/>os.makedirs(path, mode=0o777)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  需要递归创建的目录。</p></li><li><p><b>mode</b> --  权限模式。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 makedirs() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 创建的目录<br/>path = "/tmp/home/monthly/daily"<br/><br/>os.makedirs( path, 0755 );<br/><br/>print "路径被创建"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>路径被创建<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
PythonListinsert()方法	insert() 函数用于将指定对象插入列表的指定位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python List insert()方法</h1><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p><hr/><h2>描述</h2><p>insert() 函数用于将指定对象插入列表的指定位置。</p><h2>语法</h2><p>insert()方法语法：</p><pre><br/>list.insert(index, obj)<br/></pre><h2>参数</h2><ul><li>index -- 对象 obj 需要插入的索引位置。</li><li>obj -- 要插入列表中的对象。</li></ul><h2>返回值</h2><p>该方法没有返回值，但会在列表指定位置插入对象。</p><h2>实例</h2><p>以下实例展示了 insert()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>aList = [123, 'xyz', 'zara', 'abc']<br/><br/>aList.insert( 3, 2009)<br/><br/>print "Final List : ", aList<br/></pre><p>以上实例输出结果如下：</p><pre><br/>Final List : [123, 'xyz', 'zara', 2009, 'abc']<br/></pre><p><a href="http://www.runoob.com/python/python-lists.html"><img alt="Python 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 列表</a></p></div></div>
Python3os.getcwdu()方法	os.getcwdu() 方法用于返回一个当前工作目录的Unicode对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.getcwdu() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.getcwdu() 方法用于返回一个当前工作目录的Unicode对象。</p><p>Unix, Windows 系统下可用。</p><h3>语法</h3><p><b>getcwdu()</b>方法语法格式如下：</p><pre><br/>os.getcwdu()<br/></pre><h3>参数</h3><ul><li>无</li></ul><h3>返回值</h3><p>返回一个当前工作目录的Unicode对象。</p><h3>实例</h3><p>以下实例演示了 getcwdu() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 切换到 "/var/www/html" 目录<br/>os.chdir("/var/www/html" )<br/><br/># 打印当前目录<br/>print ("当前工作目录 : %s" % os.getcwdu())<br/><br/># 打开 "/tmp"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 使用 os.fchdir() 方法修改目录<br/>os.fchdir(fd)<br/><br/># 打印当前目录<br/>print ("当前工作目录 : %s" % os.getcwdu())<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录 : /var/www/html<br/>当前工作目录 : /tmp<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonradians()函数	 radians() 方法将角度转换为弧度。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> radians() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>radians()</b> 方法将角度转换为弧度。</p><hr/><h2>语法</h2><p>以下是 radians() 方法的语法:</p><pre><br/>import math<br/><br/>math.radians(x)<br/></pre><p><strong>注意：</strong>radians()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回一个角度的弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 radians() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math<br/><br/>print "radians(3) : ",  math.radians(3)<br/>print "radians(-3) : ",  math.radians(-3)<br/>print "radians(0) : ",  math.radians(0)<br/>print "radians(math.pi) : ",  math.radians(math.pi)<br/>print "radians(math.pi/2) : ",  math.radians(math.pi/2)<br/>print "radians(math.pi/4) : ",  math.radians(math.pi/4)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>radians(3) :  0.0523598775598<br/>radians(-3) :  -0.0523598775598<br/>radians(0) :  0.0<br/>radians(math.pi) :  0.0548311355616<br/>radians(math.pi/2) :  0.0274155677808<br/>radians(math.pi/4) :  0.0137077838904<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonif语句	执行以上代码输出结果为：	<div class="article-body"><div class="article-intro" id="content"><h1>Python if 语句</h1><p><a href="http://www.runoob.com/python3/python3-examples.html"><img alt="Document 对象参考手册" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 实例</a></p><p>以下实例通过使用 <b>if...elif...else</b> 语句判断数字是正数、负数或零：</p><pre><br/># -*- coding: UTF-8 -*-<br/><br/># Filename : test.py<br/># author by : www.runoob.com<br/><br/># 用户输入数字<br/><br/>num = float(input("输入一个数字: "))<br/>if num &gt; 0:<br/>   print("正数")<br/>elif num == 0:<br/>   print("零")<br/>else:<br/>   print("负数")<br/></pre><p>执行以上代码输出结果为：</p><pre><br/>$ python test.py <br/>输入一个数字: 3<br/>正数<br/></pre><p>我们也可以使用内嵌 if 语句来实现：</p><pre><br/># -*- coding: UTF-8 -*-<br/><br/># Filename ：test.py<br/># author by : www.w3cschool.cc<br/><br/># 内嵌 if 语句<br/><br/>num = float(input("输入一个数字: "))<br/>if num &gt;= 0:<br/>   if num == 0:<br/>       print("零")<br/>   else:<br/>       print("正数")<br/>else:<br/>   print("负数")<br/></pre><p>执行以上代码输出结果为：</p><pre><br/>$ python test.py <br/>输入一个数字: 0<br/>零<br/></pre><p><a href="http://www.runoob.com/python3/python3-examples.html"><img alt="Document 对象参考手册" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 实例</a></p></div></div>
Pythoncallable()函数	callable() 函数用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但如果返回False，调用对象ojbect绝对不会成功。	<div class="article-body"><div class="article-intro" id="content"><h1>Python callable() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>callable()</b> 函数用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但如果返回False，调用对象ojbect绝对不会成功。</p><p>对于函数, 方法, lambda 函式, 类, 以及实现了 <span class="marked">__call__</span> 方法的类实例, 它都返回 True。 </p><h2>语法</h2><p>callable()方法语法：</p><pre><br/>callable(object)<br/></pre><h2>参数</h2><ul><li>object -- 对象</li></ul><h2>返回值</h2><p>可调用返回 True，否则返回 False。</p><h2>实例</h2><p>以下实例展示了 callable() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">runoob</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">add</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-identifier">b</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-identifier">a</span><span class="hl-code"> + </span><span class="hl-identifier">b</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-identifier">add</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 函数返回 True</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-code">:                  </span><span class="hl-comment"># 类</span><span class="hl-code">...     </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">method</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:...             </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-number">0</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-identifier">A</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 类返回 True</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 没有实现 __call__, 返回 False</span><span class="hl-code"></span><span class="hl-reserved">False</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">B</span><span class="hl-code">:...     </span><span class="hl-reserved">def</span><span class="hl-code"> </span><span class="hl-identifier">__call__</span><span class="hl-brackets">(</span><span class="hl-identifier">self</span><span class="hl-brackets">)</span><span class="hl-code">:...             </span><span class="hl-reserved">return</span><span class="hl-code"> </span><span class="hl-number">0</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-identifier">B</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">True</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">b</span><span class="hl-code"> = </span><span class="hl-identifier">B</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">callable</span><span class="hl-brackets">(</span><span class="hl-identifier">b</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 实现 __call__, 返回 True</span><span class="hl-code"></span><span class="hl-reserved">True</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3isalnum()方法	isalnum() 方法检测字符串是否由字母和数字组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 isalnum()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>isalnum() 方法检测字符串是否由字母和数字组成。</p><h2>语法</h2><p>isalnum()方法语法：</p><pre><br/>str.isalnum()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3Filewritelines()方法	writelines() 方法用于向文件中写入一序列的字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File writelines() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>writelines()</b> 方法用于向文件中写入一序列的字符串。</p><p>这一序列字符串可以是由迭代对象产生的，如一个字符串列表。</p><p>换行需要制定换行符 \n。</p><h3>语法</h3><p>writelines() 方法语法如下：</p><pre><br/>fileObject.writelines( [ str ])<br/></pre><h3>参数</h3><ul><li><p><b>str</b> -- 要写入文件的字符串序列。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 writelines() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/># 打开文件<br/>fo = open("test.txt", "w")<br/>print ("文件名为: ", fo.name)<br/>seq = ["菜鸟教程 1\n", "菜鸟教程 2"]<br/>fo.writelines( seq )<br/><br/># 关闭文件<br/>fo.close()<br/></pre><p>以上实例输出结果为：</p><pre><br/>文件名为:  test.txt<br/></pre><p>查看文件内容：</p><pre><br/>$ cat test.txt <br/>菜鸟教程 1<br/>菜鸟教程 2<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p></div></div>
Python3upper()方法	Python upper() 方法将字符串中的小写字母转为大写字母。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 upper()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python upper() 方法将字符串中的小写字母转为大写字母。</p><h2>语法</h2><p>upper()方法语法：</p><pre><br/>str.upper()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回小写字母转为大写字母的字符串。</p><h2>实例</h2><p>以下实例展示了 upper()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "this is string example from runoob....wow!!!";<br/><br/>print ("str.upper() : ", str.upper())<br/></pre><p>以上实例输出结果如下：</p><pre><br/>str.upper() :  THIS IS STRING EXAMPLE FROM RUNOOB....WOW!!!<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythoncmp()函数	cmp(x,y) 函数用于比较2个对象，如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> cmp() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>cmp(x,y) 函数用于比较2个对象，如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。</p><hr/><h2>语法</h2><p>以下是 cmp() 方法的语法:</p><pre><br/>cmp( x, y )<br/></pre><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li><li>y -- 数值表达式。</li></ul><hr/><h2>返回值</h2>如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。<hr/><h2>实例</h2><p>以下展示了使用 cmp() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/><br/>print "cmp(80, 100) : ", cmp(80, 100)<br/>print "cmp(180, 100) : ", cmp(180, 100)<br/>print "cmp(-80, 100) : ", cmp(-80, 100)<br/>print "cmp(80, -100) : ", cmp(80, -100)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>cmp(80, 100) :  -1<br/>cmp(180, 100) :  1<br/>cmp(-80, 100) :  -1<br/>cmp(80, -100) :  1<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Python3timemktime()方法	如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 time mktime()方法</h1><hr/><h2>描述</h2><p>Python time mktime() 函数执行与gmtime(), localtime()相反的操作，它接收struct_time对象作为参数，返回用秒数来表示时间的浮点数。</p><p>如果输入的值不是一个合法的时间，将触发 OverflowError 或 ValueError。</p><h2>语法</h2><p>mktime()方法语法：</p><pre><br/>time.mktime(t)<br/></pre><h2>参数</h2><ul><li>t -- 结构化的时间或者完整的9位元组元素。</li></ul><h2>返回值</h2><p>返回用秒数来表示时间的浮点数。</p><h2>实例</h2><p>以下实例展示了 mktime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/>import time<br/><br/>t = (2016, 2, 17, 17, 3, 38, 1, 48, 0)<br/>secs = time.mktime( t )<br/>print ("time.mktime(t) : %f" %  secs)<br/>print ("asctime(localtime(secs)): %s" % time.asctime(time.localtime(secs)))<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.mktime(t) : 1455699818.000000<br/>asctime(localtime(secs)): Wed Feb 17 17:03:38 2016<br/></pre></div></div>
Python3timetzset()方法	标准TZ环境变量格式：	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 time tzset()方法</h1><hr/><h2>描述</h2><p>Python time tzset() 根据环境变量TZ重新初始化时间相关设置。</p><p>标准TZ环境变量格式：</p><pre><br/>std offset [dst [offset [,start[/time], end[/time]]]]<br/></pre><h2>参数</h2><ul><li><b>std 和 dst:</b>三个或者多个时间的缩写字母。传递给 time.tzname.</li><li><b>offset:</b> 距UTC的偏移，格式： [+|-]hh[:mm[:ss]] {h=0-23, m/s=0-59}。</li><li><b>start[/time], end[/time]:</b> DST 开始生效时的日期。格式为 m.w.d — 代表日期的月份、周数和日期。w=1 指月份中的第一周，而 w=5 指月份的最后一周。'start' 和 'end' 可以是以下格式之一：<ul><li><b>Jn:</b> 儒略日 n (1 &lt;= n &lt;= 365)。闰年日（2月29）不计算在内。</li><li><b>n:</b> 儒略日 (0 &lt;= n &lt;= 365)。 闰年日（2月29）计算在内</li><li><b>Mm.n.d:</b> 日期的月份、周数和日期。w=1 指月份中的第一周，而 w=5 指月份的最后一周。</li><li><b>time:</b>（可选）DST 开始生效时的时间（24 小时制）。默认值为 02:00（指定时区的本地时间）。</li></ul></li></ul><h2>语法</h2><pre><br/>time.tzset()<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>该函数没有返回值。</p><h2>实例</h2><p>以下实例展示了 tzset() 函数的使用方法：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">time</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">os</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">environ</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">TZ</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">EST+05EDT,M4.1.0,M10.5.0</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">tzset</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">strftime</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">%X %x %Z</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">os</span><span class="hl-code">.</span><span class="hl-identifier">environ</span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">TZ</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code"> = </span><span class="hl-quotes">'</span><span class="hl-string">AEST-10AEDT-11,M10.5.0,M3.5.0</span><span class="hl-quotes">'</span><span class="hl-code"></span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">tzset</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">time</span><span class="hl-code">.</span><span class="hl-identifier">strftime</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">%X %x %Z</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>以上实例输出结果为：</p><pre><br/>23:25:45 04/06/16 EDT<br/>13:25:45 04/07/16 AEST<br/></pre></div></div>
Pythonos.fstat()方法	os.fstat() 方法用于返回文件描述符fd的状态，类似 stat()。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fstat() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fstat() 方法用于返回文件描述符fd的状态，类似 stat()。</p><p>Unix，Windows上可用。</p><p>fstat 方法返回的结构:</p><ul><li><p><b>st_dev:</b> 设备信息 </p></li><li><p><b>st_ino:</b> 文件的i-node值 </p></li><li><p><b>st_mode:</b>  文件信息的掩码，包含了文件的权限信息，文件的类型信息(是普通文件还是管道文件，或者是其他的文件类型) </p></li><li><p><b>st_nlink:</b> 硬连接数 </p></li><li><p><b>st_uid:</b> 用户ID </p></li><li><p><b>st_gid:</b> 用户组 ID</p></li><li><p><b>st_rdev:</b> 设备 ID (如果指定文件) </p></li><li><p><b>st_size:</b> 文件大小，以byte为单位 </p></li><li><p><b>st_blksize:</b> 系统 I/O 块大小</p></li><li><p><b>st_blocks:</b> 文件的是由多少个 512 byte 的块构成的 </p></li><li><p><b>st_atime:</b> 文件最近的访问时间 </p></li><li><p><b>st_mtime:</b> 文件最近的修改时间 </p></li><li><p><b>st_ctime:</b> 文件状态信息的修改时间（不是文件内容的修改时间） </p></li></ul><h3>语法</h3><p><b>fstat()</b>方法语法格式如下：</p><pre><br/>os.fstat(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li></ul><h3>返回值</h3><p>返回文件描述符fd的状态。</p><h3>实例</h3><p>以下实例演示了 fstat() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 获取元组<br/>info = os.fstat(fd)<br/><br/>print "文件信息 :", info<br/><br/># 获取文件 uid<br/>print "文件 UID :%d" % info.st_uid<br/><br/># 获取文件 gid<br/>print "文件 GID  :%d" % info.st_gid<br/><br/># 关闭文件<br/>os.close( fd)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>文件信息 : (33261, 3753776L, 103L, 1, 0, 0, <br/>            102L, 1238783197, 1238786767, 1238786767)<br/>文件 UID :0<br/>文件 GID :0<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3Listmin()方法	min() 方法返回列表元素中的最小值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 List min()方法</h1><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p><hr/><h2>描述</h2><p>min() 方法返回列表元素中的最小值。</p><h2>语法</h2><p>min()方法语法：</p><pre><br/>min(list)<br/></pre><h2>参数</h2><ul><li>list -- 要返回最小值的列表。</li></ul><h2>返回值</h2><p>返回列表元素中的最小值。</p><h2>实例</h2><p>以下实例展示了 min()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>list1, list2 = ['Google', 'Runoob', 'Taobao'], [456, 700, 200]<br/><br/>print ("list1 最小元素值 : ", min(list1))<br/>print ("list2 最小元素值 : ", min(list2))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>list1 最小元素值 :  Google<br/>list2 最小元素值 :  200<br/></pre><p><a href="http://www.runoob.com/python3/python3-list.html"><img alt="Python3 列表" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 列表</a></p></div></div>
Python3os.remove()方法	os.remove() 方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.remove() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.remove() 方法用于删除指定路径的文件。如果指定的路径是一个目录，将抛出OSError。</p><p>在Unix, Windows中有效</p><h3>语法</h3><p><b>remove()</b>方法语法格式如下：</p><pre><br/>os.remove(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要移除的文件路径</p></li></ul><h3>返回值</h3><p>该方法没有返回值 </p><h3>实例</h3><p>以下实例演示了 remove() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 列出目录<br/>print ("目录为: %s" %os.listdir(os.getcwd()))<br/><br/># 移除<br/>os.remove("aa.txt")<br/><br/># 移除后列出目录<br/>print ("移除后 : %s" %os.listdir(os.getcwd()))<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>目录为:<br/>[ 'a1.txt','aa.txt','resume.doc' ]<br/>移除后 : <br/>[ 'a1.txt','resume.doc' ]<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.fchown()方法	os.fchown() 方法用于修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fchown() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fchown() 方法用于修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。</p><p> Unix上可用。</p><h3>语法</h3><p><b>fchown()</b>方法语法格式如下：</p><pre><br/>os.fchown(fd, uid, gid)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li><li><p><b>uid</b> -- 文件所有者的用户id</p><li><p><b>gid</b> -- 文件所有者的用户组id</p></li></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fchown() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys, stat<br/><br/># 打开文件 "/tmp/foo.txt"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 设置文件的用户 id 为 100<br/>os.fchown( fd, 100, -1)<br/><br/># 设置文件的用户组 id 为 100<br/>os.fchown( fd, -1, 50)<br/><br/><br/>print "修改权限成功!!"<br/><br/># 关闭文件<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改权限成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3bytes.decode()方法	decode() 方法以指定的编码格式解码 bytes 对象。默认编码为 'utf-8'。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 bytes.decode()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>decode() 方法以指定的编码格式解码 bytes 对象。默认编码为 'utf-8'。</p><h2>语法</h2><p>decode()方法语法：</p><pre><br/>bytes.decode(encoding="utf-8", errors="strict")<br/></pre><h2>参数</h2><ul><li>encoding -- 要使用的编码，如"UTF-8"。</li><li>errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。</li></ul><h2>返回值</h2><p>该方法返回解码后的字符串。</p><h2>实例</h2><p>以下实例展示了decode()方法的实例：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "菜鸟教程";<br/>str_utf8 = str.encode("UTF-8")<br/>str_gbk = str.encode("GBK")<br/><br/>print(str)<br/><br/>print("UTF-8 编码：", str_utf8)<br/>print("GBK 编码：", str_gbk)<br/><br/>print("UTF-8 解码：", str_utf8.decode('UTF-8','strict'))<br/>print("GBK 解码：", str_gbk.decode('GBK','strict'))<br/></pre><p>以上实例输出结果如下：</p><pre><br/>菜鸟教程<br/>UTF-8 编码： b'\xe8\x8f\x9c\xe9\xb8\x9f\xe6\x95\x99\xe7\xa8\x8b'<br/>GBK 编码： b'\xb2\xcb\xc4\xf1\xbd\xcc\xb3\xcc'<br/>UTF-8 解码： 菜鸟教程<br/>GBK 解码： 菜鸟教程<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonsetattr()函数	setattr 函数对应函数 getatt()，用于设置属性值，该属性必须存在。	<div class="article-body"><div class="article-intro" id="content"><h1>Python setattr() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>setattr</b> 函数对应函数 <a href="python-func-getatt.html" target="_blank">getatt()</a>，用于设置属性值，该属性必须存在。</p><h2>语法</h2><p>setattr 语法：</p><pre><br/>setattr(object, name, value)<br/></pre><h2>参数</h2><ul><li>object -- 对象。</li><li>name -- 字符串，对象属性。</li><li>value -- 属性值。</li></ul><h2>返回值</h2><p>无。</p><h2>实例</h2><p>以下实例展示了 setattr 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-identifier">object</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">bar</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-identifier">A</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">getattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 获取属性 bar 值</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">setattr</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">bar</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-comment"># 设置属性 bar 值</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">a</span><span class="hl-code">.</span><span class="hl-identifier">bar</span><span class="hl-code"></span><span class="hl-number">5</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonfile()函数	file() 函数用于创建一个 file 对象，它有一个别名叫 open()，更形象一些，它们是内置函数。参数是以字符串的形式传递的。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> file() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>file()</b> 函数用于创建一个 file 对象，它有一个别名叫 <a href="http://www.runoob.com/python/pytho-func-open" target="_blank">open()</a>，更形象一些，它们是内置函数。参数是以字符串的形式传递的。</p><p>更多文件操作可参考：<a href="http://www.runoob.com/python/python-files-io.html" target="_blank">Python 文件I/O</a>。</p><h3>语法</h3><p>以下是 file() 方法的语法:</p><pre><br/>file(name[, mode[, buffering]])<br/></pre><h3>参数</h3><ul><li>name --  文件名</li><li>mode -- 打开模式</li><li>buffering --  0 表示不缓冲,如果为 1 表示进行行缓冲，大于 1 为缓冲区大小。</li></ul><h3>返回值</h3><p>文件对象。</p><h3>实例</h3><p>测试文件 test.txt，内容如下：</p><pre><br/>RUNOOB1<br/>RUNOOB2<br/></pre><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">f</span><span class="hl-code"> = </span><span class="hl-builtin">file</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">test.txt</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">f</span><span class="hl-code">.</span><span class="hl-identifier">read</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-quotes">'</span><span class="hl-string">RUNOOB1</span><span class="hl-special">\n</span><span class="hl-string">RUNOOB2</span><span class="hl-special">\n</span><span class="hl-quotes">'</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonisdigit()方法	Python isdigit() 方法检测字符串是否只由数字组成。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isdigit()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isdigit() 方法检测字符串是否只由数字组成。</p><h2>语法</h2><p>isdigit()方法语法：</p><pre><br/>str.isdigit()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Pythonrandom()函数	 random() 方法返回随机生成的一个实数，它在[0,1)范围内。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> random() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>random()</b> 方法返回随机生成的一个实数，它在[0,1)范围内。</p><hr/><h2>语法</h2><p>以下是 random() 方法的语法:</p><pre><br/>import random<br/><br/>random.random()<br/></pre><p><strong>注意：</strong>random()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>无</li></ul><hr/><h2>返回值</h2>返回随机生成的一个实数，它在[0,1)范围内。<hr/><h2>实例</h2><p>以下展示了使用 random() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import random<br/><br/># 生成第一个随机数<br/>print "random() : ", random.random()<br/><br/># 生成第二个随机数<br/>print "random() : ", random.random()<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>random() :  0.281954791393<br/>random() :  0.309090465205<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonnext()函数	next() 返回迭代器的下一个项目。	<div class="article-body"><div class="article-intro" id="content"><h1>Python next() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>next()</b> 返回迭代器的下一个项目。</p><h2>语法</h2><p>next 语法：</p><pre><br/>next(iterator[, default])<br/></pre><p>参数说明：</p><ul><li>iterator --  可迭代对象</li><li>default --  可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration  异常。</li></ul><h2>返回值</h2><p>返回对象帮助信息。</p><h2>实例</h2><p>以下实例展示了 next 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-comment"># -*- coding: UTF-8 -*-</span><span class="hl-code"></span><span class="hl-comment"># 首先获得Iterator对象:</span><span class="hl-code"></span><span class="hl-identifier">it</span><span class="hl-code"> = </span><span class="hl-builtin">iter</span><span class="hl-brackets">(</span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-code">, </span><span class="hl-number">5</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-comment"># 循环:</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-reserved">True</span><span class="hl-code">:    </span><span class="hl-reserved">try</span><span class="hl-code">:        </span><span class="hl-comment"># 获得下一个值:</span><span class="hl-code"></span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-identifier">next</span><span class="hl-brackets">(</span><span class="hl-identifier">it</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">except</span><span class="hl-code"> </span><span class="hl-reserved">StopIteration</span><span class="hl-code">:        </span><span class="hl-comment"># 遇到StopIteration就退出循环</span><span class="hl-code"></span><span class="hl-reserved">break</span></div></div></div><p>输出结果为：</p><pre><br/>1<br/>2<br/>3<br/>4<br/>5<br/></pre><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonstartswith()方法	Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。	<div class="article-body"><div class="article-intro" id="content"><h1>Python startswith()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。</p><h2>语法</h2><p>startswith()方法语法：</p><pre><br/>str.startswith(str, beg=0,end=len(string));<br/></pre><h2>参数</h2><ul><li>str -- 检测的字符串。</li><li>strbeg -- 可选参数用于设置字符串检测的起始位置。</li><li>strend -- 可选参数用于设置字符串检测的结束位置。</li></ul><h2>返回值</h2><p>如果检测到字符串则返回True，否则返回False。</p><h2>实例</h2><p>以下实例展示了startswith()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/>print str.startswith( 'this' );<br/>print str.startswith( 'is', 2, 4 );<br/>print str.startswith( 'this', 2, 4 );<br/></pre><p>以上实例输出结果如下：</p><pre><br/>True<br/>True<br/>False<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python字典(Dictionary)len()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) len()方法</h1><hr/><h2>描述</h2><p>Python 字典(Dictionary) len() 函数计算字典元素个数，即键的总数。</p><h2>语法</h2><p>len()方法语法：</p><pre><br/>len(dict)<br/></pre><h2>参数</h2><ul><li>dict -- 要计算元素个数的字典。</li></ul><h2>返回值</h2><p>返回字典的元素个数。</p><h2>实例</h2><p>以下实例展示了 len()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict = {'Name': 'Zara', 'Age': 7};<br/>print "Length : %d" % len (dict)<br/></pre><p>以上实例输出结果为：</p><pre><br/>Length : 2<br/></pre></div></div>
Python3os.access()方法	os.access() 方法使用当前的uid/gid尝试访问路径。大部分操作使用有效的 uid/gid, 因此运行环境可以在 suid/sgid 环境尝试。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.access() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.access() 方法使用当前的uid/gid尝试访问路径。大部分操作使用有效的 uid/gid, 因此运行环境可以在 suid/sgid 环境尝试。</p><h3>语法</h3><p><b>access()</b>方法语法格式如下：</p><pre><br/>os.access(path, mode);<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要用来检测是否有访问权限的路径。 </p></li><li><p><b>mode</b> -- mode为F_OK，测试存在的路径，或者它可以是包含R_OK, W_OK和X_OK或者R_OK, W_OK和X_OK其中之一或者更多。</p><ul class="list"><li><b>os.F_OK:</b> 作为access()的mode参数，测试path是否存在。</li><li><b>os.R_OK:</b> 包含在access()的mode参数中 ， 测试path是否可读。 </li><li><b>os.W_OK</b> 包含在access()的mode参数中 ， 测试path是否可写。</li><li><b>os.X_OK</b> 包含在access()的mode参数中 ，测试path是否可执行。</li></ul></li></ul><h3>返回值</h3><p>如果允许访问返回 True , 否则返回False。</p><h3>实例</h3><p>以下实例演示了 access() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 假定 /tmp/foo.txt 文件存在，并有读写权限<br/><br/>ret = os.access("/tmp/foo.txt", os.F_OK)<br/>print ("F_OK - 返回值 %s"% ret)<br/><br/>ret = os.access("/tmp/foo.txt", os.R_OK)<br/>print ("R_OK - 返回值 %s"% ret)<br/><br/>ret = os.access("/tmp/foo.txt", os.W_OK)<br/>print ("W_OK - 返回值 %s"% ret)<br/><br/>ret = os.access("/tmp/foo.txt", os.X_OK)<br/>print ("X_OK - 返回值 %s"% ret)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>F_OK - 返回值 True<br/>R_OK - 返回值 True<br/>W_OK - 返回值 True<br/>X_OK - 返回值 False<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonvars()函数	vars() 函数返回对象object的属性和属性值的字典对象。	<div class="article-body"><div class="article-intro" id="content"><h1>Python vars() 函数</h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>vars()</b> 函数返回对象object的属性和属性值的字典对象。</p><h2>语法</h2><p>vars() 函数语法：</p><pre><br/>vars([object])<br/></pre><h2>参数</h2><ul><li>object -- 对象</li></ul><h2>返回值</h2><p>返回对象object的属性和属性值的字典对象，如果没有参数，就打印当前调用位置的属性和属性值 类似 locals()。</p><h2>实例</h2><p>以下实例展示了 vars() 的使用方法：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">vars</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">__builtins__</span><span class="hl-quotes">'</span><span class="hl-code">: &lt;</span><span class="hl-identifier">module</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">__builtin__</span><span class="hl-quotes">'</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">built</span><span class="hl-code">-</span><span class="hl-reserved">in</span><span class="hl-brackets">)</span><span class="hl-code">&gt;, </span><span class="hl-quotes">'</span><span class="hl-string">__name__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">__main__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__doc__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-reserved">None</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__package__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-reserved">None</span><span class="hl-code">}&gt;&gt;&gt; </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Runoob</span><span class="hl-code">:...     </span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code">... &gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">vars</span><span class="hl-brackets">(</span><span class="hl-identifier">Runoob</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">{</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__module__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-quotes">'</span><span class="hl-string">__main__</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">__doc__</span><span class="hl-quotes">'</span><span class="hl-code">: </span><span class="hl-reserved">None</span><span class="hl-code">}&gt;&gt;&gt; </span><span class="hl-identifier">runoob</span><span class="hl-code"> = </span><span class="hl-identifier">Runoob</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-builtin">vars</span><span class="hl-brackets">(</span><span class="hl-identifier">runoob</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">{}</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3os.major()方法	os.major() 方法用于从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.major() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.major() 方法用于从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</p><h3>语法</h3><p><b>major()</b>方法语法格式如下：</p><pre><br/>os.major(device)<br/></pre><h3>参数</h3><ul><li><p><b>device</b> --  原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。</p></li></ul><h3>返回值</h3><p>返回设备major号码。</p><h3>实例</h3><p>以下实例演示了 major() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/>path = "/var/www/html/foo.txt"<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/># 获取 major 和 minor 设备号<br/>major_dnum = os.major(info.st_dev)<br/>minor_dnum = os.minor(info.st_dev)<br/><br/>print ("Major 设备号 :", major_dnum)<br/>print ("Minor 设备号 :", minor_dnum)<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>Major 设备号 : 0<br/>Minor 设备号 : 103<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonswapcase()方法	Python swapcase() 方法用于对字符串的大小写字母进行转换。	<div class="article-body"><div class="article-intro" id="content"><h1>Python swapcase()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python swapcase() 方法用于对字符串的大小写字母进行转换。</p><h2>语法</h2><p>swapcase()方法语法：</p><pre><br/>str.swapcase();<br/></pre><h2>参数</h2><ul><li>NA。</li></ul><h2>返回值</h2><p>返回大小写字母转换后生成的新字符串。</p><h2>实例</h2><p>以下实例展示了swapcase()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>str = "this is string example....wow!!!";<br/>print str.swapcase();<br/><br/>str = "THIS IS STRING EXAMPLE....WOW!!!";<br/>print str.swapcase();<br/></pre><p>以上实例输出结果如下：</p><pre><br/>this is string example....wow!!!<br/></pre><hr/><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p></div></div>
Python字典(Dictionary)cmp()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python 字典(Dictionary) cmp()方法</h1><hr/><h2>描述</h2><p>Python 字典的 cmp() 函数用于比较两个字典元素。</p><h2>语法</h2><p>cmp()方法语法：</p><pre><br/>cmp(dict1, dict2)<br/></pre><h2>参数</h2><ul><li>dict1 -- 比较的字典。</li><li>dict2 -- 比较的字典。</li></ul><h2>返回值</h2><p>如果两个字典的元素相同返回0，如果字典dict1大于字典dict2返回1，如果字典dict1小于字典dict2返回-1。</p><h2>实例</h2><p>以下实例展示了 cmp()函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/><br/>dict1 = {'Name': 'Zara', 'Age': 7};<br/>dict2 = {'Name': 'Mahnaz', 'Age': 27};<br/>dict3 = {'Name': 'Abid', 'Age': 27};<br/>dict4 = {'Name': 'Zara', 'Age': 7};<br/>print "Return Value : %d" %  cmp (dict1, dict2)<br/>print "Return Value : %d" %  cmp (dict2, dict3)<br/>print "Return Value : %d" %  cmp (dict1, dict4)<br/></pre><p>以上实例输出结果为：</p><pre><br/>Return Value : -1<br/>Return Value : 1<br/>Return Value : 0<br/></pre></div></div>
Pythonos.lstat()方法	os.lstat() 方法用于类似 stat() 返回文件的信息,但是没有符号链接。在某些平台上，这是fstat的别名，例如 Windows。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.lstat() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lstat() 方法用于类似 stat() 返回文件的信息,但是没有符号链接。在某些平台上，这是fstat的别名，例如 Windows。</p><h3>语法</h3><p><b>lstat()</b>方法语法格式如下：</p><pre><br/>os.lstat(path)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  要返回信息的文件。</p></li></ul><h3>返回值</h3><p>返回文件信息。</p><h3>实例</h3><p>以下实例演示了 lstat() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭打开的文件<br/>os.close( fd )<br/><br/># 获取元组<br/>info = os.lstat(path)<br/><br/>print "文件信息 :", info<br/><br/># 获取文件 uid<br/>print "文件 UID  :%d" % info.st_uid<br/><br/># 获取文件 gid<br/>print "文件 GID :%d" % info.st_gid<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>文件信息 : (33261, 3450178L, 103L, 1, 500, 500, 0L, <br/>             1238866944, 1238866944, 1238948312)<br/>文件 UID :500<br/>文件 GID :500<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonlog10()函数	log10() 方法返回以10为基数的x对数。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> log10() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p>log10() 方法返回以10为基数的x对数。</p><hr/><h2>语法</h2><p>以下是 log10() 方法的语法:</p><pre><br/>import math<br/><br/>math.log10( x )<br/></pre><p><strong>注意：</strong>log10()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回以10为基数的x对数，x&gt;0。<hr/><h2>实例</h2><p>以下展示了使用 log10() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # 导入 math 模块<br/><br/>print "math.log10(100.12) : ", math.log10(100.12)<br/>print "math.log10(100.72) : ", math.log10(100.72)<br/>print "math.log10(119L) : ", math.log10(119L)<br/>print "math.log10(math.pi) : ", math.log10(math.pi)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.log10(100.12) :  2.00052084094<br/>math.log10(100.72) :  2.0031157171<br/>math.log10(119L) :  2.07554696139<br/>math.log10(math.pi) :  0.497149872694<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonos.link()方法	os.link() 方法用于创建硬链接，名为参数 dst，指向参数 src。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.link() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.link() 方法用于创建硬链接，名为参数 dst，指向参数 src。</p><p>该方法对于创建一个已存在文件的拷贝是非常有用的。</p><p>只支持在 Unix, Windows 下使用。</p><h3>语法</h3><p><b>link()</b>方法语法格式如下：</p><pre><br/>os.link(src, dst)<br/></pre><h3>参数</h3><ul><li><p><b>src</b> --  用于创建硬连接的源地址</p></li><li><p><b>dst</b> -- 用于创建硬连接的目标地址 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 link() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/># 创建以上文件的拷贝<br/>dst = "/tmp/foo.txt"<br/>os.link( path, dst)<br/><br/>print "创建硬链接成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>创建硬链接成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
PythonFilereadlines()方法	readlines() 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for... in ... 结构进行处理。	<div class="article-body"><div class="article-intro" id="content"><h1>Python File readlines() 方法</h1><p><a href="http://www.runoob.com/python/file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>readlines()</b> 方法用于读取所有行(直到结束符 EOF)并返回列表，该列表可以由 Python 的 for... in ... 结构进行处理。</p><p>如果碰到结束符 EOF 则返回空字符串。</p></div></div>
Python3os.closerange()方法	os.closerange() 方法用于关闭所有文件描述符 fd，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.closerange() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.closerange() 方法用于关闭所有文件描述符 fd，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略。</p><h3>语法</h3><p><b>closerange()</b>方法语法格式如下：</p><pre><br/>os.closerange(fd_low, fd_high);<br/></pre><h3>参数</h3><ul><li><p><b>fd_low</b> -- 最小文件描述符</p></li><li><p><b>fd_high</b> -- 最大文件描述符</p></li></ul><p>该方法类似于：</p><pre><br/>for fd in xrange(fd_low, fd_high):<br/>    try:<br/>        os.close(fd)<br/>    except OSError:<br/>        pass<br/></pre><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 closerange() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test")<br/><br/># 关闭文件<br/>os.closerange( fd, fd)<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonisupper()方法	Python isupper() 方法检测字符串中所有的字母是否都为大写。	<div class="article-body"><div class="article-intro" id="content"><h1>Python isupper()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python isupper() 方法检测字符串中所有的字母是否都为大写。</p><h2>语法</h2><p>isupper()方法语法：</p><pre><br/>str.isupper()<br/></pre><h2>参数</h2><ul><li>无。</li></ul></div></div>
Python3循环语句	

	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 循环语句</h1><p>本章节将为大家介绍Python循环语句的使用。</p><p>Python中的循环语句有 for 和 while。</p><p>Python循环语句的控制结构图如下所示：</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png"/></p><hr/><h2>while 循环</h2><p>Python中while语句的一般形式：</p><pre><br/>while 判断条件：<br/>    语句<br/></pre><p>同样需要注意冒号和缩进。另外，在Python中没有do..while循环。</p><p>以下实例使用了 while 来计算 1 到 100 的总和：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/env python3</span><span class="hl-code"></span><span class="hl-identifier">n</span><span class="hl-code"> = </span><span class="hl-number">100</span><span class="hl-code"></span><span class="hl-identifier">sum</span><span class="hl-code"> = </span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-identifier">counter</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">counter</span><span class="hl-code"> &lt;= </span><span class="hl-identifier">n</span><span class="hl-code">:    </span><span class="hl-identifier">sum</span><span class="hl-code"> = </span><span class="hl-identifier">sum</span><span class="hl-code"> + </span><span class="hl-identifier">counter</span><span class="hl-code"></span><span class="hl-identifier">counter</span><span class="hl-code"> += </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">1 到 %d 之和为: %d</span><span class="hl-quotes">"</span><span class="hl-code"> % </span><span class="hl-brackets">(</span><span class="hl-identifier">n</span><span class="hl-code">,</span><span class="hl-identifier">sum</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>执行结果如下：</p><pre><br/>1 到 100 之和为: 5050<br/></pre><h3>无限循环</h3><p>我们可以通过设置条件表达式永远不为 false 来实现无限循环，实例如下：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> == </span><span class="hl-number">1</span><span class="hl-code"> :  </span><span class="hl-comment"># 表达式永远为 true</span><span class="hl-code"></span><span class="hl-identifier">num</span><span class="hl-code"> = </span><span class="hl-builtin">int</span><span class="hl-brackets">(</span><span class="hl-builtin">input</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">输入一个数字  :</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">你输入的数字是: </span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-identifier">num</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上脚本，输出结果如下：</p><pre><br/>输入一个数字  :5<br/>你输入的数字是:  5<br/>输入一个数字  :<br/></pre><p>你可以使用 <b> CTRL+C</b> 来退出当前的无限循环。</p><p>无限循环在服务器上客户端的实时请求非常有用。</p><h3>while 循环使用 else 语句</h3><p>在 while … else 在条件语句为 false 时执行 else 的语句块：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-identifier">count</span><span class="hl-code"> = </span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">count</span><span class="hl-code"> &lt; </span><span class="hl-number">5</span><span class="hl-code">:   </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">count</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string"> 小于 5</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">count</span><span class="hl-code"> = </span><span class="hl-identifier">count</span><span class="hl-code"> + </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">else</span><span class="hl-code">:   </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">count</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string"> 大于或等于 5</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上脚本，输出结果如下：</p><pre><br/>0  小于 5<br/>1  小于 5<br/>2  小于 5<br/>3  小于 5<br/>4  小于 5<br/>5  大于或等于 5<br/></pre><h3>简单语句组</h3><p>类似if语句的语法，如果你的while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python</span><span class="hl-code"></span><span class="hl-identifier">flag</span><span class="hl-code"> = </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-identifier">while</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">flag</span><span class="hl-brackets">)</span><span class="hl-code">: </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">欢迎访问菜鸟教程!</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p><strong>注意：</strong>以上的无限循环你可以使用 CTRL+C 来中断循环。</p><p>执行以上脚本，输出结果如下：</p><pre><br/></pre><hr/><h2>for 语句</h2><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p><p>for循环的一般格式如下：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-reserved">for</span><span class="hl-code"> &lt;</span><span class="hl-identifier">variable</span><span class="hl-code">&gt; </span><span class="hl-reserved">in</span><span class="hl-code"> &lt;</span><span class="hl-identifier">sequence</span><span class="hl-code">&gt;:    &lt;</span><span class="hl-identifier">statements</span><span class="hl-code">&gt;</span><span class="hl-reserved">else</span><span class="hl-code">:    &lt;</span><span class="hl-identifier">statements</span><span class="hl-code">&gt;</span></div></div></div><p>Python loop循环实例：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">languages</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">"</span><span class="hl-string">C</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">C++</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">Perl</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">Python</span><span class="hl-quotes">"</span><span class="hl-brackets">]</span><span class="hl-code"> &gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-identifier">languages</span><span class="hl-code">:...     </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code">... </span><span class="hl-identifier">C</span><span class="hl-code"></span><span class="hl-identifier">C</span><span class="hl-code">++</span><span class="hl-identifier">Perl</span><span class="hl-code"></span><span class="hl-identifier">Python</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p>以下 for 实例中使用了 break 语句，break 语句用于跳出当前循环体：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-identifier">sites</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">"</span><span class="hl-string">Baidu</span><span class="hl-quotes">"</span><span class="hl-code">, </span><span class="hl-quotes">"</span><span class="hl-string">Google</span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-quotes">"</span><span class="hl-string">Runoob</span><span class="hl-quotes">"</span><span class="hl-code">,</span><span class="hl-quotes">"</span><span class="hl-string">Taobao</span><span class="hl-quotes">"</span><span class="hl-brackets">]</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">site</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-identifier">sites</span><span class="hl-code">:    </span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">site</span><span class="hl-code"> == </span><span class="hl-quotes">"</span><span class="hl-string">Runoob</span><span class="hl-quotes">"</span><span class="hl-code">:        </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">菜鸟教程!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">break</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">循环数据 </span><span class="hl-quotes">"</span><span class="hl-code"> + </span><span class="hl-identifier">site</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">else</span><span class="hl-code">:    </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">没有循环数据!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">完成循环!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行脚本后，在循环到 "Runoob"时会跳出循环体：</p><pre><br/>循环数据 Baidu<br/>循环数据 Google<br/>菜鸟教程!<br/>完成循环!<br/></pre><hr/><h2>range()函数</h2><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-brackets">)</span><span class="hl-code">...</span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code"></span><span class="hl-number">4</span></div></div></div><p>你也可以使用range指定区间的值：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">5</span><span class="hl-code">,</span><span class="hl-number">9</span><span class="hl-brackets">)</span><span class="hl-code"> :    </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">5</span><span class="hl-code"></span><span class="hl-number">6</span><span class="hl-code"></span><span class="hl-number">7</span><span class="hl-code"></span><span class="hl-number">8</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p>也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长'): </p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-code"> :    </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-number">0</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code"></span><span class="hl-number">6</span><span class="hl-code"></span><span class="hl-number">9</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p>负数：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">10</span><span class="hl-code">, -</span><span class="hl-number">100</span><span class="hl-code">, -</span><span class="hl-number">30</span><span class="hl-brackets">)</span><span class="hl-code"> :    </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-brackets">)</span><span class="hl-code">     -</span><span class="hl-number">10</span><span class="hl-code">-</span><span class="hl-number">40</span><span class="hl-code">-</span><span class="hl-number">70</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p>您可以结合range()和len()函数以遍历一个序列的索引,如下所示:</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">a</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-quotes">'</span><span class="hl-string">Google</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Baidu</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Runoob</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">Taobao</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">QQ</span><span class="hl-quotes">'</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-builtin">len</span><span class="hl-brackets">(</span><span class="hl-identifier">a</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-code">, </span><span class="hl-identifier">a</span><span class="hl-brackets">[</span><span class="hl-identifier">i</span><span class="hl-brackets">]</span><span class="hl-brackets">)</span><span class="hl-code">... </span><span class="hl-number">0</span><span class="hl-code"> </span><span class="hl-identifier">Google</span><span class="hl-code"></span><span class="hl-number">1</span><span class="hl-code"> </span><span class="hl-identifier">Baidu</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"> </span><span class="hl-identifier">Runoob</span><span class="hl-code"></span><span class="hl-number">3</span><span class="hl-code"> </span><span class="hl-identifier">Taobao</span><span class="hl-code"></span><span class="hl-number">4</span><span class="hl-code"> </span><span class="hl-identifier">QQ</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><p>还可以使用range()函数来创建一个列表：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">list</span><span class="hl-brackets">(</span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">5</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-brackets">[</span><span class="hl-number">0</span><span class="hl-code">, </span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-code">, </span><span class="hl-number">4</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt;</span></div></div></div><hr/><h2>break和continue语句及循环中的else子句</h2><p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。实例如下：</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">Runoob</span><span class="hl-quotes">'</span><span class="hl-code">:     </span><span class="hl-comment"># 第一个实例</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> == </span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">:      </span><span class="hl-reserved">break</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">当前字母为 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">letter</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code"> </span><span class="hl-comment"># 第二个实例</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> &gt; </span><span class="hl-number">0</span><span class="hl-code">:                 </span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">当期变量值为 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">var</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-identifier">var</span><span class="hl-code"> -</span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> == </span><span class="hl-number">5</span><span class="hl-code">:      </span><span class="hl-reserved">break</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上脚本输出结果为：</p><pre><br/>当前字母为 : R<br/>当前字母为 : u<br/>当前字母为 : n<br/>当前字母为 : o<br/>当前字母为 : o<br/>当期变量值为 : 10<br/>当期变量值为 : 9<br/>当期变量值为 : 8<br/>当期变量值为 : 7<br/>当期变量值为 : 6<br/>Good bye!<br/></pre><p>continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">Runoob</span><span class="hl-quotes">'</span><span class="hl-code">:     </span><span class="hl-comment"># 第一个实例</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> == </span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-code">:        </span><span class="hl-comment"># 字母为 o 时跳过输出</span><span class="hl-code"></span><span class="hl-reserved">continue</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">当前字母 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">letter</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code"> </span><span class="hl-comment"># 第二个实例</span><span class="hl-code"></span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> &gt; </span><span class="hl-number">0</span><span class="hl-code">:                 </span><span class="hl-identifier">var</span><span class="hl-code"> = </span><span class="hl-identifier">var</span><span class="hl-code"> -</span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">var</span><span class="hl-code"> == </span><span class="hl-number">5</span><span class="hl-code">:             </span><span class="hl-comment"># 变量为 5 时跳过输出</span><span class="hl-code"></span><span class="hl-reserved">continue</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">当前变量值 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">var</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上脚本输出结果为：</p><pre><br/>当前字母 : R<br/>当前字母 : u<br/>当前字母 : n<br/>当前字母 : b<br/>当前变量值 : 9<br/>当前变量值 : 8<br/>当前变量值 : 7<br/>当前变量值 : 6<br/>当前变量值 : 4<br/>当前变量值 : 3<br/>当前变量值 : 2<br/>当前变量值 : 1<br/>当前变量值 : 0<br/>Good bye!<br/></pre><p>循环语句可以有 else 子句，它在穷尽列表(以for循环)或条件变为 false (以while循环)导致循环终止时被执行,但循环被break终止时不执行。</p><p>如下实例用于查询质数的循环例子:</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">n</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">10</span><span class="hl-brackets">)</span><span class="hl-code">:    </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">range</span><span class="hl-brackets">(</span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-identifier">n</span><span class="hl-brackets">)</span><span class="hl-code">:        </span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">n</span><span class="hl-code"> % </span><span class="hl-identifier">x</span><span class="hl-code"> == </span><span class="hl-number">0</span><span class="hl-code">:            </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">n</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">等于</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">x</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string">*</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">n</span><span class="hl-code">//</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-reserved">break</span><span class="hl-code"></span><span class="hl-reserved">else</span><span class="hl-code">:        </span><span class="hl-comment"># 循环中没有找到元素</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">n</span><span class="hl-code">, </span><span class="hl-quotes">'</span><span class="hl-string"> 是质数</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span></div></div></div><p>执行以上脚本输出结果为：</p><pre><br/>2  是质数<br/>3  是质数<br/>4 等于 2 * 2<br/>5  是质数<br/>6 等于 2 * 3<br/>7  是质数<br/>8 等于 2 * 4<br/>9 等于 3 * 3<br/></pre><hr/><h2>pass 语句</h2><p>Python pass是空语句，是为了保持程序结构的完整性。</p><p>pass 不做任何事情，一般用做占位语句，如下实例</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">while</span><span class="hl-code"> </span><span class="hl-reserved">True</span><span class="hl-code">:...     </span><span class="hl-reserved">pass</span><span class="hl-code"> </span><span class="hl-comment"># 等待键盘中断 (Ctrl+C)</span></div></div></div><p>最小的类:</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">MyEmptyClass</span><span class="hl-code">:...     </span><span class="hl-reserved">pass</span></div></div></div><p>以下实例在字母为 o 时 执行 pass 语句块:</p><div class="example"><h2 class="example">实例</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-quotes">'</span><span class="hl-string">Runoob</span><span class="hl-quotes">'</span><span class="hl-code">:    </span><span class="hl-reserved">if</span><span class="hl-code"> </span><span class="hl-identifier">letter</span><span class="hl-code"> == </span><span class="hl-quotes">'</span><span class="hl-string">o</span><span class="hl-quotes">'</span><span class="hl-code">:      </span><span class="hl-reserved">pass</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">执行 pass 块</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">当前字母 :</span><span class="hl-quotes">'</span><span class="hl-code">, </span><span class="hl-identifier">letter</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">Good bye!</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span></div></div></div><p>执行以上脚本输出结果为：</p><pre><br/>当前字母 : R<br/>当前字母 : u<br/>当前字母 : n<br/>执行 pass 块<br/>当前字母 : o<br/>执行 pass 块<br/>当前字母 : o<br/>当前字母 : b<br/>Good bye!<br/></pre></div></div>
Python3os.ftruncate()方法	os.ftruncate() 裁剪文件描述符fd对应的文件, 它最大不能超过文件大小。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.ftruncate() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.ftruncate() 裁剪文件描述符fd对应的文件, 它最大不能超过文件大小。</p><p>Unix上可用。</p><h3>语法</h3><p><b>ftruncate()</b>方法语法格式如下：</p><pre><br/>os.ftruncate(fd, length)¶<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件的描述符。</p></li><li><p><b>length</b> -- 要裁剪文件大小。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 ftruncate() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 打开文件<br/>fd = os.open( "foo.txt", os.O_RDWR|os.O_CREAT )<br/><br/># 写入字符串<br/>os.write(fd, "This is test - This is test")<br/><br/># 使用 ftruncate() 方法<br/>os.ftruncate(fd, 10)<br/><br/># 读取内容<br/>os.lseek(fd, 0, 0)<br/>str = os.read(fd, 100)<br/>print ("读取的字符串是 : ", str)<br/><br/># 关闭文件<br/>os.close( fd)<br/><br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>读取的字符串是 :  This is te<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonunichr()函数	unichr() 函数 和 chr()函数功能基本一样， 只不过是返回 unicode 的字符。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> unichr() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>unichr() 函数 和 chr()函数功能基本一样， 只不过是返回 unicode 的字符。</p><h3>语法</h3><p>以下是 unichr() 方法的语法:</p><pre><br/>unichr(i)<br/></pre><h3>参数</h3><ul><li>i -- 可以是10进制也可以是16进制的形式的数字。</li></ul><h3>返回值</h3><p>返回 unicode 的字符。</p><hr/><h2>实例</h2><p>以下展示了使用 unichr() 方法的实例：</p><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">unichr</span><span class="hl-brackets">(</span><span class="hl-number">97</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">u</span><span class="hl-quotes">'</span><span class="hl-string">a</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">unichr</span><span class="hl-brackets">(</span><span class="hl-number">98</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">u</span><span class="hl-quotes">'</span><span class="hl-string">b</span><span class="hl-quotes">'</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-builtin">unichr</span><span class="hl-brackets">(</span><span class="hl-number">99</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">u</span><span class="hl-quotes">'</span><span class="hl-string">c</span><span class="hl-quotes">'</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Pythonexecfile()函数	execfile() 函数可以用来执行一个文件。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> execfile() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p>execfile() 函数可以用来执行一个文件。</p><h3>语法</h3><p>以下是 execfile() 方法的语法:</p><pre><br/>execfile(filename[, globals[, locals]])<br/></pre><h3>参数</h3><ul><li>filename -- 文件名。</li><li>globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li><li>locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li></ul><h3>返回值</h3><p>返回表达式执行结果。</p><hr/><h2>实例</h2><p>以下展示了使用 execfile 函数的实例：</p><p>假设文件 hello.py，内容如下：</p><pre><br/>print('runoob');<br/></pre><div class="example"><h2 class="example">execfile 调用该文件</h2><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-builtin">execfile</span><span class="hl-brackets">(</span><span class="hl-quotes">'</span><span class="hl-string">hello.py</span><span class="hl-quotes">'</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">runoob</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3floor()函数	floor(x) 返回数字的下舍整数，小于或等于 x。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> floor() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>floor(x) 返回数字的下舍整数，小于或等于 x。</p><hr/><h2>语法</h2><p>以下是 floor() 方法的语法:</p><pre><br/>import math<br/><br/>math.floor( x )<br/></pre><p><strong>注意：</strong>floor()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回小于或等于 x 的整数。<hr/><h2>实例</h2><p>以下展示了使用 floor() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/>import math   # 导入 math 模块<br/><br/>print ("math.floor(-45.17) : ", math.floor(-45.17))<br/>print ("math.floor(100.12) : ", math.floor(100.12))<br/>print ("math.floor(100.72) : ", math.floor(100.72))<br/>print ("math.floor(math.pi) : ", math.floor(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.floor(-45.17) :  -46<br/>math.floor(100.12) :  100<br/>math.floor(100.72) :  100<br/>math.floor(math.pi) :  3<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythoniter()函数	iter() 函数用来生成迭代器。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> iter() 函数</span></h1><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p><hr/><h2>描述</h2><p><b>iter()</b> 函数用来生成迭代器。</p><h3>语法</h3><p>以下是 iter() 方法的语法:</p><pre><br/>iter(object[, sentinel])<br/></pre><h3>参数</h3><ul><li>object --  支持迭代的集合对象。<li>sentinel -- 如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的__next__()方法时，都会调用 object。</li>打开模式</li></ul><h3>返回值</h3><p>迭代器对象。</p><h3>实例</h3><div class="example"><div class="example_code"><div class="hl-main"><span class="hl-code">&gt;&gt;&gt;</span><span class="hl-identifier">lst</span><span class="hl-code"> = </span><span class="hl-brackets">[</span><span class="hl-number">1</span><span class="hl-code">, </span><span class="hl-number">2</span><span class="hl-code">, </span><span class="hl-number">3</span><span class="hl-brackets">]</span><span class="hl-code">&gt;&gt;&gt; </span><span class="hl-reserved">for</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-reserved">in</span><span class="hl-code"> </span><span class="hl-builtin">iter</span><span class="hl-brackets">(</span><span class="hl-identifier">lst</span><span class="hl-brackets">)</span><span class="hl-code">:...     </span><span class="hl-identifier">print</span><span class="hl-brackets">(</span><span class="hl-identifier">i</span><span class="hl-brackets">)</span><span class="hl-code">... </span><span class="hl-number">1</span><span class="hl-code"></span><span class="hl-number">2</span><span class="hl-code"></span><span class="hl-number">3</span></div></div></div><p><a href="http://www.runoob.com/python/python-built-in-functions.html"><img alt="Python 内置函数" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 内置函数</a></p></div></div>
Python3sin()函数	 sin() 返回的x弧度的正弦值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> sin() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>sin()</b> 返回的x弧度的正弦值。</p><hr/><h2>语法</h2><p>以下是 sin() 方法的语法:</p><pre><br/>import math<br/><br/>math.sin(x)<br/></pre><p><strong>注意：</strong>sin()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回的x弧度的正弦值，数值在 -1 到 1 之间。</p><hr/><h2>实例</h2><p>以下展示了使用 sin() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("sin(3) : ",  math.sin(3))<br/>print ("sin(-3) : ",  math.sin(-3))<br/>print ("sin(0) : ",  math.sin(0))<br/>print ("sin(math.pi) : ",  math.sin(math.pi))<br/>print ("sin(math.pi/2) : ",  math.sin(math.pi/2))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>sin(3) :  0.1411200080598672<br/>sin(-3) :  -0.1411200080598672<br/>sin(0) :  0.0<br/>sin(math.pi) :  1.2246467991473532e-16<br/>sin(math.pi/2) :  1.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3os.ttyname()方法	os.ttyname() 方法用于返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.ttyname() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.ttyname() 方法用于返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。</p><h3>语法</h3><p><b>ttyname()</b>方法语法格式如下：</p><pre><br/>os.ttyname(fd)<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>返回一个字符串，它表示与文件描述符fd 关联的终端设备。</p><h3>实例</h3><p>以下实例演示了 ttyname() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 显示当前目录<br/>print ("当前目录 :%s" %os.getcwd())<br/><br/># 修改目录为 /dev/tty<br/>fd = os.open("/dev/tty",os.O_RDONLY)<br/><br/>p = os.ttyname(fd)<br/>print ("关联的终端为: ")<br/>print (p)<br/>print ("done!!")<br/><br/>os.close(fd)<br/>print ("关闭文件成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前目录 :/tmp<br/>关联的终端为:<br/>/dev/tty<br/>done!!<br/>关闭文件成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Python3atan2()函数	 atan2() 返回给定的 X 及 Y 坐标值的反正切值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> atan2() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>atan2()</b> 返回给定的 X 及 Y 坐标值的反正切值。</p><hr/><h2>语法</h2><p>以下是 atan2() 方法的语法:</p><pre><br/>import math<br/><br/>math.atan2(y, x)<br/></pre><p><strong>注意：</strong>atan2()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li><li>y -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回给定的 X 及 Y 坐标值的反正切值。</p><hr/><h2>实例</h2><p>以下展示了使用 atan2() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("atan2(-0.50,-0.50) : ",  math.atan2(-0.50,-0.50))<br/>print ("atan2(0.50,0.50) : ",  math.atan2(0.50,0.50))<br/>print ("atan2(5,5) : ",  math.atan2(5,5))<br/>print ("atan2(-10,10) : ",  math.atan2(-10,10))<br/>print ("atan2(10,20) : ",  math.atan2(10,20))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>atan2(-0.50,-0.50) :  -2.356194490192345<br/>atan2(0.50,0.50) :  0.7853981633974483<br/>atan2(5,5) :  0.7853981633974483<br/>atan2(-10,10) :  -0.7853981633974483<br/>atan2(10,20) :  0.4636476090008061<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythontimectime()方法	语法	<div class="article-body"><div class="article-intro" id="content"><h1>Python time ctime()方法</h1><hr/><h2>描述</h2><p>Python time ctime() 函数把一个时间戳（按秒计算的浮点数）转化为time.asctime()的形式。如果参数未给或者为None的时候，将会默认time.time()为参数。它的作用相当于 asctime(localtime(secs))。</p><h2>语法</h2><p>ctime()方法语法：</p><pre><br/>time.ctime([ sec ])<br/></pre><h2>参数</h2><ul><li>sec -- 要转换为字符串时间的秒数。</li></ul><h2>返回值</h2><p>该函数没有任何返回值。</p><h2>实例</h2><p>以下实例展示了 ctime() 函数的使用方法：</p><pre><br/>#!/usr/bin/python<br/>import time<br/><br/>print "time.ctime() : %s" % time.ctime()<br/></pre><p>以上实例输出结果为：</p><pre><br/>time.ctime() : Tue Feb 17 10:00:18 2013<br/></pre></div></div>
Python3fabs()函数	fabs() 方法返回数字的绝对值，如math.fabs(-10) 返回10.0。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> fabs() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p>fabs() 方法返回数字的绝对值，如math.fabs(-10) 返回10.0。</p><p>fabs() 函数类似于 abs() 函数，但是他有两点区别:</p><ul><li><p>abs() 是内置函数。 fabs() 函数在 math 模块中定义。</p></li><li><p>fabs() 函数只对浮点型跟整型数值有效。 abs() 还可以运用在复数中。</p></li></ul><hr/><h2>语法</h2><p>以下是 fabs() 方法的语法:</p><pre><br/>import math<br/><br/>math.fabs( x )<br/></pre><p><strong>注意：</strong>fabs()是不能直接访问的，需要导入 math 模块，通过静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 数值表达式。</li></ul><hr/><h2>返回值</h2>返回数字的绝对值。<hr/><h2>实例</h2><p>以下展示了使用 fabs() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math   # 导入 math 模块<br/><br/>print ("math.fabs(-45.17) : ", math.fabs(-45.17))<br/>print ("math.fabs(100.12) : ", math.fabs(100.12))<br/>print ("math.fabs(100.72) : ", math.fabs(100.72))<br/>print ("math.fabs(math.pi) : ", math.fabs(math.pi))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>math.fabs(-45.17) :  45.17<br/>math.fabs(100.12) :  100.12<br/>math.fabs(100.72) :  100.72<br/>math.fabs(math.pi) :  3.141592653589793<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3acos()函数	 acos() 返回x的反余弦弧度值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> acos() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>acos()</b> 返回x的反余弦弧度值。</p><hr/><h2>语法</h2><p>以下是 acos() 方法的语法:</p><pre><br/>import math<br/><br/>math.acos(x)<br/></pre><p><strong>注意：</strong>acos()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- -1到1之间的数值。如果x是大于1，会产生一个错误。</li></ul><hr/><h2>返回值</h2><p>返回x的反余弦弧度值。</p><hr/><h2>实例</h2><p>以下展示了使用 acos() 方法的实例：</p><pre><br/>#!/usr/bin/python3<br/>import math<br/><br/>print ("acos(0.64) : ",  math.acos(0.64))<br/>print ("acos(0) : ",  math.acos(0))<br/>print ("acos(-1) : ",  math.acos(-1))<br/>print ("acos(1) : ",  math.acos(1))<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>acos(0.64) :  0.8762980611683406<br/>acos(0) :  1.5707963267948966<br/>acos(-1) :  3.141592653589793<br/>acos(1) :  0.0<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Pythonuniform()函数	 uniform() 方法将随机生成下一个实数，它在 [x, y) 范围内。	<div class="article-body"><div class="article-intro" id="content"><h1>Python <span class="color_h1"> uniform() 函数</span></h1><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p><hr/><h2>描述</h2><p> <b>uniform()</b> 方法将随机生成下一个实数，它在 <span class="marked">[x, y)</span> 范围内。</p><hr/><h2>语法</h2><p>以下是 uniform() 方法的语法:</p><pre><br/>import random<br/><br/>random.uniform(x, y)<br/></pre><p><strong>注意：</strong>uniform()是不能直接访问的，需要导入 random  模块，然后通过 random 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 随机数的最小值，包含该值。</li><li>y -- 随机数的最大值，不包含该值。</li></ul><hr/><h2>返回值</h2><p>返回一个浮点数。</p><hr/><h2>实例</h2><p>以下展示了使用 uniform() 方法的实例：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import random<br/><br/>print "uniform(5, 10) 的随机数为 : ",  random.uniform(5, 10)<br/><br/>print "uniform(7, 14) 的随机数为 : ",  random.uniform(7, 14)<br/></pre><p>以上实例运行后输出结果为：</p><pre><br/>uniform(5, 10) 的随机数为 :  6.98774810047<br/>uniform(7, 14) 的随机数为 :  12.2243345905<br/></pre><p><a href="http://www.runoob.com/python/python-numbers.html"><img alt="Python 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 数字</a></p></div></div>
Pythonos.fchdir()方法	os.fchdir() 方法通过文件描述符改变当前工作目录。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.fchdir() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.fchdir() 方法通过文件描述符改变当前工作目录。</p><p> Unix, Windows 上可用。</p><h3>语法</h3><p><b>fchdir()</b>方法语法格式如下：</p><pre><br/>os.fchdir(fd);<br/></pre><h3>参数</h3><ul><li><p><b>fd</b> -- 文件描述符</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 fchdir() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 首先到目录 "/var/www/html" <br/>os.chdir("/var/www/html" )<br/><br/># 输出当前目录<br/>print "当前工作目录为 : %s" % os.getcwd()<br/><br/># 打开新目录 "/tmp"<br/>fd = os.open( "/tmp", os.O_RDONLY )<br/><br/># 使用 os.fchdir() 方法修改到新目录<br/>os.fchdir(fd)<br/><br/># 输出当前目录<br/>print "当前工作目录为 : %s" % os.getcwd()<br/><br/># 关闭打开的目录<br/>os.close( fd )<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>当前工作目录为 : /var/www/html<br/>当前工作目录为 : /tmp<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Pythonjoin()方法	Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。	<div class="article-body"><div class="article-intro" id="content"><h1>Python join()方法</h1><p><a href="python-string.html"><img alt="Python 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python 字符串</a></p><hr/><h2>描述</h2><p>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><h2>语法</h2><p>join()方法语法：</p><pre><br/>str.join(sequence)<br/></pre><h2>参数</h2><ul><li>sequence -- 要连接的元素序列。</li></ul></div></div>
Python3Fileseek()方法	seek() 方法用于移动文件读取指针到指定位置。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 File seek() 方法</h1><p><a href="http://www.runoob.com/python3/python3-file-methods.html"><img alt="Python3 File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 File(文件) 方法</a></p><hr/><h3>概述</h3><p><b>seek()</b> 方法用于移动文件读取指针到指定位置。</p></div></div>
Python3tan()函数	 tan() 返回 x 弧度的正切值。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 <span class="color_h1"> tan() 函数</span></h1><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p><hr/><h2>描述</h2><p> <b>tan()</b> 返回 x 弧度的正切值。</p><hr/><h2>语法</h2><p>以下是 tan() 方法的语法:</p><pre><br/>import math<br/><br/>math.tan(x)<br/></pre><p><strong>注意：</strong>tan()是不能直接访问的，需要导入 math  模块，然后通过 math 静态对象调用该方法。</p><hr/><h2>参数</h2><ul><li>x -- 一个数值。</li></ul><hr/><h2>返回值</h2><p>返回 x 弧度的正切值，数值在 -1 到 1 之间。</p><hr/><h2>实例</h2><p>以下展示了使用 tan() 方法的实例：</p><div class="example"><h2 class="example">实例(Python 3.0+)</h2><div class="example_code"><div class="hl-main"><span class="hl-comment">#!/usr/bin/python3</span><span class="hl-code"></span><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">math</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">(tan(3) : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">tan</span><span class="hl-brackets">(</span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">tan(-3) : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">tan</span><span class="hl-brackets">(</span><span class="hl-code">-</span><span class="hl-number">3</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">tan(0) : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">tan</span><span class="hl-brackets">(</span><span class="hl-number">0</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">tan(math.pi) : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">tan</span><span class="hl-brackets">(</span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">pi</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">tan(math.pi/2) : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">tan</span><span class="hl-brackets">(</span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">pi</span><span class="hl-code">/</span><span class="hl-number">2</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span><span class="hl-code"></span><span class="hl-identifier">print</span><span class="hl-code"> </span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">tan(math.pi/4) : </span><span class="hl-quotes">"</span><span class="hl-code">,  </span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">tan</span><span class="hl-brackets">(</span><span class="hl-identifier">math</span><span class="hl-code">.</span><span class="hl-identifier">pi</span><span class="hl-code">/</span><span class="hl-number">4</span><span class="hl-brackets">)</span><span class="hl-brackets">)</span></div></div></div><p>以上实例运行后输出结果为：</p><pre><br/>(tan(3) :  -0.1425465430742778<br/>tan(-3) :  0.1425465430742778<br/>tan(0) :  0.0<br/>tan(math.pi) :  -1.2246467991473532e-16<br/>tan(math.pi/2) :  1.633123935319537e+16<br/>tan(math.pi/4) :  0.9999999999999999<br/></pre><p><a href="http://www.runoob.com/python3/python3-number.html"><img alt="Python3 数字" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 数字</a></p></div></div>
Python3min()方法	Python min() 方法返回字符串中最小的字母。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 min()方法</h1><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p><hr/><h2>描述</h2><p>Python min() 方法返回字符串中最小的字母。</p><h2>语法</h2><p>min()方法语法：</p><pre><br/>min(str)<br/></pre><h2>参数</h2><ul><li>str -- 字符串。</li></ul><h2>返回值</h2><p>返回字符串中最小的字母。</p><h2>实例</h2><p>以下实例展示了min()函数的使用方法：</p><pre><br/>#!/usr/bin/python3<br/><br/>str = "runoob";<br/>print ("最小字符: " + min(str));<br/></pre><p>以上实例输出结果如下：</p><pre><br/>最小字符: b<br/></pre><hr/><p><a href="http://www.runoob.com/python3/python3-string.html"><img alt="Python3 字符串" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 字符串</a></p></div></div>
Pythonos.lchflags()方法	os.lchflags() 方法用于设置路径的标记为数字标记，类似 chflags()，但是没有软链接。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.lchflags() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.lchflags() 方法用于设置路径的标记为数字标记，类似 chflags()，但是没有软链接。</p><p>只支持在 Unix 下使用。</p><h3>语法</h3><p><b>lchflags()</b>方法语法格式如下：</p><pre><br/>os.lchflags(path, flags)<br/></pre><h3>参数</h3><ul><li><p><b>path</b> --  设置标记的文件路径</p></li><li><p><b>flags</b> -- 可以由一个或多个标记组合，多个使用"|"隔开：</p><ul><li><p><b>UF_NODUMP:</b> 非转储文件</p></li><li><p><b>UF_IMMUTABLE:</b> 文件是只读的</p></li><li><p><b>UF_APPEND:</b> 文件只能追加内容</p></li><li><p><b>UF_NOUNLINK:</b> 文件不可删除</p></li><li><p><b>UF_OPAQUE:</b> 目录不透明，需要通过联合堆栈查看</p></li><li><p><b>SF_ARCHIVED:</b> 可存档文件(超级用户可设)</p></li><li><p><b>SF_IMMUTABLE:</b> 文件是只读的(超级用户可设)</p></li><li><p><b>SF_APPEND:</b> 文件只能追加内容(超级用户可设)</p></li><li><p><b>SF_NOUNLINK:</b> 文件不可删除(超级用户可设)</p></li><li><p><b>SF_SNAPSHOT:</b> 快照文件(超级用户可设)</p></li></ul></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 lchflags() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os, sys<br/><br/># 打开文件<br/>path = "/var/www/html/foo.txt"<br/>fd = os.open( path, os.O_RDWR|os.O_CREAT )<br/><br/># 关闭文件<br/>os.close( fd )<br/><br/># 修改文件标记<br/>ret = os.lchflags(path, os.UF_IMMUTABLE )<br/><br/>print "修改文件标记成功!!"<br/></pre><p>执行以上程序输出结果为：</p><pre><br/>修改文件标记成功!!<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
Python3os.chroot()方法	os.chroot() 方法用于更改当前进程的根目录为指定的目录，使用该函数需要管理员权限。	<div class="article-body"><div class="article-intro" id="content"><h1>Python3 os.chroot() 方法</h1><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.chroot() 方法用于更改当前进程的根目录为指定的目录，使用该函数需要管理员权限。</p><p>在 unix 中有效。</p><h3>语法</h3><p><b>chroot()</b>方法语法格式如下：</p><pre><br/>os.chroot(path);<br/></pre><h3>参数</h3><ul><li><p><b>path</b> -- 要设置为根目录的目录。 </p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 chroot() 方法的使用：</p><pre><br/>#!/usr/bin/python3<br/><br/>import os, sys<br/><br/># 设置根目录为 /tmp<br/><br/>os.chroot("/tmp")<br/><br/>print ("修改根目录成功!!")<br/></pre><p>执行以上程序输出结果为：</p><pre>修改根目录成功!!<br/></pre><p><a href="http://www.runoob.com/python3/python3-os-file-methods.html"><img alt="Python3 OS 文件/目录方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python3 OS 文件/目录方法</a></p></div></div>
Pythonos.symlink()方法	os.symlink() 方法用于创建一个软链接。	<div class="article-body"><div class="article-intro" id="content"><h1>Python os.symlink() 方法</h1><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p><hr/><h3>概述</h3><p>os.symlink() 方法用于创建一个软链接。</p><h3>语法</h3><p><b>symlink()</b>方法语法格式如下：</p><pre><br/>os.symlink(src, dst)<br/></pre><h3>参数</h3><ul><li><p><b>src</b> --  源地址。</p></li><li><p><b>dst</b> --  目标地址。</p></li></ul><h3>返回值</h3><p>该方法没有返回值。</p><h3>实例</h3><p>以下实例演示了 symlink() 方法的使用：</p><pre><br/>#!/usr/bin/python<br/># -*- coding: UTF-8 -*-<br/><br/>import os<br/><br/>src = '/usr/bin/python'<br/>dst = '/tmp/python'<br/><br/># 创建软链接<br/>os.symlink(src, dst)<br/><br/>print "软链接创建成功"<br/></pre><p>执行以上程序输出结果为：</p><pre>软链接创建成功<br/></pre><p><a href="http://www.runoob.com/python/os-file-methods.html"><img alt="Python File(文件) 方法" class="navup" src="http://www.runoob.com/images/up.gif"/> Python OS 文件/目录方法</a></p></div></div>
